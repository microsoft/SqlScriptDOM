//------------------------------------------------------------------------------
// <copyright file="Ast.cs" company="Microsoft">
//         Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace Microsoft.SqlServer.TransactSql.ScriptDom
{
	internal interface ICollationSetter
	{

		/// <summary>
		/// Collation identifier
		/// </summary>
		Identifier Collation
		{
			get; set;
		}


	}

	internal interface IDataMaskingSetter
	{

		/// <summary>
		/// True if the column has a data masking function applied.
		/// </summary>
		bool IsMasked
		{
			get; set;
		}

		/// <summary>
		/// Represents the data masking function applied to the column.
		/// </summary>
		StringLiteral MaskingFunction
		{
			get; set;
		}


	}

	internal interface IFileStreamSpecifier
	{

		/// <summary>
		/// Optional specification of the filestream. Can be either Identifier or String literal.
		/// </summary>
		IdentifierOrValueExpression FileStreamOn
		{
			get; set;
		}


	}

	internal interface IAuthorization
	{

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		Identifier Owner
		{
			get; set;
		}


	}

	/// <summary>
	/// Holds passwords for encrypting/decrypting private key
	/// </summary>
	internal interface IPasswordChangeOption
	{

		/// <summary>
		/// Optional private key encryption password
		/// </summary>
		Literal EncryptionPassword
		{
			get; set;
		}

		/// <summary>
		/// Optional private key decryption password
		/// </summary>
		Literal DecryptionPassword
		{
			get; set;
		}


	}

	/// <summary>
	/// Represents a list of statements.
	/// </summary>
	[System.Serializable]
	public partial class StatementList : TSqlFragment
	{


		private List<TSqlStatement> _statements = new List<TSqlStatement>();

		/// <summary>
		/// A list of statements, possibly empty.
		/// </summary>
		public IList<TSqlStatement> Statements
		{
			get { return _statements; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Statements.Count; i < count; ++i)
			{
				this.Statements[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the EXECUTE T-SQL statement
	/// </summary>
	[System.Serializable]
	public partial class ExecuteStatement : TSqlStatement
	{


		private ExecuteSpecification _executeSpecification;

		/// <summary>
		/// The execute specification
		/// </summary>
		public ExecuteSpecification ExecuteSpecification
		{
			get { return _executeSpecification; }
			set { UpdateTokenInfo(value); _executeSpecification = value; }
		}
		private List<ExecuteOption> _options = new List<ExecuteOption>();

		/// <summary>
		/// The execute options
		/// </summary>
		public IList<ExecuteOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ExecuteSpecification != null)
			{
				this.ExecuteSpecification.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an option to the execute statement
	/// </summary>
	[System.Serializable]
	public partial class ExecuteOption : TSqlFragment
	{


		private ExecuteOptionKind _optionKind;

		/// <summary>
		/// The type of the execute option
		/// </summary>
		public ExecuteOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The results set description for EXECUTE statements
	/// </summary>
	[System.Serializable]
	public partial class ResultSetsExecuteOption : ExecuteOption
	{


		private ResultSetsOptionKind _resultSetsOptionKind;

		/// <summary>
		/// The representation of the result sets.
		/// </summary>
		public ResultSetsOptionKind ResultSetsOptionKind
		{
			get { return _resultSetsOptionKind; }
			set { _resultSetsOptionKind = value; }
		}
		private List<ResultSetDefinition> _definitions = new List<ResultSetDefinition>();

		/// <summary>
		/// The collection of definitions for each result set.
		/// </summary>
		public IList<ResultSetDefinition> Definitions
		{
			get { return _definitions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Definitions.Count; i < count; ++i)
			{
				this.Definitions[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The definition of an individual result set
	/// </summary>
	[System.Serializable]
	public partial class ResultSetDefinition : TSqlFragment
	{


		private ResultSetType _resultSetType;

		/// <summary>
		/// The type of the result set definition
		/// </summary>
		public ResultSetType ResultSetType
		{
			get { return _resultSetType; }
			set { _resultSetType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the inline definition of a result set
	/// </summary>
	[System.Serializable]
	public partial class InlineResultSetDefinition : ResultSetDefinition
	{


		private List<ResultColumnDefinition> _resultColumnDefinitions = new List<ResultColumnDefinition>();

		/// <summary>
		/// The column definitions
		/// </summary>
		public IList<ResultColumnDefinition> ResultColumnDefinitions
		{
			get { return _resultColumnDefinitions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.ResultColumnDefinitions.Count; i < count; ++i)
			{
				this.ResultColumnDefinitions[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the column definition of a result set
	/// </summary>
	[System.Serializable]
	public partial class ResultColumnDefinition : TSqlFragment
	{


		private ColumnDefinitionBase _columnDefinition;

		/// <summary>
		/// The column definition
		/// </summary>
		public ColumnDefinitionBase ColumnDefinition
		{
			get { return _columnDefinition; }
			set { UpdateTokenInfo(value); _columnDefinition = value; }
		}
		private NullableConstraintDefinition _nullable;

		/// <summary>
		/// The nullable constraint for the column
		/// </summary>
		public NullableConstraintDefinition Nullable
		{
			get { return _nullable; }
			set { UpdateTokenInfo(value); _nullable = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ColumnDefinition != null)
			{
				this.ColumnDefinition.Accept(visitor);
			}

			if (this.Nullable != null)
			{
				this.Nullable.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the result set as a reference to an existing schema object or type
	/// </summary>
	[System.Serializable]
	public partial class SchemaObjectResultSetDefinition : ResultSetDefinition
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The name of the SchemaObject
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a call to EXECUTE
	/// </summary>
	[System.Serializable]
	public partial class ExecuteSpecification : TSqlFragment
	{


		private VariableReference _variable;

		/// <summary>
		/// Variable for the return value of the EXECUTE
		/// </summary>
		public VariableReference Variable
		{
			get { return _variable; }
			set { UpdateTokenInfo(value); _variable = value; }
		}
		private Identifier _linkedServer;

		/// <summary>
		/// The linked server name for EXECUTE AT
		/// </summary>
		public Identifier LinkedServer
		{
			get { return _linkedServer; }
			set { UpdateTokenInfo(value); _linkedServer = value; }
		}
		private ExecuteContext _executeContext;

		/// <summary>
		/// The execute security context
		/// </summary>
		public ExecuteContext ExecuteContext
		{
			get { return _executeContext; }
			set { UpdateTokenInfo(value); _executeContext = value; }
		}
		private ExecutableEntity _executableEntity;

		/// <summary>
		/// The entity to be executed
		/// </summary>
		public ExecutableEntity ExecutableEntity
		{
			get { return _executableEntity; }
			set { UpdateTokenInfo(value); _executableEntity = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Variable != null)
			{
				this.Variable.Accept(visitor);
			}

			if (this.LinkedServer != null)
			{
				this.LinkedServer.Accept(visitor);
			}

			if (this.ExecuteContext != null)
			{
				this.ExecuteContext.Accept(visitor);
			}

			if (this.ExecutableEntity != null)
			{
				this.ExecutableEntity.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the security context for execute statements
	/// </summary>
	[System.Serializable]
	public partial class ExecuteContext : TSqlFragment
	{


		private ScalarExpression _principal;

		/// <summary>
		/// The principal used to execute the statement
		/// </summary>
		public ScalarExpression Principal
		{
			get { return _principal; }
			set { UpdateTokenInfo(value); _principal = value; }
		}
		private ExecuteAsOption _kind;

		/// <summary>
		/// Principal type - can be Login or User
		/// </summary>
		public ExecuteAsOption Kind
		{
			get { return _kind; }
			set { _kind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Principal != null)
			{
				this.Principal.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Parameter passed to procedure in EXECUTE statement
	/// </summary>
	[System.Serializable]
	public partial class ExecuteParameter : TSqlFragment
	{


		private VariableReference _variable;

		/// <summary>
		/// The reference to the parameter variable
		/// </summary>
		public VariableReference Variable
		{
			get { return _variable; }
			set { UpdateTokenInfo(value); _variable = value; }
		}
		private ScalarExpression _parameterValue;

		/// <summary>
		/// The value of the parameter
		/// </summary>
		public ScalarExpression ParameterValue
		{
			get { return _parameterValue; }
			set { UpdateTokenInfo(value); _parameterValue = value; }
		}
		private bool _isOutput;

		/// <summary>
		/// Whether the parameter is output
		/// </summary>
		public bool IsOutput
		{
			get { return _isOutput; }
			set { _isOutput = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Variable != null)
			{
				this.Variable.Accept(visitor);
			}

			if (this.ParameterValue != null)
			{
				this.ParameterValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for all possible things which can be executed with EXECUTE statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class ExecutableEntity : TSqlFragment
	{


		private List<ExecuteParameter> _parameters = new List<ExecuteParameter>();

		/// <summary>
		/// The collection of parameters to execute.
		/// </summary>
		public IList<ExecuteParameter> Parameters
		{
			get { return _parameters; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a procedure by name, either as a ProcedureReference or contained within a variable.
	/// </summary>
	[System.Serializable]
	public partial class ProcedureReferenceName : TSqlFragment
	{


		private ProcedureReference _procedureReference;

		/// <summary>
		/// Mutually Exclusive with ProcedureVariable.
		/// </summary>
		public ProcedureReference ProcedureReference
		{
			get { return _procedureReference; }
			set { UpdateTokenInfo(value); _procedureReference = value; }
		}
		private VariableReference _procedureVariable;

		/// <summary>
		/// Mutually Exclusive with ProcedureReference.
		/// </summary>
		public VariableReference ProcedureVariable
		{
			get { return _procedureVariable; }
			set { UpdateTokenInfo(value); _procedureVariable = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ProcedureReference != null)
			{
				this.ProcedureReference.Accept(visitor);
			}

			if (this.ProcedureVariable != null)
			{
				this.ProcedureVariable.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a reference to a procedure in execute.
	/// </summary>
	[System.Serializable]
	public partial class ExecutableProcedureReference : ExecutableEntity
	{


		private ProcedureReferenceName _procedureReference;

		/// <summary>
		/// The reference to the procedure
		/// </summary>
		public ProcedureReferenceName ProcedureReference
		{
			get { return _procedureReference; }
			set { UpdateTokenInfo(value); _procedureReference = value; }
		}
		private AdHocDataSource _adHocDataSource;

		/// <summary>
		/// The ad hoc data source where the procedure will be executed.
		/// </summary>
		public AdHocDataSource AdHocDataSource
		{
			get { return _adHocDataSource; }
			set { UpdateTokenInfo(value); _adHocDataSource = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.ProcedureReference != null)
			{
				this.ProcedureReference.Accept(visitor);
			}

			if (this.AdHocDataSource != null)
			{
				this.AdHocDataSource.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Strings representing commands passed to EXECUTE statement.
	/// </summary>
	[System.Serializable]
	public partial class ExecutableStringList : ExecutableEntity
	{


		private List<ValueExpression> _strings = new List<ValueExpression>();

		/// <summary>
		/// The strings or variable references to be executed.
		/// </summary>
		public IList<ValueExpression> Strings
		{
			get { return _strings; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Strings.Count; i < count; ++i)
			{
				this.Strings[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ad hoc datasource.
	/// </summary>
	[System.Serializable]
	public partial class AdHocDataSource : TSqlFragment
	{


		private StringLiteral _providerName;

		/// <summary>
		/// The provider name.
		/// </summary>
		public StringLiteral ProviderName
		{
			get { return _providerName; }
			set { UpdateTokenInfo(value); _providerName = value; }
		}
		private StringLiteral _initString;

		/// <summary>
		/// The init string defining the connection
		/// </summary>
		public StringLiteral InitString
		{
			get { return _initString; }
			set { UpdateTokenInfo(value); _initString = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ProviderName != null)
			{
				this.ProviderName.Accept(visitor);
			}

			if (this.InitString != null)
			{
				this.InitString.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the View option.
	/// </summary>
	[System.Serializable]
	public partial class ViewOption : TSqlFragment
	{


		private ViewOptionKind _optionKind;

		/// <summary>
		/// The type of the view option.
		/// </summary>
		public ViewOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The ALTER VIEW statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterViewStatement : ViewStatementBody
	{


		private bool _isRebuild;

		/// <summary>
		/// True if REBUILD is defined for SQL DW materialized views.
		/// </summary>
		public bool IsRebuild
		{
			get { return _isRebuild; }
			set { _isRebuild = value; }
		}
		private bool _isDisable;

		/// <summary>
		/// True if DISABLE is defined for SQL DW materialized views.
		/// </summary>
		public bool IsDisable
		{
			get { return _isDisable; }
			set { _isDisable = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The CREATE VIEW statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateViewStatement : ViewStatementBody
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The CREATE OR ALTER VIEW statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateOrAlterViewStatement : ViewStatementBody
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for CREATE/ALTER VIEW statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class ViewStatementBody : TSqlStatement
	{


		private SchemaObjectName _schemaObjectName;

		/// <summary>
		/// The name of the view.
		/// </summary>
		public SchemaObjectName SchemaObjectName
		{
			get { return _schemaObjectName; }
			set { UpdateTokenInfo(value); _schemaObjectName = value; }
		}
		private List<Identifier> _columns = new List<Identifier>();

		/// <summary>
		/// The columns for the view.
		/// </summary>
		public IList<Identifier> Columns
		{
			get { return _columns; }
		}

		private List<ViewOption> _viewOptions = new List<ViewOption>();

		/// <summary>
		/// Options in WITH clause
		/// </summary>
		public IList<ViewOption> ViewOptions
		{
			get { return _viewOptions; }
		}

		private SelectStatement _selectStatement;

		/// <summary>
		/// The query expression that represents the select, with optiona common table expression and xml namespaces clauses.
		/// </summary>
		public SelectStatement SelectStatement
		{
			get { return _selectStatement; }
			set { UpdateTokenInfo(value); _selectStatement = value; }
		}
		private bool _withCheckOption;

		/// <summary>
		/// True if With Check Option is defined.
		/// </summary>
		public bool WithCheckOption
		{
			get { return _withCheckOption; }
			set { _withCheckOption = value; }
		}
		private bool _isMaterialized;

		/// <summary>
		/// Whether the view is SQL DW materialized or not.
		/// </summary>
		public bool IsMaterialized
		{
			get { return _isMaterialized; }
			set { _isMaterialized = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SchemaObjectName != null)
			{
				this.SchemaObjectName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.ViewOptions.Count; i < count; ++i)
			{
				this.ViewOptions[i].Accept(visitor);
			}

			if (this.SelectStatement != null)
			{
				this.SelectStatement.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the view FOR_APPEND option for SQL DW materialized views.
	/// </summary>
	[System.Serializable]
	public partial class ViewForAppendOption : ViewOption
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the view DISTRIBUTION option for SQL DW materialized views.
	/// </summary>
	[System.Serializable]
	public partial class ViewDistributionOption : ViewOption
	{


		private ViewDistributionPolicy _value;

		/// <summary>
		/// The view distribution policy for materialized views.
		/// </summary>
		public ViewDistributionPolicy Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for materialized view distribution policies.
	/// </summary>
	[System.Serializable]
	public abstract partial class ViewDistributionPolicy : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Representation of the ROUND_ROBIN option for a materialized view distribution policy.
	/// </summary>
	[System.Serializable]
	public partial class ViewRoundRobinDistributionPolicy : ViewDistributionPolicy
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Representation of the HASH option for a materialized view distribution policy.
	/// </summary>
	[System.Serializable]
	public partial class ViewHashDistributionPolicy : ViewDistributionPolicy
	{


		/// <summary>
		/// The column reference in the HASH option for a view distribution policy.
		/// </summary>
		public Identifier DistributionColumn
		{
			get { return DistributionColumns.Count > 0 ? DistributionColumns[0] : null; }
			set
			{
				if (DistributionColumns.Count == 0)
				{
					DistributionColumns.Add(value);
				}
				else
				{
					DistributionColumns[0] = value;
				}
			}
		}
		private List<Identifier> _distributionColumns = new List<Identifier>();

		/// <summary>
		/// The columns reference in the HASH option for a view distribution policy.
		/// </summary>
		public IList<Identifier> DistributionColumns
		{
			get { return _distributionColumns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Information on what trigger is being created/altered
	/// </summary>
	[System.Serializable]
	public partial class TriggerObject : TSqlFragment
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The object to create the trigger on.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private TriggerScope _triggerScope;

		/// <summary>
		/// Needs override OnVisitTriggerObject in VersionChecker. Requires manual update - Normal=0 for 2K, 1=Database and 2=Server for 2K5
		/// </summary>
		public TriggerScope TriggerScope
		{
			get { return _triggerScope; }
			set { _triggerScope = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the trigger option.
	/// </summary>
	[System.Serializable]
	public partial class TriggerOption : TSqlFragment
	{


		private TriggerOptionKind _optionKind;

		/// <summary>
		/// The type of the option.
		/// </summary>
		public TriggerOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The EXECUTE AS trigger option
	/// </summary>
	[System.Serializable]
	public partial class ExecuteAsTriggerOption : TriggerOption
	{


		private ExecuteAsClause _executeAsClause;

		/// <summary>
		/// The execute as clause
		/// </summary>
		public ExecuteAsClause ExecuteAsClause
		{
			get { return _executeAsClause; }
			set { UpdateTokenInfo(value); _executeAsClause = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.ExecuteAsClause != null)
			{
				this.ExecuteAsClause.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the trigger action.
	/// </summary>
	[System.Serializable]
	public partial class TriggerAction : TSqlFragment
	{


		private TriggerActionType _triggerActionType;

		/// <summary>
		/// The type of the action.
		/// </summary>
		public TriggerActionType TriggerActionType
		{
			get { return _triggerActionType; }
			set { _triggerActionType = value; }
		}
		private EventTypeGroupContainer _eventTypeGroup;

		/// <summary>
		/// Represents the event. Will be null if the type is not event.
		/// </summary>
		public EventTypeGroupContainer EventTypeGroup
		{
			get { return _eventTypeGroup; }
			set { UpdateTokenInfo(value); _eventTypeGroup = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.EventTypeGroup != null)
			{
				this.EventTypeGroup.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The ALTER TRIGGER statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterTriggerStatement : TriggerStatementBody
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The CREATE TRIGGER statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateTriggerStatement : TriggerStatementBody
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The CREATE OR ALTER TRIGGER statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateOrAlterTriggerStatement : TriggerStatementBody
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE/ALTER TRIGGER statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class TriggerStatementBody : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The name of the trigger. Can at most be a two part name.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private TriggerObject _triggerObject;

		/// <summary>
		/// The target.
		/// </summary>
		public TriggerObject TriggerObject
		{
			get { return _triggerObject; }
			set { UpdateTokenInfo(value); _triggerObject = value; }
		}
		private List<TriggerOption> _options = new List<TriggerOption>();

		/// <summary>
		/// Options in WITH clause - different options for trigger and function
		/// </summary>
		public IList<TriggerOption> Options
		{
			get { return _options; }
		}

		private TriggerType _triggerType;

		/// <summary>
		/// The type of the trigger.
		/// </summary>
		public TriggerType TriggerType
		{
			get { return _triggerType; }
			set { _triggerType = value; }
		}
		private List<TriggerAction> _triggerActions = new List<TriggerAction>();

		/// <summary>
		/// The trigger actions.
		/// </summary>
		public IList<TriggerAction> TriggerActions
		{
			get { return _triggerActions; }
		}

		private bool _withAppend;

		/// <summary>
		/// True if WITH APPEND is defined.
		/// </summary>
		public bool WithAppend
		{
			get { return _withAppend; }
			set { _withAppend = value; }
		}
		private bool _isNotForReplication;

		/// <summary>
		/// True if NOT FOR REPLICATION is defined.
		/// </summary>
		public bool IsNotForReplication
		{
			get { return _isNotForReplication; }
			set { _isNotForReplication = value; }
		}
		private StatementList _statementList;

		/// <summary>
		/// Statements for trigger.
		/// </summary>
		public StatementList StatementList
		{
			get { return _statementList; }
			set { UpdateTokenInfo(value); _statementList = value; }
		}
		private MethodSpecifier _methodSpecifier;

		/// <summary>
		/// The name of the method specifier.
		/// </summary>
		public MethodSpecifier MethodSpecifier
		{
			get { return _methodSpecifier; }
			set { UpdateTokenInfo(value); _methodSpecifier = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.TriggerObject != null)
			{
				this.TriggerObject.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.TriggerActions.Count; i < count; ++i)
			{
				this.TriggerActions[i].Accept(visitor);
			}

			if (this.StatementList != null)
			{
				this.StatementList.Accept(visitor);
			}

			if (this.MethodSpecifier != null)
			{
				this.MethodSpecifier.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This fragment is used to represent an identifier
	/// </summary>
	[System.Serializable]
	public partial class Identifier : TSqlFragment
	{


		private string _value;

		/// <summary>
		/// The value of the identifier.
		/// </summary>
		public string Value
		{
			get { return _value; }
			set { _value = value; }
		}
		private QuoteType _quoteType;

		/// <summary>
		/// The type of the quote.
		/// </summary>
		public QuoteType QuoteType
		{
			get { return _quoteType; }
			set { _quoteType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The alter procedure statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterProcedureStatement : ProcedureStatementBody
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((ProcedureStatementBody)this).ProcedureReference != null)
			{
				 ((ProcedureStatementBody)this).ProcedureReference.Accept(visitor);
			}

			for (Int32 i = 0, count = ((ProcedureStatementBodyBase)this).Parameters.Count; i < count; ++i)
			{
				 ((ProcedureStatementBodyBase)this).Parameters[i].Accept(visitor);
			}

			for (Int32 i = 0, count = ((ProcedureStatementBody)this).Options.Count; i < count; ++i)
			{
				 ((ProcedureStatementBody)this).Options[i].Accept(visitor);
			}

			if (((ProcedureStatementBodyBase)this).StatementList != null)
			{
				 ((ProcedureStatementBodyBase)this).StatementList.Accept(visitor);
			}

			if (((ProcedureStatementBodyBase)this).MethodSpecifier != null)
			{
				 ((ProcedureStatementBodyBase)this).MethodSpecifier.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The create procedure statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateProcedureStatement : ProcedureStatementBody
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((ProcedureStatementBody)this).ProcedureReference != null)
			{
				 ((ProcedureStatementBody)this).ProcedureReference.Accept(visitor);
			}

			for (Int32 i = 0, count = ((ProcedureStatementBodyBase)this).Parameters.Count; i < count; ++i)
			{
				 ((ProcedureStatementBodyBase)this).Parameters[i].Accept(visitor);
			}

			for (Int32 i = 0, count = ((ProcedureStatementBody)this).Options.Count; i < count; ++i)
			{
				 ((ProcedureStatementBody)this).Options[i].Accept(visitor);
			}

			if (((ProcedureStatementBodyBase)this).StatementList != null)
			{
				 ((ProcedureStatementBodyBase)this).StatementList.Accept(visitor);
			}

			if (((ProcedureStatementBodyBase)this).MethodSpecifier != null)
			{
				 ((ProcedureStatementBodyBase)this).MethodSpecifier.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The create or alter procedure statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateOrAlterProcedureStatement : ProcedureStatementBody
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((ProcedureStatementBody)this).ProcedureReference != null)
			{
				 ((ProcedureStatementBody)this).ProcedureReference.Accept(visitor);
			}

			for (Int32 i = 0, count = ((ProcedureStatementBodyBase)this).Parameters.Count; i < count; ++i)
			{
				 ((ProcedureStatementBodyBase)this).Parameters[i].Accept(visitor);
			}

			for (Int32 i = 0, count = ((ProcedureStatementBody)this).Options.Count; i < count; ++i)
			{
				 ((ProcedureStatementBody)this).Options[i].Accept(visitor);
			}

			if (((ProcedureStatementBodyBase)this).StatementList != null)
			{
				 ((ProcedureStatementBodyBase)this).StatementList.Accept(visitor);
			}

			if (((ProcedureStatementBodyBase)this).MethodSpecifier != null)
			{
				 ((ProcedureStatementBodyBase)this).MethodSpecifier.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Reference to procedure by name and number
	/// </summary>
	[System.Serializable]
	public partial class ProcedureReference : TSqlFragment
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The procedure name
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private Literal _number;

		/// <summary>
		/// The procedure number
		/// </summary>
		public Literal Number
		{
			get { return _number; }
			set { UpdateTokenInfo(value); _number = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Number != null)
			{
				this.Number.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the method specifier.
	/// </summary>
	[System.Serializable]
	public partial class MethodSpecifier : TSqlFragment
	{


		private Identifier _assemblyName;

		/// <summary>
		/// The assembly name.
		/// </summary>
		public Identifier AssemblyName
		{
			get { return _assemblyName; }
			set { UpdateTokenInfo(value); _assemblyName = value; }
		}
		private Identifier _className;

		/// <summary>
		/// The class name.
		/// </summary>
		public Identifier ClassName
		{
			get { return _className; }
			set { UpdateTokenInfo(value); _className = value; }
		}
		private Identifier _methodName;

		/// <summary>
		/// The method name.
		/// </summary>
		public Identifier MethodName
		{
			get { return _methodName; }
			set { UpdateTokenInfo(value); _methodName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.AssemblyName != null)
			{
				this.AssemblyName.Accept(visitor);
			}

			if (this.ClassName != null)
			{
				this.ClassName.Accept(visitor);
			}

			if (this.MethodName != null)
			{
				this.MethodName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE/ALTER PROCEDURE statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class ProcedureStatementBody : ProcedureStatementBodyBase
	{


		private ProcedureReference _procedureReference;

		/// <summary>
		/// The name of the procedure. Can at most be a two part name.
		/// </summary>
		public ProcedureReference ProcedureReference
		{
			get { return _procedureReference; }
			set { UpdateTokenInfo(value); _procedureReference = value; }
		}
		private bool _isForReplication;

		/// <summary>
		/// True if For Replication is defined..
		/// </summary>
		public bool IsForReplication
		{
			get { return _isForReplication; }
			set { _isForReplication = value; }
		}
		private List<ProcedureOption> _options = new List<ProcedureOption>();

		/// <summary>
		/// The procedure with options.
		/// </summary>
		public IList<ProcedureOption> Options
		{
			get { return _options; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.ProcedureReference != null)
			{
				this.ProcedureReference.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents common propeties in CREATE/ALTER PROC/FUNCTION statements
	/// </summary>
	[System.Serializable]
	public abstract partial class ProcedureStatementBodyBase : TSqlStatement
	{


		private List<ProcedureParameter> _parameters = new List<ProcedureParameter>();

		/// <summary>
		/// Parameters which can be passed to procedure or function
		/// </summary>
		public IList<ProcedureParameter> Parameters
		{
			get { return _parameters; }
		}

		private StatementList _statementList;

		/// <summary>
		/// Statements for procedure / function (single BeginEnd in this case)
		/// </summary>
		public StatementList StatementList
		{
			get { return _statementList; }
			set { UpdateTokenInfo(value); _statementList = value; }
		}
		private MethodSpecifier _methodSpecifier;

		/// <summary>
		/// The name of the method specifier.
		/// </summary>
		public MethodSpecifier MethodSpecifier
		{
			get { return _methodSpecifier; }
			set { UpdateTokenInfo(value); _methodSpecifier = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

			if (this.StatementList != null)
			{
				this.StatementList.Accept(visitor);
			}

			if (this.MethodSpecifier != null)
			{
				this.MethodSpecifier.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE/ALTER FUNCTION statement
	/// </summary>
	[System.Serializable]
	public abstract partial class FunctionStatementBody : ProcedureStatementBodyBase
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The name of the function. Can at most be a two part name.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private FunctionReturnType _returnType;

		/// <summary>
		/// The return type of the function.  Depending on this property, Statements may be empty collection
		/// </summary>
		public FunctionReturnType ReturnType
		{
			get { return _returnType; }
			set { UpdateTokenInfo(value); _returnType = value; }
		}
		private List<FunctionOption> _options = new List<FunctionOption>();

		/// <summary>
		/// Options in WITH clause - different options for procedure and function. Custom Manual processing.
		/// </summary>
		public IList<FunctionOption> Options
		{
			get { return _options; }
		}

		private OrderBulkInsertOption _orderHint;

		/// <summary>
		/// Optional CLR table-valued options order hint. Valid only in case of CLR table-valued function.
		/// </summary>
		public OrderBulkInsertOption OrderHint
		{
			get { return _orderHint; }
			set { UpdateTokenInfo(value); _orderHint = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.ReturnType != null)
			{
				this.ReturnType.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			if (this.OrderHint != null)
			{
				this.OrderHint.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a Procedure Option
	/// </summary>
	[System.Serializable]
	public partial class ProcedureOption : TSqlFragment
	{


		private ProcedureOptionKind _optionKind;

		/// <summary>
		/// The type of the procedure option
		/// </summary>
		public ProcedureOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The execute as procedure option
	/// </summary>
	[System.Serializable]
	public partial class ExecuteAsProcedureOption : ProcedureOption
	{


		private ExecuteAsClause _executeAs;

		/// <summary>
		/// The execute as clause
		/// </summary>
		public ExecuteAsClause ExecuteAs
		{
			get { return _executeAs; }
			set { UpdateTokenInfo(value); _executeAs = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.ExecuteAs != null)
			{
				this.ExecuteAs.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a Function Option
	/// </summary>
	[System.Serializable]
	public partial class FunctionOption : TSqlFragment
	{


		private FunctionOptionKind _optionKind;

		/// <summary>
		/// The type of the function option
		/// </summary>
		public FunctionOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The Inline function option
	/// </summary>
	[System.Serializable]
	public partial class InlineFunctionOption : FunctionOption
	{


		private OptionState _optionState;

		/// <summary>
		/// The option state for Inline Function option
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The execute as function option
	/// </summary>
	[System.Serializable]
	public partial class ExecuteAsFunctionOption : FunctionOption
	{


		private ExecuteAsClause _executeAs;

		/// <summary>
		/// The execute as clause
		/// </summary>
		public ExecuteAsClause ExecuteAs
		{
			get { return _executeAs; }
			set { UpdateTokenInfo(value); _executeAs = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.ExecuteAs != null)
			{
				this.ExecuteAs.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// This class represents XmlNameSpaces
	/// </summary>
	[System.Serializable]
	public partial class XmlNamespaces : TSqlFragment
	{


		private List<XmlNamespacesElement> _xmlNamespacesElements = new List<XmlNamespacesElement>();

		/// <summary>
		/// This is the list for xml namespaces.
		/// </summary>
		public IList<XmlNamespacesElement> XmlNamespacesElements
		{
			get { return _xmlNamespacesElements; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.XmlNamespacesElements.Count; i < count; ++i)
			{
				this.XmlNamespacesElements[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The element that is used in defining xml namespace.
	/// </summary>
	[System.Serializable]
	public abstract partial class XmlNamespacesElement : TSqlFragment
	{


		private StringLiteral _string;

		/// <summary>
		/// Literal that can be a string.
		/// </summary>
		public StringLiteral String
		{
			get { return _string; }
			set { UpdateTokenInfo(value); _string = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.String != null)
			{
				this.String.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The default variation for the xml namespace element.
	/// </summary>
	[System.Serializable]
	public partial class XmlNamespacesDefaultElement : XmlNamespacesElement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The alias variation for the xml namespace element.
	/// </summary>
	[System.Serializable]
	public partial class XmlNamespacesAliasElement : XmlNamespacesElement
	{


		private Identifier _identifier;

		/// <summary>
		/// Represents the alias.
		/// </summary>
		public Identifier Identifier
		{
			get { return _identifier; }
			set { UpdateTokenInfo(value); _identifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Identifier != null)
			{
				this.Identifier.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// This class represents the common table expression.
	/// </summary>
	[System.Serializable]
	public partial class CommonTableExpression : TSqlFragment
	{


		private Identifier _expressionName;

		/// <summary>
		/// The expression name.
		/// </summary>
		public Identifier ExpressionName
		{
			get { return _expressionName; }
			set { UpdateTokenInfo(value); _expressionName = value; }
		}
		private List<Identifier> _columns = new List<Identifier>();

		/// <summary>
		/// The columns. Optional may have zero elements.
		/// </summary>
		public IList<Identifier> Columns
		{
			get { return _columns; }
		}

		private QueryExpression _queryExpression;

		/// <summary>
		/// The query definition.
		/// </summary>
		public QueryExpression QueryExpression
		{
			get { return _queryExpression; }
			set { UpdateTokenInfo(value); _queryExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ExpressionName != null)
			{
				this.ExpressionName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			if (this.QueryExpression != null)
			{
				this.QueryExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class represents a common construct that can have common table expressions and xml namespaces in it.
	/// </summary>
	[System.Serializable]
	public partial class WithCtesAndXmlNamespaces : TSqlFragment
	{


		private XmlNamespaces _xmlNamespaces;

		/// <summary>
		/// The xml namespaces. May be null.
		/// </summary>
		public XmlNamespaces XmlNamespaces
		{
			get { return _xmlNamespaces; }
			set { UpdateTokenInfo(value); _xmlNamespaces = value; }
		}
		private List<CommonTableExpression> _commonTableExpressions = new List<CommonTableExpression>();

		/// <summary>
		/// The common table expressions. May have zero elements.
		/// </summary>
		public IList<CommonTableExpression> CommonTableExpressions
		{
			get { return _commonTableExpressions; }
		}

		private ValueExpression _changeTrackingContext;

		/// <summary>
		/// Represents the change tracking context.
		/// </summary>
		public ValueExpression ChangeTrackingContext
		{
			get { return _changeTrackingContext; }
			set { UpdateTokenInfo(value); _changeTrackingContext = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.XmlNamespaces != null)
			{
				this.XmlNamespaces.Accept(visitor);
			}

			for (Int32 i = 0, count = this.CommonTableExpressions.Count; i < count; ++i)
			{
				this.CommonTableExpressions[i].Accept(visitor);
			}

			if (this.ChangeTrackingContext != null)
			{
				this.ChangeTrackingContext.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for function return type
	/// </summary>
	[System.Serializable]
	public abstract partial class FunctionReturnType : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The return type definition for multi-statement table-valued functions
	/// </summary>
	[System.Serializable]
	public partial class TableValuedFunctionReturnType : FunctionReturnType
	{


		private DeclareTableVariableBody _declareTableVariableBody;

		/// <summary>
		/// Table body declaration.
		/// </summary>
		public DeclareTableVariableBody DeclareTableVariableBody
		{
			get { return _declareTableVariableBody; }
			set { UpdateTokenInfo(value); _declareTableVariableBody = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.DeclareTableVariableBody != null)
			{
				this.DeclareTableVariableBody.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The base data type class.
	/// </summary>
	[System.Serializable]
	public abstract partial class DataTypeReference : TSqlFragment
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The user defined data type, CLR or UDT.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The data type abstract class that can have parameters.
	/// </summary>
	[System.Serializable]
	public abstract partial class ParameterizedDataTypeReference : DataTypeReference
	{


		private List<Literal> _parameters = new List<Literal>();

		/// <summary>
		/// Parameters if the schema object is a user defined function.
		/// </summary>
		public IList<Literal> Parameters
		{
			get { return _parameters; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents built-in data types
	/// </summary>
	[System.Serializable]
	public partial class SqlDataTypeReference : ParameterizedDataTypeReference
	{


		private SqlDataTypeOption _sqlDataTypeOption;

		/// <summary>
		/// The sql data type.
		/// </summary>
		public SqlDataTypeOption SqlDataTypeOption
		{
			get { return _sqlDataTypeOption; }
			set { _sqlDataTypeOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents user-defined data types
	/// </summary>
	[System.Serializable]
	public partial class UserDataTypeReference : ParameterizedDataTypeReference
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents xml data types
	/// </summary>
	[System.Serializable]
	public partial class XmlDataTypeReference : DataTypeReference
	{


		private XmlDataTypeOption _xmlDataTypeOption;

		/// <summary>
		/// The xml data type option.
		/// </summary>
		public XmlDataTypeOption XmlDataTypeOption
		{
			get { return _xmlDataTypeOption; }
			set { _xmlDataTypeOption = value; }
		}
		private SchemaObjectName _xmlSchemaCollection;

		/// <summary>
		/// The xml schema collection. Optional may be null.
		/// </summary>
		public SchemaObjectName XmlSchemaCollection
		{
			get { return _xmlSchemaCollection; }
			set { UpdateTokenInfo(value); _xmlSchemaCollection = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.XmlSchemaCollection != null)
			{
				this.XmlSchemaCollection.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The return type definition for scalar-valued functions
	/// </summary>
	[System.Serializable]
	public partial class ScalarFunctionReturnType : FunctionReturnType
	{


		private DataTypeReference _dataType;

		/// <summary>
		/// The data type of the return.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The return type definition for inline table-valued functions
	/// </summary>
	[System.Serializable]
	public partial class SelectFunctionReturnType : FunctionReturnType
	{


		private SelectStatement _selectStatement;

		/// <summary>
		/// Single select statement that defines return value, with only CTEs and XML namespaces possible
		/// </summary>
		public SelectStatement SelectStatement
		{
			get { return _selectStatement; }
			set { UpdateTokenInfo(value); _selectStatement = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SelectStatement != null)
			{
				this.SelectStatement.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class stores the common body for defining a table
	/// </summary>
	[System.Serializable]
	public partial class TableDefinition : TSqlFragment
	{


		private List<ColumnDefinition> _columnDefinitions = new List<ColumnDefinition>();

		/// <summary>
		/// Represents the column definitions, only valid if data type is table.
		/// </summary>
		public IList<ColumnDefinition> ColumnDefinitions
		{
			get { return _columnDefinitions; }
		}

		private List<ConstraintDefinition> _tableConstraints = new List<ConstraintDefinition>();

		/// <summary>
		/// The table constraints, only valid if data type is table.
		/// </summary>
		public IList<ConstraintDefinition> TableConstraints
		{
			get { return _tableConstraints; }
		}

		private List<IndexDefinition> _indexes = new List<IndexDefinition>();

		/// <summary>
		/// The index for this column.
		/// </summary>
		public IList<IndexDefinition> Indexes
		{
			get { return _indexes; }
		}

		private SystemTimePeriodDefinition _systemTimePeriod;

		/// <summary>
		/// System time period for this table.
		/// </summary>
		public SystemTimePeriodDefinition SystemTimePeriod
		{
			get { return _systemTimePeriod; }
			set { UpdateTokenInfo(value); _systemTimePeriod = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.ColumnDefinitions.Count; i < count; ++i)
			{
				this.ColumnDefinitions[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.TableConstraints.Count; i < count; ++i)
			{
				this.TableConstraints[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.Indexes.Count; i < count; ++i)
			{
				this.Indexes[i].Accept(visitor);
			}

			if (this.SystemTimePeriod != null)
			{
				this.SystemTimePeriod.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the body of the declare @variable table variation.
	/// </summary>
	[System.Serializable]
	public partial class DeclareTableVariableBody : TSqlFragment
	{


		private Identifier _variableName;

		/// <summary>
		/// The name of the variable. This includes the @ at the beginning.
		/// </summary>
		public Identifier VariableName
		{
			get { return _variableName; }
			set { UpdateTokenInfo(value); _variableName = value; }
		}
		private bool _asDefined;

		/// <summary>
		/// Shows if the optional AS was used.  Required to distinguish between Sql80 and Sql90.
		/// </summary>
		public bool AsDefined
		{
			get { return _asDefined; }
			set { _asDefined = value; }
		}
		private TableDefinition _definition;

		/// <summary>
		/// The table definition containing column and constraint definitions.
		/// </summary>
		public TableDefinition Definition
		{
			get { return _definition; }
			set { UpdateTokenInfo(value); _definition = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.VariableName != null)
			{
				this.VariableName.Accept(visitor);
			}

			if (this.Definition != null)
			{
				this.Definition.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class represents the declare @variable statement's table variation.
	/// </summary>
	[System.Serializable]
	public partial class DeclareTableVariableStatement : TSqlStatement
	{


		private DeclareTableVariableBody _body;

		/// <summary>
		/// Statement body
		/// </summary>
		public DeclareTableVariableBody Body
		{
			get { return _body; }
			set { UpdateTokenInfo(value); _body = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Body != null)
			{
				this.Body.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The table reference to a CTE or schema object.
	/// </summary>
	[System.Serializable]
	public partial class NamedTableReference : TableReferenceWithAlias
	{


		private SchemaObjectName _schemaObject;

		/// <summary>
		/// The name of the schema object.
		/// </summary>
		public SchemaObjectName SchemaObject
		{
			get { return _schemaObject; }
			set { UpdateTokenInfo(value); _schemaObject = value; }
		}
		private List<TableHint> _tableHints = new List<TableHint>();

		/// <summary>
		/// The table or view hints.
		/// </summary>
		public IList<TableHint> TableHints
		{
			get { return _tableHints; }
		}

		private TableSampleClause _tableSampleClause;

		/// <summary>
		/// The table sample clause. Optional, may be null.
		/// </summary>
		public TableSampleClause TableSampleClause
		{
			get { return _tableSampleClause; }
			set { UpdateTokenInfo(value); _tableSampleClause = value; }
		}
		private TemporalClause _temporalClause;

		/// <summary>
		/// Temporal clause for this table reference.
		/// </summary>
		public TemporalClause TemporalClause
		{
			get { return _temporalClause; }
			set { UpdateTokenInfo(value); _temporalClause = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SchemaObject != null)
			{
				this.SchemaObject.Accept(visitor);
			}

			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.TableHints.Count; i < count; ++i)
			{
				this.TableHints[i].Accept(visitor);
			}

			if (this.TableSampleClause != null)
			{
				this.TableSampleClause.Accept(visitor);
			}

			if (this.TemporalClause != null)
			{
				this.TemporalClause.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// A table reference to a table-valued function
	/// </summary>
	[System.Serializable]
	public partial class SchemaObjectFunctionTableReference : TableReferenceWithAliasAndColumns
	{


		private SchemaObjectName _schemaObject;

		/// <summary>
		/// The name of the schema object.
		/// </summary>
		public SchemaObjectName SchemaObject
		{
			get { return _schemaObject; }
			set { UpdateTokenInfo(value); _schemaObject = value; }
		}
		private List<ScalarExpression> _parameters = new List<ScalarExpression>();

		/// <summary>
		/// The parameters of the function
		/// </summary>
		public IList<ScalarExpression> Parameters
		{
			get { return _parameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SchemaObject != null)
			{
				this.SchemaObject.Accept(visitor);
			}

			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents single table hint.
	/// </summary>
	[System.Serializable]
	public partial class TableHint : TSqlFragment
	{


		private TableHintKind _hintKind;

		/// <summary>
		/// Hint kind.
		/// </summary>
		public TableHintKind HintKind
		{
			get { return _hintKind; }
			set { _hintKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents INDEX table hint.
	/// </summary>
	[System.Serializable]
	public partial class IndexTableHint : TableHint
	{


		private List<IdentifierOrValueExpression> _indexValues = new List<IdentifierOrValueExpression>();

		/// <summary>
		/// Parameters for the index hint. Possible types: Literal or Identifier.
		/// </summary>
		public IList<IdentifierOrValueExpression> IndexValues
		{
			get { return _indexValues; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.IndexValues.Count; i < count; ++i)
			{
				this.IndexValues[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents table hint with literal value.
	/// </summary>
	[System.Serializable]
	public partial class LiteralTableHint : TableHint
	{


		private Literal _value;

		/// <summary>
		/// Hint value.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// This node represents a derived table.
	/// </summary>
	[System.Serializable]
	public partial class QueryDerivedTable : TableReferenceWithAliasAndColumns
	{


		private QueryExpression _queryExpression;

		/// <summary>
		/// The subquery.
		/// </summary>
		public QueryExpression QueryExpression
		{
			get { return _queryExpression; }
			set { UpdateTokenInfo(value); _queryExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.QueryExpression != null)
			{
				this.QueryExpression.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// This node represents a derived table.
	/// </summary>
	[System.Serializable]
	public partial class InlineDerivedTable : TableReferenceWithAliasAndColumns
	{


		private List<RowValue> _rowValues = new List<RowValue>();

		/// <summary>
		/// The list of rows.
		/// </summary>
		public IList<RowValue> RowValues
		{
			get { return _rowValues; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.RowValues.Count; i < count; ++i)
			{
				this.RowValues[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the comparison predicates that have subqueries.
	/// </summary>
	[System.Serializable]
	public partial class SubqueryComparisonPredicate : BooleanExpression
	{


		private ScalarExpression _expression;

		/// <summary>
		/// The expression to compare.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}
		private BooleanComparisonType _comparisonType;

		/// <summary>
		/// The boolean comparison operator
		/// </summary>
		public BooleanComparisonType ComparisonType
		{
			get { return _comparisonType; }
			set { _comparisonType = value; }
		}
		private ScalarSubquery _subquery;

		/// <summary>
		/// The subquery.
		/// </summary>
		public ScalarSubquery Subquery
		{
			get { return _subquery; }
			set { UpdateTokenInfo(value); _subquery = value; }
		}
		private SubqueryComparisonPredicateType _subqueryComparisonPredicateType;

		/// <summary>
		/// The type of the subquery comparison.
		/// </summary>
		public SubqueryComparisonPredicateType SubqueryComparisonPredicateType
		{
			get { return _subqueryComparisonPredicateType; }
			set { _subqueryComparisonPredicateType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			if (this.Subquery != null)
			{
				this.Subquery.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the exists predicate.
	/// </summary>
	[System.Serializable]
	public partial class ExistsPredicate : BooleanExpression
	{


		private ScalarSubquery _subquery;

		/// <summary>
		/// The subquery.
		/// </summary>
		public ScalarSubquery Subquery
		{
			get { return _subquery; }
			set { UpdateTokenInfo(value); _subquery = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Subquery != null)
			{
				this.Subquery.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the like predicate.
	/// </summary>
	[System.Serializable]
	public partial class LikePredicate : BooleanExpression
	{


		private ScalarExpression _firstExpression;

		/// <summary>
		/// The match expression.
		/// </summary>
		public ScalarExpression FirstExpression
		{
			get { return _firstExpression; }
			set { UpdateTokenInfo(value); _firstExpression = value; }
		}
		private ScalarExpression _secondExpression;

		/// <summary>
		/// The like pattern.
		/// </summary>
		public ScalarExpression SecondExpression
		{
			get { return _secondExpression; }
			set { UpdateTokenInfo(value); _secondExpression = value; }
		}
		private bool _notDefined;

		/// <summary>
		/// True if not is used.
		/// </summary>
		public bool NotDefined
		{
			get { return _notDefined; }
			set { _notDefined = value; }
		}
		private bool _odbcEscape;

		/// <summary>
		/// True if escape is defined using odbc delimiters.
		/// </summary>
		public bool OdbcEscape
		{
			get { return _odbcEscape; }
			set { _odbcEscape = value; }
		}
		private ScalarExpression _escapeExpression;

		/// <summary>
		/// The escape expression. Optional may be null.
		/// </summary>
		public ScalarExpression EscapeExpression
		{
			get { return _escapeExpression; }
			set { UpdateTokenInfo(value); _escapeExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.FirstExpression != null)
			{
				this.FirstExpression.Accept(visitor);
			}

			if (this.SecondExpression != null)
			{
				this.SecondExpression.Accept(visitor);
			}

			if (this.EscapeExpression != null)
			{
				this.EscapeExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the distinct predicate.
	/// </summary>
	[System.Serializable]
	public partial class DistinctPredicate : BooleanExpression
	{


		private ScalarExpression _firstExpression;

		/// <summary>
		/// The first expression.
		/// </summary>
		public ScalarExpression FirstExpression
		{
			get { return _firstExpression; }
			set { UpdateTokenInfo(value); _firstExpression = value; }
		}
		private ScalarExpression _secondExpression;

		/// <summary>
		/// The second expression.
		/// </summary>
		public ScalarExpression SecondExpression
		{
			get { return _secondExpression; }
			set { UpdateTokenInfo(value); _secondExpression = value; }
		}
		private bool _isNot;

		/// <summary>
		/// True if expression is negated/inverted.
		/// </summary>
		public bool IsNot
		{
			get { return _isNot; }
			set { _isNot = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.FirstExpression != null)
			{
				this.FirstExpression.Accept(visitor);
			}

			if (this.SecondExpression != null)
			{
				this.SecondExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the in predicate.
	/// </summary>
	[System.Serializable]
	public partial class InPredicate : BooleanExpression
	{


		private ScalarExpression _expression;

		/// <summary>
		/// The test expression.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}
		private ScalarSubquery _subquery;

		/// <summary>
		/// Can be null if Values have elements.
		/// </summary>
		public ScalarSubquery Subquery
		{
			get { return _subquery; }
			set { UpdateTokenInfo(value); _subquery = value; }
		}
		private bool _notDefined;

		/// <summary>
		/// True if not is used.
		/// </summary>
		public bool NotDefined
		{
			get { return _notDefined; }
			set { _notDefined = value; }
		}
		private List<ScalarExpression> _values = new List<ScalarExpression>();

		/// <summary>
		/// The values in parantesis.  May have zero elements if Subquery is not null.
		/// </summary>
		public IList<ScalarExpression> Values
		{
			get { return _values; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			if (this.Subquery != null)
			{
				this.Subquery.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Values.Count; i < count; ++i)
			{
				this.Values[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the fulltext predicate.
	/// </summary>
	[System.Serializable]
	public partial class FullTextPredicate : BooleanExpression
	{


		private FullTextFunctionType _fullTextFunctionType;

		/// <summary>
		/// The fulltext function type.
		/// </summary>
		public FullTextFunctionType FullTextFunctionType
		{
			get { return _fullTextFunctionType; }
			set { _fullTextFunctionType = value; }
		}
		private List<ColumnReferenceExpression> _columns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// Represents the columns that are used in the function.
		/// </summary>
		public IList<ColumnReferenceExpression> Columns
		{
			get { return _columns; }
		}

		private ValueExpression _value;

		/// <summary>
		/// This is the value of the search condition. Only Variable and StringLiterals are valid.
		/// </summary>
		public ValueExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}
		private ValueExpression _languageTerm;

		/// <summary>
		/// This is the language term. Optional, may be null.
		/// </summary>
		public ValueExpression LanguageTerm
		{
			get { return _languageTerm; }
			set { UpdateTokenInfo(value); _languageTerm = value; }
		}
		private StringLiteral _propertyName;

		/// <summary>
		/// Property name
		/// </summary>
		public StringLiteral PropertyName
		{
			get { return _propertyName; }
			set { UpdateTokenInfo(value); _propertyName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			if (this.LanguageTerm != null)
			{
				this.LanguageTerm.Accept(visitor);
			}

			if (this.PropertyName != null)
			{
				this.PropertyName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class represents a property on a Udt.
	/// </summary>
	[System.Serializable]
	public partial class UserDefinedTypePropertyAccess : PrimaryExpression
	{


		private CallTarget _callTarget;

		/// <summary>
		/// The target of a call.
		/// </summary>
		public CallTarget CallTarget
		{
			get { return _callTarget; }
			set { UpdateTokenInfo(value); _callTarget = value; }
		}
		private Identifier _propertyName;

		/// <summary>
		/// The name of the property.
		/// </summary>
		public Identifier PropertyName
		{
			get { return _propertyName; }
			set { UpdateTokenInfo(value); _propertyName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.CallTarget != null)
			{
				this.CallTarget.Accept(visitor);
			}

			if (this.PropertyName != null)
			{
				this.PropertyName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// This class represents a statement that can begin with a common table expression or xml namespaces.
	/// </summary>
	[System.Serializable]
	public abstract partial class StatementWithCtesAndXmlNamespaces : TSqlStatement
	{


		private WithCtesAndXmlNamespaces _withCtesAndXmlNamespaces;

		/// <summary>
		/// This is the with common table expression and xml namespaces clause. Optional, may be null.
		/// </summary>
		public WithCtesAndXmlNamespaces WithCtesAndXmlNamespaces
		{
			get { return _withCtesAndXmlNamespaces; }
			set { UpdateTokenInfo(value); _withCtesAndXmlNamespaces = value; }
		}
		private List<OptimizerHint> _optimizerHints = new List<OptimizerHint>();

		/// <summary>
		/// Optional optimizer hints.
		/// </summary>
		public IList<OptimizerHint> OptimizerHints
		{
			get { return _optimizerHints; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.WithCtesAndXmlNamespaces != null)
			{
				this.WithCtesAndXmlNamespaces.Accept(visitor);
			}

			for (Int32 i = 0, count = this.OptimizerHints.Count; i < count; ++i)
			{
				this.OptimizerHints[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a SELECT statement.
	/// </summary>
	[System.Serializable]
	public partial class SelectStatement : StatementWithCtesAndXmlNamespaces
	{


		private QueryExpression _queryExpression;

		/// <summary>
		/// This is the main body of the select statement.
		/// </summary>
		public QueryExpression QueryExpression
		{
			get { return _queryExpression; }
			set { UpdateTokenInfo(value); _queryExpression = value; }
		}
		private SchemaObjectName _into;

		/// <summary>
		/// The into table name.
		/// </summary>
		public SchemaObjectName Into
		{
			get { return _into; }
			set { UpdateTokenInfo(value); _into = value; }
		}
		private Identifier _on;

		/// <summary>
		/// The on filegroup name.
		/// </summary>
		public Identifier On
		{
			get { return _on; }
			set { UpdateTokenInfo(value); _on = value; }
		}
		private List<ComputeClause> _computeClauses = new List<ComputeClause>();

		/// <summary>
		/// The compute by clauses. May have zero elements.
		/// </summary>
		public IList<ComputeClause> ComputeClauses
		{
			get { return _computeClauses; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.QueryExpression != null)
			{
				this.QueryExpression.Accept(visitor);
			}

			if (this.Into != null)
			{
				this.Into.Accept(visitor);
			}

			if (this.On != null)
			{
				this.On.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ComputeClauses.Count; i < count; ++i)
			{
				this.ComputeClauses[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for different FOR clauses in SELECT
	/// </summary>
	[System.Serializable]
	public abstract partial class ForClause : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents FOR BROWSE case
	/// </summary>
	[System.Serializable]
	public partial class BrowseForClause : ForClause
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents FOR READ ONLY case used only in DECLARE CURSOR
	/// </summary>
	[System.Serializable]
	public partial class ReadOnlyForClause : ForClause
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents FOR XML (options) case
	/// </summary>
	[System.Serializable]
	public partial class XmlForClause : ForClause
	{


		private List<XmlForClauseOption> _options = new List<XmlForClauseOption>();

		/// <summary>
		/// Actual XML for clause options. First one is always present (XML mode).
		/// </summary>
		public IList<XmlForClauseOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents FOR XML (options) case
	/// </summary>
	[System.Serializable]
	public partial class XmlForClauseOption : ForClause
	{


		private XmlForClauseOptions _optionKind;

		/// <summary>
		/// Option kind
		/// </summary>
		public XmlForClauseOptions OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private Literal _value;

		/// <summary>
		/// Optional option value (string Literal)
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents FOR JSON (options) case
	/// </summary>
	[System.Serializable]
	public partial class JsonForClause : ForClause
	{


		private List<JsonForClauseOption> _options = new List<JsonForClauseOption>();

		/// <summary>
		/// Actual JSON for clause options. First one is always present (JSON mode).
		/// </summary>
		public IList<JsonForClauseOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represent a key value Pair
	/// </summary>
	[System.Serializable]
	public partial class JsonKeyValue : ScalarExpression
	{


		private ScalarExpression _jsonKeyName;

		/// <summary>
		/// Key name
		/// </summary>
		public ScalarExpression JsonKeyName
		{
			get { return _jsonKeyName; }
			set { UpdateTokenInfo(value); _jsonKeyName = value; }
		}
		private ScalarExpression _jsonValue;

		/// <summary>
		/// scalar expression
		/// </summary>
		public ScalarExpression JsonValue
		{
			get { return _jsonValue; }
			set { UpdateTokenInfo(value); _jsonValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.JsonKeyName != null)
			{
				this.JsonKeyName.Accept(visitor);
			}

			if (this.JsonValue != null)
			{
				this.JsonValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents FOR JSON (options) case
	/// </summary>
	[System.Serializable]
	public partial class JsonForClauseOption : ForClause
	{


		private JsonForClauseOptions _optionKind;

		/// <summary>
		/// Option kind
		/// </summary>
		public JsonForClauseOptions OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private Literal _value;

		/// <summary>
		/// Optional option value (string Literal)
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents FOR UPDATE [columns] case used only in DECLARE CURSOR
	/// </summary>
	[System.Serializable]
	public partial class UpdateForClause : ForClause
	{


		private List<ColumnReferenceExpression> _columns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// Updateable columns
		/// </summary>
		public IList<ColumnReferenceExpression> Columns
		{
			get { return _columns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents single optimizer hint
	/// </summary>
	[System.Serializable]
	public partial class OptimizerHint : TSqlFragment
	{


		private OptimizerHintKind _hintKind;

		/// <summary>
		/// Hint kind
		/// </summary>
		public OptimizerHintKind HintKind
		{
			get { return _hintKind; }
			set { _hintKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents optimizer hint, which can be represented as flag with optional literal value.
	/// </summary>
	[System.Serializable]
	public partial class LiteralOptimizerHint : OptimizerHint
	{


		private Literal _value;

		/// <summary>
		/// Hint value.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents optimizer hint containing table hint.
	/// </summary>
	[System.Serializable]
	public partial class TableHintsOptimizerHint : OptimizerHint
	{


		private SchemaObjectName _objectName;

		/// <summary>
		/// Exposed object name of the object in query.
		/// </summary>
		public SchemaObjectName ObjectName
		{
			get { return _objectName; }
			set { UpdateTokenInfo(value); _objectName = value; }
		}
		private List<TableHint> _tableHints = new List<TableHint>();

		/// <summary>
		/// Optional table hints.
		/// </summary>
		public IList<TableHint> TableHints
		{
			get { return _tableHints; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.ObjectName != null)
			{
				this.ObjectName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.TableHints.Count; i < count; ++i)
			{
				this.TableHints[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents forceseek hint.
	/// </summary>
	[System.Serializable]
	public partial class ForceSeekTableHint : TableHint
	{


		private IdentifierOrValueExpression _indexValue;

		/// <summary>
		/// name or id of the index that we force seek on. Possible types: Literal or Identifier.
		/// </summary>
		public IdentifierOrValueExpression IndexValue
		{
			get { return _indexValue; }
			set { UpdateTokenInfo(value); _indexValue = value; }
		}
		private List<ColumnReferenceExpression> _columnValues = new List<ColumnReferenceExpression>();

		/// <summary>
		/// force seek columns
		/// </summary>
		public IList<ColumnReferenceExpression> ColumnValues
		{
			get { return _columnValues; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.IndexValue != null)
			{
				this.IndexValue.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ColumnValues.Count; i < count; ++i)
			{
				this.ColumnValues[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents OPTIMIZE FOR optimizer hint
	/// </summary>
	[System.Serializable]
	public partial class OptimizeForOptimizerHint : OptimizerHint
	{


		private List<VariableValuePair> _pairs = new List<VariableValuePair>();

		/// <summary>
		/// Variable-value pairs
		/// </summary>
		public IList<VariableValuePair> Pairs
		{
			get { return _pairs; }
		}

		private bool _isForUnknown;

		/// <summary>
		/// True if UNKNOWN was specified, false otherwise.
		/// </summary>
		public bool IsForUnknown
		{
			get { return _isForUnknown; }
			set { _isForUnknown = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Pairs.Count; i < count; ++i)
			{
				this.Pairs[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents optimizer hints in a USE HINT clause.
	/// </summary>
	[System.Serializable]
	public partial class UseHintList : OptimizerHint
	{


		private List<StringLiteral> _hints = new List<StringLiteral>();

		/// <summary>
		/// The list of hints, each a string literal.
		/// </summary>
		public IList<StringLiteral> Hints
		{
			get { return _hints; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Hints.Count; i < count; ++i)
			{
				this.Hints[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents single variable-value pair in OPTIMIZE FOR optimizer hint
	/// </summary>
	[System.Serializable]
	public partial class VariableValuePair : TSqlFragment
	{


		private VariableReference _variable;

		/// <summary>
		/// Variable
		/// </summary>
		public VariableReference Variable
		{
			get { return _variable; }
			set { UpdateTokenInfo(value); _variable = value; }
		}
		private ScalarExpression _value;

		/// <summary>
		/// Value
		/// </summary>
		public ScalarExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}
		private bool _isForUnknown;

		/// <summary>
		/// True if UNKNOWN was specified, false otherwise.
		/// </summary>
		public bool IsForUnknown
		{
			get { return _isForUnknown; }
			set { _isForUnknown = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Variable != null)
			{
				this.Variable.Accept(visitor);
			}

			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Abstract class for case expression when clauses
	/// </summary>
	[System.Serializable]
	public abstract partial class WhenClause : TSqlFragment
	{


		private ScalarExpression _thenExpression;

		/// <summary>
		/// The expression that comes after then.
		/// </summary>
		public ScalarExpression ThenExpression
		{
			get { return _thenExpression; }
			set { UpdateTokenInfo(value); _thenExpression = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ThenExpression != null)
			{
				this.ThenExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the when clause that is used in a simple case expression.
	/// </summary>
	[System.Serializable]
	public partial class SimpleWhenClause : WhenClause
	{


		private ScalarExpression _whenExpression;

		/// <summary>
		/// The scalar expression that comes after when
		/// </summary>
		public ScalarExpression WhenExpression
		{
			get { return _whenExpression; }
			set { UpdateTokenInfo(value); _whenExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.WhenExpression != null)
			{
				this.WhenExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the when clause that is used in a searched case expression.
	/// </summary>
	[System.Serializable]
	public partial class SearchedWhenClause : WhenClause
	{


		private BooleanExpression _whenExpression;

		/// <summary>
		/// The boolean expression that comes after when
		/// </summary>
		public BooleanExpression WhenExpression
		{
			get { return _whenExpression; }
			set { UpdateTokenInfo(value); _whenExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.WhenExpression != null)
			{
				this.WhenExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the case expression.
	/// </summary>
	[System.Serializable]
	public abstract partial class CaseExpression : PrimaryExpression
	{


		private ScalarExpression _elseExpression;

		/// <summary>
		/// The expression that comes after else, optional may be null.
		/// </summary>
		public ScalarExpression ElseExpression
		{
			get { return _elseExpression; }
			set { UpdateTokenInfo(value); _elseExpression = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.ElseExpression != null)
			{
				this.ElseExpression.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a simple case expression.
	/// </summary>
	[System.Serializable]
	public partial class SimpleCaseExpression : CaseExpression
	{


		private ScalarExpression _inputExpression;

		/// <summary>
		/// The input expression.
		/// </summary>
		public ScalarExpression InputExpression
		{
			get { return _inputExpression; }
			set { UpdateTokenInfo(value); _inputExpression = value; }
		}
		private List<SimpleWhenClause> _whenClauses = new List<SimpleWhenClause>();

		/// <summary>
		/// The when clauses, at least one element is required.
		/// </summary>
		public IList<SimpleWhenClause> WhenClauses
		{
			get { return _whenClauses; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.InputExpression != null)
			{
				this.InputExpression.Accept(visitor);
			}

			for (Int32 i = 0, count = this.WhenClauses.Count; i < count; ++i)
			{
				this.WhenClauses[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a searched case expression.
	/// </summary>
	[System.Serializable]
	public partial class SearchedCaseExpression : CaseExpression
	{


		private List<SearchedWhenClause> _whenClauses = new List<SearchedWhenClause>();

		/// <summary>
		/// The when clauses, at least one element is required.
		/// </summary>
		public IList<SearchedWhenClause> WhenClauses
		{
			get { return _whenClauses; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.WhenClauses.Count; i < count; ++i)
			{
				this.WhenClauses[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the nullif expression.
	/// </summary>
	[System.Serializable]
	public partial class NullIfExpression : PrimaryExpression
	{


		private ScalarExpression _firstExpression;

		/// <summary>
		/// The first expression.
		/// </summary>
		public ScalarExpression FirstExpression
		{
			get { return _firstExpression; }
			set { UpdateTokenInfo(value); _firstExpression = value; }
		}
		private ScalarExpression _secondExpression;

		/// <summary>
		/// The second expression.
		/// </summary>
		public ScalarExpression SecondExpression
		{
			get { return _secondExpression; }
			set { UpdateTokenInfo(value); _secondExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FirstExpression != null)
			{
				this.FirstExpression.Accept(visitor);
			}

			if (this.SecondExpression != null)
			{
				this.SecondExpression.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the coalesce expression.
	/// </summary>
	[System.Serializable]
	public partial class CoalesceExpression : PrimaryExpression
	{


		private List<ScalarExpression> _expressions = new List<ScalarExpression>();

		/// <summary>
		/// The list of expressions, must have at least two elements.
		/// </summary>
		public IList<ScalarExpression> Expressions
		{
			get { return _expressions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Expressions.Count; i < count; ++i)
			{
				this.Expressions[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the iif expression.
	/// </summary>
	[System.Serializable]
	public partial class IIfCall : PrimaryExpression
	{


		private BooleanExpression _predicate;

		/// <summary>
		/// The expression that is the predicate for the iif function.  This should be a boolean expression.
		/// </summary>
		public BooleanExpression Predicate
		{
			get { return _predicate; }
			set { UpdateTokenInfo(value); _predicate = value; }
		}
		private ScalarExpression _thenExpression;

		/// <summary>
		/// Then expression.
		/// </summary>
		public ScalarExpression ThenExpression
		{
			get { return _thenExpression; }
			set { UpdateTokenInfo(value); _thenExpression = value; }
		}
		private ScalarExpression _elseExpression;

		/// <summary>
		/// Else expression.
		/// </summary>
		public ScalarExpression ElseExpression
		{
			get { return _elseExpression; }
			set { UpdateTokenInfo(value); _elseExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Predicate != null)
			{
				this.Predicate.Accept(visitor);
			}

			if (this.ThenExpression != null)
			{
				this.ThenExpression.Accept(visitor);
			}

			if (this.ElseExpression != null)
			{
				this.ElseExpression.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents FREETEXTTABLE and CONTAINSTABLE table references.
	/// </summary>
	[System.Serializable]
	public partial class FullTextTableReference : TableReferenceWithAlias
	{


		private FullTextFunctionType _fullTextFunctionType;

		/// <summary>
		/// The fulltext function type.
		/// </summary>
		public FullTextFunctionType FullTextFunctionType
		{
			get { return _fullTextFunctionType; }
			set { _fullTextFunctionType = value; }
		}
		private SchemaObjectName _tableName;

		/// <summary>
		/// Table name.
		/// </summary>
		public SchemaObjectName TableName
		{
			get { return _tableName; }
			set { UpdateTokenInfo(value); _tableName = value; }
		}
		private List<ColumnReferenceExpression> _columns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// The columns to search.
		/// </summary>
		public IList<ColumnReferenceExpression> Columns
		{
			get { return _columns; }
		}

		private ValueExpression _searchCondition;

		/// <summary>
		/// Search condition/text to search.
		/// </summary>
		public ValueExpression SearchCondition
		{
			get { return _searchCondition; }
			set { UpdateTokenInfo(value); _searchCondition = value; }
		}
		private ValueExpression _topN;

		/// <summary>
		/// Optional number of top ranked results to return.
		/// </summary>
		public ValueExpression TopN
		{
			get { return _topN; }
			set { UpdateTokenInfo(value); _topN = value; }
		}
		private ValueExpression _language;

		/// <summary>
		/// Optional language whose resources will be used for wordbreaking, stemming, and thesaurus and noise-word removal.
		/// </summary>
		public ValueExpression Language
		{
			get { return _language; }
			set { UpdateTokenInfo(value); _language = value; }
		}
		private StringLiteral _propertyName;

		/// <summary>
		/// Optional property specification value.
		/// </summary>
		public StringLiteral PropertyName
		{
			get { return _propertyName; }
			set { UpdateTokenInfo(value); _propertyName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.TableName != null)
			{
				this.TableName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			if (this.SearchCondition != null)
			{
				this.SearchCondition.Accept(visitor);
			}

			if (this.TopN != null)
			{
				this.TopN.Accept(visitor);
			}

			if (this.Language != null)
			{
				this.Language.Accept(visitor);
			}

			if (this.PropertyName != null)
			{
				this.PropertyName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents SEMANTICKEYPHRASETABLE, SEMANTICSIMILARITYTABLE and SEMANTICSIMILARITYDETAILSTABLE table references.
	/// </summary>
	[System.Serializable]
	public partial class SemanticTableReference : TableReferenceWithAlias
	{


		private SemanticFunctionType _semanticFunctionType;

		/// <summary>
		/// The semantic function type.
		/// </summary>
		public SemanticFunctionType SemanticFunctionType
		{
			get { return _semanticFunctionType; }
			set { _semanticFunctionType = value; }
		}
		private SchemaObjectName _tableName;

		/// <summary>
		/// Table name.
		/// </summary>
		public SchemaObjectName TableName
		{
			get { return _tableName; }
			set { UpdateTokenInfo(value); _tableName = value; }
		}
		private List<ColumnReferenceExpression> _columns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// The columns to search.
		/// </summary>
		public IList<ColumnReferenceExpression> Columns
		{
			get { return _columns; }
		}

		private ScalarExpression _sourceKey;

		/// <summary>
		/// The source key argument.
		/// </summary>
		public ScalarExpression SourceKey
		{
			get { return _sourceKey; }
			set { UpdateTokenInfo(value); _sourceKey = value; }
		}
		private ColumnReferenceExpression _matchedColumn;

		/// <summary>
		/// The matched column argument for SEMANTICSIMILARITYDETAILSTABLE.
		/// </summary>
		public ColumnReferenceExpression MatchedColumn
		{
			get { return _matchedColumn; }
			set { UpdateTokenInfo(value); _matchedColumn = value; }
		}
		private ScalarExpression _matchedKey;

		/// <summary>
		/// The matched key argument for SEMANTICSIMILARITYDETAILSTABLE.
		/// </summary>
		public ScalarExpression MatchedKey
		{
			get { return _matchedKey; }
			set { UpdateTokenInfo(value); _matchedKey = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.TableName != null)
			{
				this.TableName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			if (this.SourceKey != null)
			{
				this.SourceKey.Accept(visitor);
			}

			if (this.MatchedColumn != null)
			{
				this.MatchedColumn.Accept(visitor);
			}

			if (this.MatchedKey != null)
			{
				this.MatchedKey.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents OPENXML table reference
	/// </summary>
	[System.Serializable]
	public partial class OpenXmlTableReference : TableReferenceWithAlias
	{


		private VariableReference _variable;

		/// <summary>
		/// XML document handle
		/// </summary>
		public VariableReference Variable
		{
			get { return _variable; }
			set { UpdateTokenInfo(value); _variable = value; }
		}
		private ValueExpression _rowPattern;

		/// <summary>
		/// Pattern to identify the nodes
		/// </summary>
		public ValueExpression RowPattern
		{
			get { return _rowPattern; }
			set { UpdateTokenInfo(value); _rowPattern = value; }
		}
		private ValueExpression _flags;

		/// <summary>
		/// Mapping flags
		/// </summary>
		public ValueExpression Flags
		{
			get { return _flags; }
			set { UpdateTokenInfo(value); _flags = value; }
		}
		private List<SchemaDeclarationItem> _schemaDeclarationItems = new List<SchemaDeclarationItem>();

		/// <summary>
		/// 
		/// Rowset format - using schema declaration.
		/// Should be empty if TableName is not null.
		/// 
		/// </summary>
		public IList<SchemaDeclarationItem> SchemaDeclarationItems
		{
			get { return _schemaDeclarationItems; }
		}

		private SchemaObjectName _tableName;

		/// <summary>
		/// 
		/// Rowset format - existing table.
		/// Should be null if SchemaDeclarationItems is not empty.
		/// 
		/// </summary>
		public SchemaObjectName TableName
		{
			get { return _tableName; }
			set { UpdateTokenInfo(value); _tableName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Variable != null)
			{
				this.Variable.Accept(visitor);
			}

			if (this.RowPattern != null)
			{
				this.RowPattern.Accept(visitor);
			}

			if (this.Flags != null)
			{
				this.Flags.Accept(visitor);
			}

			for (Int32 i = 0, count = this.SchemaDeclarationItems.Count; i < count; ++i)
			{
				this.SchemaDeclarationItems[i].Accept(visitor);
			}

			if (this.TableName != null)
			{
				this.TableName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents OPENJSON table reference
	/// </summary>
	[System.Serializable]
	public partial class OpenJsonTableReference : TableReferenceWithAlias
	{


		private ScalarExpression _variable;

		/// <summary>
		/// JSON document
		/// </summary>
		public ScalarExpression Variable
		{
			get { return _variable; }
			set { UpdateTokenInfo(value); _variable = value; }
		}
		private ScalarExpression _rowPattern;

		/// <summary>
		/// Pattern that represents JSON path.
		/// </summary>
		public ScalarExpression RowPattern
		{
			get { return _rowPattern; }
			set { UpdateTokenInfo(value); _rowPattern = value; }
		}
		private List<SchemaDeclarationItemOpenjson> _schemaDeclarationItems = new List<SchemaDeclarationItemOpenjson>();

		/// <summary>
		/// 
		/// Rowset format - using schema declaration for Openjson.
		/// 
		/// </summary>
		public IList<SchemaDeclarationItemOpenjson> SchemaDeclarationItems
		{
			get { return _schemaDeclarationItems; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Variable != null)
			{
				this.Variable.Accept(visitor);
			}

			if (this.RowPattern != null)
			{
				this.RowPattern.Accept(visitor);
			}

			for (Int32 i = 0, count = this.SchemaDeclarationItems.Count; i < count; ++i)
			{
				this.SchemaDeclarationItems[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents OPENROWSET table reference.
	/// </summary>
	[System.Serializable]
	public partial class OpenRowsetTableReference : TableReferenceWithAliasAndColumns
	{


		private StringLiteral _providerName;

		/// <summary>
		/// Provider name
		/// </summary>
		public StringLiteral ProviderName
		{
			get { return _providerName; }
			set { UpdateTokenInfo(value); _providerName = value; }
		}
		private StringLiteral _dataSource;

		/// <summary>
		/// Data source name
		/// </summary>
		public StringLiteral DataSource
		{
			get { return _dataSource; }
			set { UpdateTokenInfo(value); _dataSource = value; }
		}
		private StringLiteral _userId;

		/// <summary>
		/// The user id
		/// </summary>
		public StringLiteral UserId
		{
			get { return _userId; }
			set { UpdateTokenInfo(value); _userId = value; }
		}
		private StringLiteral _password;

		/// <summary>
		/// The password
		/// </summary>
		public StringLiteral Password
		{
			get { return _password; }
			set { UpdateTokenInfo(value); _password = value; }
		}
		private StringLiteral _providerString;

		/// <summary>
		/// The provider string
		/// </summary>
		public StringLiteral ProviderString
		{
			get { return _providerString; }
			set { UpdateTokenInfo(value); _providerString = value; }
		}
		private StringLiteral _query;

		/// <summary>
		/// The query text
		/// </summary>
		public StringLiteral Query
		{
			get { return _query; }
			set { UpdateTokenInfo(value); _query = value; }
		}
		private SchemaObjectName _object;

		/// <summary>
		/// Object to manipulate (with optional catalog and schema names).
		/// </summary>
		public SchemaObjectName Object
		{
			get { return _object; }
			set { UpdateTokenInfo(value); _object = value; }
		}
		private List<OpenRowsetColumnDefinition> _withColumns = new List<OpenRowsetColumnDefinition>();

		/// <summary>
		/// Represent the columns that a user would like to read from files. It is Provided with the WITH clause.
		/// </summary>
		public IList<OpenRowsetColumnDefinition> WithColumns
		{
			get { return _withColumns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.ProviderName != null)
			{
				this.ProviderName.Accept(visitor);
			}

			if (this.DataSource != null)
			{
				this.DataSource.Accept(visitor);
			}

			if (this.UserId != null)
			{
				this.UserId.Accept(visitor);
			}

			if (this.Password != null)
			{
				this.Password.Accept(visitor);
			}

			if (this.ProviderString != null)
			{
				this.ProviderString.Accept(visitor);
			}

			if (this.Query != null)
			{
				this.Query.Accept(visitor);
			}

			if (this.Object != null)
			{
				this.Object.Accept(visitor);
			}

			for (Int32 i = 0, count = this.WithColumns.Count; i < count; ++i)
			{
				this.WithColumns[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents OPENROWSET table reference - undocumented case.
	/// </summary>
	[System.Serializable]
	public partial class InternalOpenRowset : TableReferenceWithAlias
	{


		private Identifier _identifier;

		/// <summary>
		/// First param in parenthesis
		/// </summary>
		public Identifier Identifier
		{
			get { return _identifier; }
			set { UpdateTokenInfo(value); _identifier = value; }
		}
		private List<ScalarExpression> _varArgs = new List<ScalarExpression>();

		/// <summary>
		/// The rest of params (can be empty).
		/// </summary>
		public IList<ScalarExpression> VarArgs
		{
			get { return _varArgs; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Identifier != null)
			{
				this.Identifier.Accept(visitor);
			}

			for (Int32 i = 0, count = this.VarArgs.Count; i < count; ++i)
			{
				this.VarArgs[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents OPENROWSET (PROVIDER = 'CosmosDB' ...) table reference.
	/// </summary>
	[System.Serializable]
	public partial class OpenRowsetCosmos : TableReferenceWithAliasAndColumns
	{


		private List<OpenRowsetCosmosOption> _options = new List<OpenRowsetCosmosOption>();

		/// <summary>
		/// Collection of options for OPENROWSET for CosmosDB.
		/// </summary>
		public IList<OpenRowsetCosmosOption> Options
		{
			get { return _options; }
		}

		private List<OpenRowsetColumnDefinition> _withColumns = new List<OpenRowsetColumnDefinition>();

		/// <summary>
		/// Represent the columns that a user would like to read from CosmosDB database. It is Provided with the WITH clause.
		/// </summary>
		public IList<OpenRowsetColumnDefinition> WithColumns
		{
			get { return _withColumns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.WithColumns.Count; i < count; ++i)
			{
				this.WithColumns[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents OPENROWSET (BULK ...) table reference.
	/// </summary>
	[System.Serializable]
	public partial class BulkOpenRowset : TableReferenceWithAliasAndColumns
	{


		private List<StringLiteral> _dataFiles = new List<StringLiteral>();

		/// <summary>
		/// Data files.
		/// </summary>
		public IList<StringLiteral> DataFiles
		{
			get { return _dataFiles; }
		}

		private List<BulkInsertOption> _options = new List<BulkInsertOption>();

		/// <summary>
		/// Collection of bulk insert options.
		/// </summary>
		public IList<BulkInsertOption> Options
		{
			get { return _options; }
		}

		private List<OpenRowsetColumnDefinition> _withColumns = new List<OpenRowsetColumnDefinition>();

		/// <summary>
		/// Represent the columns that a user would like to read from files. It is Provided with the WITH clause.
		/// </summary>
		public IList<OpenRowsetColumnDefinition> WithColumns
		{
			get { return _withColumns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.DataFiles.Count; i < count; ++i)
			{
				this.DataFiles[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.WithColumns.Count; i < count; ++i)
			{
				this.WithColumns[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represent the column that a user would like to read from a file.
	/// </summary>
	[System.Serializable]
	public partial class OpenRowsetColumnDefinition : ColumnDefinitionBase
	{


		private IntegerLiteral _columnOrdinal;

		/// <summary>
		/// Ordinal number of the column in the source file(s).
		/// </summary>
		public IntegerLiteral ColumnOrdinal
		{
			get { return _columnOrdinal; }
			set { UpdateTokenInfo(value); _columnOrdinal = value; }
		}
		private StringLiteral _jsonPath;

		/// <summary>
		/// JSON path expression to column or nested property.
		/// </summary>
		public StringLiteral JsonPath
		{
			get { return _jsonPath; }
			set { UpdateTokenInfo(value); _jsonPath = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.ColumnOrdinal != null)
			{
				this.ColumnOrdinal.Accept(visitor);
			}

			if (this.JsonPath != null)
			{
				this.JsonPath.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents OPENQUERY table reference.
	/// </summary>
	[System.Serializable]
	public partial class OpenQueryTableReference : TableReferenceWithAlias
	{


		private Identifier _linkedServer;

		/// <summary>
		/// Name of the linked server.
		/// </summary>
		public Identifier LinkedServer
		{
			get { return _linkedServer; }
			set { UpdateTokenInfo(value); _linkedServer = value; }
		}
		private StringLiteral _query;

		/// <summary>
		/// Query to execute on linked server.
		/// </summary>
		public StringLiteral Query
		{
			get { return _query; }
			set { UpdateTokenInfo(value); _query = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.LinkedServer != null)
			{
				this.LinkedServer.Accept(visitor);
			}

			if (this.Query != null)
			{
				this.Query.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// OPENDATASOURCE (ad-hoc) table reference.
	/// </summary>
	[System.Serializable]
	public partial class AdHocTableReference : TableReferenceWithAlias
	{


		private AdHocDataSource _dataSource;

		/// <summary>
		/// Ad hoc connection information.
		/// </summary>
		public AdHocDataSource DataSource
		{
			get { return _dataSource; }
			set { UpdateTokenInfo(value); _dataSource = value; }
		}
		private SchemaObjectNameOrValueExpression _object;

		/// <summary>
		/// Object - can be either SchemaObjectName or Literal (string).
		/// </summary>
		public SchemaObjectNameOrValueExpression Object
		{
			get { return _object; }
			set { UpdateTokenInfo(value); _object = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.DataSource != null)
			{
				this.DataSource.Accept(visitor);
			}

			if (this.Object != null)
			{
				this.Object.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents information about one column in schema declaration.
	/// </summary>
	[System.Serializable]
	public partial class SchemaDeclarationItem : TSqlFragment
	{


		private ColumnDefinitionBase _columnDefinition;

		/// <summary>
		/// Information about column.
		/// </summary>
		public ColumnDefinitionBase ColumnDefinition
		{
			get { return _columnDefinition; }
			set { UpdateTokenInfo(value); _columnDefinition = value; }
		}
		private ValueExpression _mapping;

		/// <summary>
		/// Optional mapping/metaproperty information.
		/// </summary>
		public ValueExpression Mapping
		{
			get { return _mapping; }
			set { UpdateTokenInfo(value); _mapping = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ColumnDefinition != null)
			{
				this.ColumnDefinition.Accept(visitor);
			}

			if (this.Mapping != null)
			{
				this.Mapping.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents information about one result column in Openjson.
	/// </summary>
	[System.Serializable]
	public partial class SchemaDeclarationItemOpenjson : SchemaDeclarationItem
	{


		private bool _asJson;

		/// <summary>
		/// Optional as json option.
		/// </summary>
		public bool AsJson
		{
			get { return _asJson; }
			set { _asJson = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the convert call.
	/// </summary>
	[System.Serializable]
	public partial class ConvertCall : PrimaryExpression
	{


		private DataTypeReference _dataType;

		/// <summary>
		/// The datatype the expression will be converted.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}
		private ScalarExpression _parameter;

		/// <summary>
		/// The parameter that will be converted.
		/// </summary>
		public ScalarExpression Parameter
		{
			get { return _parameter; }
			set { UpdateTokenInfo(value); _parameter = value; }
		}
		private ScalarExpression _style;

		/// <summary>
		/// The style of the date format. Optional may be null.
		/// </summary>
		public ScalarExpression Style
		{
			get { return _style; }
			set { UpdateTokenInfo(value); _style = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			if (this.Parameter != null)
			{
				this.Parameter.Accept(visitor);
			}

			if (this.Style != null)
			{
				this.Style.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the try_convert function call.
	/// </summary>
	[System.Serializable]
	public partial class TryConvertCall : PrimaryExpression
	{


		private DataTypeReference _dataType;

		/// <summary>
		/// The datatype the expression will be converted.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}
		private ScalarExpression _parameter;

		/// <summary>
		/// The parameter that will be converted.
		/// </summary>
		public ScalarExpression Parameter
		{
			get { return _parameter; }
			set { UpdateTokenInfo(value); _parameter = value; }
		}
		private ScalarExpression _style;

		/// <summary>
		/// The style of the date format. Optional may be null.
		/// </summary>
		public ScalarExpression Style
		{
			get { return _style; }
			set { UpdateTokenInfo(value); _style = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			if (this.Parameter != null)
			{
				this.Parameter.Accept(visitor);
			}

			if (this.Style != null)
			{
				this.Style.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the parse function call.
	/// </summary>
	[System.Serializable]
	public partial class ParseCall : PrimaryExpression
	{


		private ScalarExpression _stringValue;

		/// <summary>
		/// The expression that will be parsed.
		/// </summary>
		public ScalarExpression StringValue
		{
			get { return _stringValue; }
			set { UpdateTokenInfo(value); _stringValue = value; }
		}
		private DataTypeReference _dataType;

		/// <summary>
		/// The resulting datatype of the parsed expression.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}
		private ScalarExpression _culture;

		/// <summary>
		/// The culture that will be used for parsing. Optional may be null.
		/// </summary>
		public ScalarExpression Culture
		{
			get { return _culture; }
			set { UpdateTokenInfo(value); _culture = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.StringValue != null)
			{
				this.StringValue.Accept(visitor);
			}

			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			if (this.Culture != null)
			{
				this.Culture.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the try_parse function call.
	/// </summary>
	[System.Serializable]
	public partial class TryParseCall : PrimaryExpression
	{


		private ScalarExpression _stringValue;

		/// <summary>
		/// The expression that will be parsed.
		/// </summary>
		public ScalarExpression StringValue
		{
			get { return _stringValue; }
			set { UpdateTokenInfo(value); _stringValue = value; }
		}
		private DataTypeReference _dataType;

		/// <summary>
		/// The resulting datatype of the parsed expression.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}
		private ScalarExpression _culture;

		/// <summary>
		/// The culture that will be used for parsing. Optional may be null.
		/// </summary>
		public ScalarExpression Culture
		{
			get { return _culture; }
			set { UpdateTokenInfo(value); _culture = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.StringValue != null)
			{
				this.StringValue.Accept(visitor);
			}

			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			if (this.Culture != null)
			{
				this.Culture.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the cast call.
	/// </summary>
	[System.Serializable]
	public partial class CastCall : PrimaryExpression
	{


		private DataTypeReference _dataType;

		/// <summary>
		/// The datatype the expression will be casted.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}
		private ScalarExpression _parameter;

		/// <summary>
		/// The parameter that will be casted.
		/// </summary>
		public ScalarExpression Parameter
		{
			get { return _parameter; }
			set { UpdateTokenInfo(value); _parameter = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			if (this.Parameter != null)
			{
				this.Parameter.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the try_cast call.
	/// </summary>
	[System.Serializable]
	public partial class TryCastCall : PrimaryExpression
	{


		private DataTypeReference _dataType;

		/// <summary>
		/// The datatype the expression will be casted.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}
		private ScalarExpression _parameter;

		/// <summary>
		/// The parameter that will be casted.
		/// </summary>
		public ScalarExpression Parameter
		{
			get { return _parameter; }
			set { UpdateTokenInfo(value); _parameter = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			if (this.Parameter != null)
			{
				this.Parameter.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the AT TIME ZONE call.
	/// </summary>
	[System.Serializable]
	public partial class AtTimeZoneCall : PrimaryExpression
	{


		private ScalarExpression _dateValue;

		/// <summary>
		/// The date/time value to be converted.
		/// </summary>
		public ScalarExpression DateValue
		{
			get { return _dateValue; }
			set { UpdateTokenInfo(value); _dateValue = value; }
		}
		private ScalarExpression _timeZone;

		/// <summary>
		/// The time zone identifier that will be used.
		/// </summary>
		public ScalarExpression TimeZone
		{
			get { return _timeZone; }
			set { UpdateTokenInfo(value); _timeZone = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.DateValue != null)
			{
				this.DateValue.Accept(visitor);
			}

			if (this.TimeZone != null)
			{
				this.TimeZone.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a function call.
	/// </summary>
	[System.Serializable]
	public partial class FunctionCall : PrimaryExpression
	{


		private CallTarget _callTarget;

		/// <summary>
		/// Optional function call target.
		/// </summary>
		public CallTarget CallTarget
		{
			get { return _callTarget; }
			set { UpdateTokenInfo(value); _callTarget = value; }
		}
		private Identifier _functionName;

		/// <summary>
		/// Name of the function being called.
		/// </summary>
		public Identifier FunctionName
		{
			get { return _functionName; }
			set { UpdateTokenInfo(value); _functionName = value; }
		}
		private List<ScalarExpression> _parameters = new List<ScalarExpression>();

		/// <summary>
		/// The parameters to the function.
		/// </summary>
		public IList<ScalarExpression> Parameters
		{
			get { return _parameters; }
		}

		private UniqueRowFilter _uniqueRowFilter;

		/// <summary>
		/// An enum that can be NotSpecified, All or Distinct.
		/// </summary>
		public UniqueRowFilter UniqueRowFilter
		{
			get { return _uniqueRowFilter; }
			set { _uniqueRowFilter = value; }
		}
		private OverClause _overClause;

		/// <summary>
		/// The over clause. Optional may be null.
		/// </summary>
		public OverClause OverClause
		{
			get { return _overClause; }
			set { UpdateTokenInfo(value); _overClause = value; }
		}
		private WithinGroupClause _withinGroupClause;

		/// <summary>
		/// The within group clause used for ordered aggregates. Optional may be null.
		/// </summary>
		public WithinGroupClause WithinGroupClause
		{
			get { return _withinGroupClause; }
			set { UpdateTokenInfo(value); _withinGroupClause = value; }
		}
		private List<Identifier> _ignoreRespectNulls = new List<Identifier>();

		/// <summary>
		/// The ignore nulls is used to eliminate rows with null value in the output. Optional may be null.
		/// </summary>
		public IList<Identifier> IgnoreRespectNulls
		{
			get { return _ignoreRespectNulls; }
		}

		private Identifier _trimOptions;

		/// <summary>
		/// TRIM intrinsic can take optional arguments like 'Leading', 'Trailing' or 'Both'.
		/// </summary>
		public Identifier TrimOptions
		{
			get { return _trimOptions; }
			set { UpdateTokenInfo(value); _trimOptions = value; }
		}
		private List<JsonKeyValue> _jsonParameters = new List<JsonKeyValue>();

		/// <summary>
		/// The Json parameters to the function.
		/// </summary>
		public IList<JsonKeyValue> JsonParameters
		{
			get { return _jsonParameters; }
		}

		private List<Identifier> _absentOrNullOnNull = new List<Identifier>();

		/// <summary>
		/// The Absent or Null on Null will convert or remove sql null to json null
		/// </summary>
		public IList<Identifier> AbsentOrNullOnNull
		{
			get { return _absentOrNullOnNull; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.CallTarget != null)
			{
				this.CallTarget.Accept(visitor);
			}

			if (this.FunctionName != null)
			{
				this.FunctionName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

			if (this.OverClause != null)
			{
				this.OverClause.Accept(visitor);
			}

			if (this.WithinGroupClause != null)
			{
				this.WithinGroupClause.Accept(visitor);
			}

			for (Int32 i = 0, count = this.IgnoreRespectNulls.Count; i < count; ++i)
			{
				this.IgnoreRespectNulls[i].Accept(visitor);
			}

			if (this.TrimOptions != null)
			{
				this.TrimOptions.Accept(visitor);
			}

			for (Int32 i = 0, count = this.JsonParameters.Count; i < count; ++i)
			{
				this.JsonParameters[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.AbsentOrNullOnNull.Count; i < count; ++i)
			{
				this.AbsentOrNullOnNull[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a target of a function call.
	/// </summary>
	[System.Serializable]
	public abstract partial class CallTarget : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an expression target of a function call.
	/// </summary>
	[System.Serializable]
	public partial class ExpressionCallTarget : CallTarget
	{


		private ScalarExpression _expression;

		/// <summary>
		/// Expression itself.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents target of a call which is a column or CLR property on a column.
	/// </summary>
	[System.Serializable]
	public partial class MultiPartIdentifierCallTarget : CallTarget
	{


		private MultiPartIdentifier _multiPartIdentifier;

		/// <summary>
		/// The column/property names.
		/// </summary>
		public MultiPartIdentifier MultiPartIdentifier
		{
			get { return _multiPartIdentifier; }
			set { UpdateTokenInfo(value); _multiPartIdentifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.MultiPartIdentifier != null)
			{
				this.MultiPartIdentifier.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents target of a call which is a column or CLR property on a column.
	/// </summary>
	[System.Serializable]
	public partial class UserDefinedTypeCallTarget : CallTarget
	{


		private SchemaObjectName _schemaObjectName;

		/// <summary>
		/// The name of the user-defined type.
		/// </summary>
		public SchemaObjectName SchemaObjectName
		{
			get { return _schemaObjectName; }
			set { UpdateTokenInfo(value); _schemaObjectName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SchemaObjectName != null)
			{
				this.SchemaObjectName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents LEFT call.
	/// </summary>
	[System.Serializable]
	public partial class LeftFunctionCall : PrimaryExpression
	{


		private List<ScalarExpression> _parameters = new List<ScalarExpression>();

		/// <summary>
		/// The parameters to the function.
		/// </summary>
		public IList<ScalarExpression> Parameters
		{
			get { return _parameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents RIGHT call.
	/// </summary>
	[System.Serializable]
	public partial class RightFunctionCall : PrimaryExpression
	{


		private List<ScalarExpression> _parameters = new List<ScalarExpression>();

		/// <summary>
		/// The parameters to the function.
		/// </summary>
		public IList<ScalarExpression> Parameters
		{
			get { return _parameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the partition function call.
	/// </summary>
	[System.Serializable]
	public partial class PartitionFunctionCall : PrimaryExpression
	{


		private Identifier _databaseName;

		/// <summary>
		/// The database name. Optional, may be null.
		/// </summary>
		public Identifier DatabaseName
		{
			get { return _databaseName; }
			set { UpdateTokenInfo(value); _databaseName = value; }
		}
		private Identifier _functionName;

		/// <summary>
		/// The function name.
		/// </summary>
		public Identifier FunctionName
		{
			get { return _functionName; }
			set { UpdateTokenInfo(value); _functionName = value; }
		}
		private List<ScalarExpression> _parameters = new List<ScalarExpression>();

		/// <summary>
		/// The parameters to the function.
		/// </summary>
		public IList<ScalarExpression> Parameters
		{
			get { return _parameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.DatabaseName != null)
			{
				this.DatabaseName.Accept(visitor);
			}

			if (this.FunctionName != null)
			{
				this.FunctionName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the over clause.
	/// </summary>
	[System.Serializable]
	public partial class OverClause : TSqlFragment
	{


		private Identifier _windowName;

		/// <summary>
		/// The window name. Optional, may be null.
		/// </summary>
		public Identifier WindowName
		{
			get { return _windowName; }
			set { UpdateTokenInfo(value); _windowName = value; }
		}
		private List<ScalarExpression> _partitions = new List<ScalarExpression>();

		/// <summary>
		/// The partitions. Optional, may have zero elements.
		/// </summary>
		public IList<ScalarExpression> Partitions
		{
			get { return _partitions; }
		}

		private OrderByClause _orderByClause;

		/// <summary>
		/// The order by clause. Optional may be null.
		/// </summary>
		public OrderByClause OrderByClause
		{
			get { return _orderByClause; }
			set { UpdateTokenInfo(value); _orderByClause = value; }
		}
		private  WindowFrameClause _windowFrameClause;

		/// <summary>
		/// Window bounds specification, for windowing aggregates. Optional may be null.
		/// </summary>
		public  WindowFrameClause WindowFrameClause
		{
			get { return _windowFrameClause; }
			set { UpdateTokenInfo(value); _windowFrameClause = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.WindowName != null)
			{
				this.WindowName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Partitions.Count; i < count; ++i)
			{
				this.Partitions[i].Accept(visitor);
			}

			if (this.OrderByClause != null)
			{
				this.OrderByClause.Accept(visitor);
			}

			if (this.WindowFrameClause != null)
			{
				this.WindowFrameClause.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the window clause.
	/// </summary>
	[System.Serializable]
	public partial class WindowClause : TSqlFragment
	{


		private List< WindowDefinition> _windowDefinition = new List< WindowDefinition>();

		/// <summary>
		/// Definition of a named window. Cannot be null.
		/// </summary>
		public IList< WindowDefinition> WindowDefinition
		{
			get { return _windowDefinition; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.WindowDefinition.Count; i < count; ++i)
			{
				this.WindowDefinition[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Definition of a named window.
	/// </summary>
	[System.Serializable]
	public partial class WindowDefinition : TSqlFragment
	{


		private Identifier _windowName;

		/// <summary>
		/// The window name. Cannot be null.
		/// </summary>
		public Identifier WindowName
		{
			get { return _windowName; }
			set { UpdateTokenInfo(value); _windowName = value; }
		}
		private Identifier _refWindowName;

		/// <summary>
		/// The reference window name. Optional, may be null.
		/// </summary>
		public Identifier RefWindowName
		{
			get { return _refWindowName; }
			set { UpdateTokenInfo(value); _refWindowName = value; }
		}
		private List<ScalarExpression> _partitions = new List<ScalarExpression>();

		/// <summary>
		/// The partitions. Optional, may have zero elements.
		/// </summary>
		public IList<ScalarExpression> Partitions
		{
			get { return _partitions; }
		}

		private OrderByClause _orderByClause;

		/// <summary>
		/// The order by clause. Optional may be null.
		/// </summary>
		public OrderByClause OrderByClause
		{
			get { return _orderByClause; }
			set { UpdateTokenInfo(value); _orderByClause = value; }
		}
		private  WindowFrameClause _windowFrameClause;

		/// <summary>
		/// Window bounds specification, for windowing aggregates. Optional may be null.
		/// </summary>
		public  WindowFrameClause WindowFrameClause
		{
			get { return _windowFrameClause; }
			set { UpdateTokenInfo(value); _windowFrameClause = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.WindowName != null)
			{
				this.WindowName.Accept(visitor);
			}

			if (this.RefWindowName != null)
			{
				this.RefWindowName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Partitions.Count; i < count; ++i)
			{
				this.Partitions[i].Accept(visitor);
			}

			if (this.OrderByClause != null)
			{
				this.OrderByClause.Accept(visitor);
			}

			if (this.WindowFrameClause != null)
			{
				this.WindowFrameClause.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents calls without the parenthesis and parameters.
	/// </summary>
	[System.Serializable]
	public partial class ParameterlessCall : PrimaryExpression
	{


		private ParameterlessCallType _parameterlessCallType;

		/// <summary>
		/// An enum that can be User, CurrentUser, SessionUser, SystemUser, CurrentTimestamp or CurrentDate.
		/// </summary>
		public ParameterlessCallType ParameterlessCallType
		{
			get { return _parameterlessCallType; }
			set { _parameterlessCallType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the subquery.
	/// </summary>
	[System.Serializable]
	public partial class ScalarSubquery : PrimaryExpression
	{


		private QueryExpression _queryExpression;

		/// <summary>
		/// The query expression.
		/// </summary>
		public QueryExpression QueryExpression
		{
			get { return _queryExpression; }
			set { UpdateTokenInfo(value); _queryExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.QueryExpression != null)
			{
				this.QueryExpression.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the ODBC function call.
	/// </summary>
	[System.Serializable]
	public partial class OdbcFunctionCall : PrimaryExpression
	{


		private Identifier _name;

		/// <summary>
		/// The name of the function.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private bool _parametersUsed;

		/// <summary>
		/// True if there was parenthesis.
		/// </summary>
		public bool ParametersUsed
		{
			get { return _parametersUsed; }
			set { _parametersUsed = value; }
		}
		private List<ScalarExpression> _parameters = new List<ScalarExpression>();

		/// <summary>
		/// The parameters to the function.
		/// </summary>
		public IList<ScalarExpression> Parameters
		{
			get { return _parameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the expression that start with Extract from.
	/// </summary>
	[System.Serializable]
	public partial class ExtractFromExpression : ScalarExpression
	{


		private ScalarExpression _expression;

		/// <summary>
		/// The inner expression.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}
		private Identifier _extractedElement;

		/// <summary>
		/// The element to extract from the expression.
		/// </summary>
		public Identifier ExtractedElement
		{
			get { return _extractedElement; }
			set { UpdateTokenInfo(value); _extractedElement = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			if (this.ExtractedElement != null)
			{
				this.ExtractedElement.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Odbc convert specification.
	/// </summary>
	[System.Serializable]
	public partial class OdbcConvertSpecification : ScalarExpression
	{


		private Identifier _identifier;

		/// <summary>
		/// The convert specification.
		/// </summary>
		public Identifier Identifier
		{
			get { return _identifier; }
			set { UpdateTokenInfo(value); _identifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Identifier != null)
			{
				this.Identifier.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Alter Function statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterFunctionStatement : FunctionStatementBody
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((FunctionStatementBody)this).Name != null)
			{
				 ((FunctionStatementBody)this).Name.Accept(visitor);
			}

			for (Int32 i = 0, count = ((ProcedureStatementBodyBase)this).Parameters.Count; i < count; ++i)
			{
				 ((ProcedureStatementBodyBase)this).Parameters[i].Accept(visitor);
			}

			if (((FunctionStatementBody)this).ReturnType != null)
			{
				 ((FunctionStatementBody)this).ReturnType.Accept(visitor);
			}

			for (Int32 i = 0, count = ((FunctionStatementBody)this).Options.Count; i < count; ++i)
			{
				 ((FunctionStatementBody)this).Options[i].Accept(visitor);
			}

			if (((ProcedureStatementBodyBase)this).StatementList != null)
			{
				 ((ProcedureStatementBodyBase)this).StatementList.Accept(visitor);
			}

			if (((ProcedureStatementBodyBase)this).MethodSpecifier != null)
			{
				 ((ProcedureStatementBodyBase)this).MethodSpecifier.Accept(visitor);
			}

			if (((FunctionStatementBody)this).OrderHint != null)
			{
				 ((FunctionStatementBody)this).OrderHint.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a group of statements that start with a BEGIN and end with an END keyword.
	/// </summary>
	[System.Serializable]
	public partial class BeginEndBlockStatement : TSqlStatement
	{


		private StatementList _statementList;

		/// <summary>
		/// The statements that make up the compound statement. May have zero elements.
		/// </summary>
		public StatementList StatementList
		{
			get { return _statementList; }
			set { UpdateTokenInfo(value); _statementList = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.StatementList != null)
			{
				this.StatementList.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a group of statements that start with a BEGIN and end with an END keyword in a ATOMIC block.
	/// </summary>
	[System.Serializable]
	public partial class BeginEndAtomicBlockStatement : BeginEndBlockStatement
	{


		private List<AtomicBlockOption> _options = new List<AtomicBlockOption>();

		/// <summary>
		/// The procedure with options.
		/// </summary>
		public IList<AtomicBlockOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents single atomic block option.
	/// </summary>
	[System.Serializable]
	public abstract partial class AtomicBlockOption : TSqlFragment
	{


		private AtomicBlockOptionKind _optionKind;

		/// <summary>
		/// Option kind.
		/// </summary>
		public AtomicBlockOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Option which be set to a value in BEGIN ATOMIC…END statement
	/// </summary>
	[System.Serializable]
	public partial class LiteralAtomicBlockOption : AtomicBlockOption
	{


		private Literal _value;

		/// <summary>
		/// The literal value.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Option which be set to an identifier in BEGIN ATOMIC…END statement
	/// </summary>
	[System.Serializable]
	public partial class IdentifierAtomicBlockOption : AtomicBlockOption
	{


		private Identifier _value;

		/// <summary>
		/// The Identifier value.
		/// </summary>
		public Identifier Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Option which be set to an OptionState in BEGIN ATOMIC…END statement
	/// </summary>
	[System.Serializable]
	public partial class OnOffAtomicBlockOption : AtomicBlockOption
	{


		private OptionState _optionState;

		/// <summary>
		/// Option state
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the begin transaction and begin distributed transaction statements.
	/// </summary>
	[System.Serializable]
	public partial class BeginTransactionStatement : TransactionStatement
	{


		private bool _distributed;

		/// <summary>
		/// True if this is a distributed transaction.
		/// </summary>
		public bool Distributed
		{
			get { return _distributed; }
			set { _distributed = value; }
		}
		private bool _markDefined;

		/// <summary>
		/// True if mark is defined, checking MarkDescription for null is not good enough.
		/// </summary>
		public bool MarkDefined
		{
			get { return _markDefined; }
			set { _markDefined = value; }
		}
		private ValueExpression _markDescription;

		/// <summary>
		/// The description of the mark, either a AsciiStringLiteral, UnicodeStringLiteral or a variable.
		/// </summary>
		public ValueExpression MarkDescription
		{
			get { return _markDescription; }
			set { UpdateTokenInfo(value); _markDescription = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.MarkDescription != null)
			{
				this.MarkDescription.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the break statement.
	/// </summary>
	[System.Serializable]
	public partial class BreakStatement : TSqlStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a column identifier with a sort order.
	/// </summary>
	[System.Serializable]
	public partial class ColumnWithSortOrder : TSqlFragment
	{


		private ColumnReferenceExpression _column;

		/// <summary>
		/// Represents the column.
		/// </summary>
		public ColumnReferenceExpression Column
		{
			get { return _column; }
			set { UpdateTokenInfo(value); _column = value; }
		}
		private SortOrder _sortOrder;

		/// <summary>
		/// Represents the sort order.
		/// </summary>
		public SortOrder SortOrder
		{
			get { return _sortOrder; }
			set { _sortOrder = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Column != null)
			{
				this.Column.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the commit transaction statement.
	/// </summary>
	[System.Serializable]
	public partial class CommitTransactionStatement : TransactionStatement
	{


		private OptionState _delayedDurabilityOption;

		/// <summary>
		/// The state of the Delayed Durability option.
		/// </summary>
		public OptionState DelayedDurabilityOption
		{
			get { return _delayedDurabilityOption; }
			set { _delayedDurabilityOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the rollback transaction statement.
	/// </summary>
	[System.Serializable]
	public partial class RollbackTransactionStatement : TransactionStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the save transaction statement.
	/// </summary>
	[System.Serializable]
	public partial class SaveTransactionStatement : TransactionStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the continue statement.
	/// </summary>
	[System.Serializable]
	public partial class ContinueStatement : TSqlStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Create Default statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateDefaultStatement : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// Represents the name. DatabaseName is disallowed here, has to equal String.Empty or null.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private ScalarExpression _expression;

		/// <summary>
		/// Expression that is the default.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Create Function statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateFunctionStatement : FunctionStatementBody
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((FunctionStatementBody)this).Name != null)
			{
				 ((FunctionStatementBody)this).Name.Accept(visitor);
			}

			for (Int32 i = 0, count = ((ProcedureStatementBodyBase)this).Parameters.Count; i < count; ++i)
			{
				 ((ProcedureStatementBodyBase)this).Parameters[i].Accept(visitor);
			}

			if (((FunctionStatementBody)this).ReturnType != null)
			{
				 ((FunctionStatementBody)this).ReturnType.Accept(visitor);
			}

			for (Int32 i = 0, count = ((FunctionStatementBody)this).Options.Count; i < count; ++i)
			{
				 ((FunctionStatementBody)this).Options[i].Accept(visitor);
			}

			if (((ProcedureStatementBodyBase)this).StatementList != null)
			{
				 ((ProcedureStatementBodyBase)this).StatementList.Accept(visitor);
			}

			if (((ProcedureStatementBodyBase)this).MethodSpecifier != null)
			{
				 ((ProcedureStatementBodyBase)this).MethodSpecifier.Accept(visitor);
			}

			if (((FunctionStatementBody)this).OrderHint != null)
			{
				 ((FunctionStatementBody)this).OrderHint.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the Create Or Alter Function statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateOrAlterFunctionStatement : FunctionStatementBody
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((FunctionStatementBody)this).Name != null)
			{
				 ((FunctionStatementBody)this).Name.Accept(visitor);
			}

			for (Int32 i = 0, count = ((ProcedureStatementBodyBase)this).Parameters.Count; i < count; ++i)
			{
				 ((ProcedureStatementBodyBase)this).Parameters[i].Accept(visitor);
			}

			if (((FunctionStatementBody)this).ReturnType != null)
			{
				 ((FunctionStatementBody)this).ReturnType.Accept(visitor);
			}

			for (Int32 i = 0, count = ((FunctionStatementBody)this).Options.Count; i < count; ++i)
			{
				 ((FunctionStatementBody)this).Options[i].Accept(visitor);
			}

			if (((ProcedureStatementBodyBase)this).StatementList != null)
			{
				 ((ProcedureStatementBodyBase)this).StatementList.Accept(visitor);
			}

			if (((ProcedureStatementBodyBase)this).MethodSpecifier != null)
			{
				 ((ProcedureStatementBodyBase)this).MethodSpecifier.Accept(visitor);
			}

			if (((FunctionStatementBody)this).OrderHint != null)
			{
				 ((FunctionStatementBody)this).OrderHint.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the Create Rule statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateRuleStatement : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// Represents the name. DatabaseName is disallowed here, has to equal String.Empty or null.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private BooleanExpression _expression;

		/// <summary>
		/// Expression that is the rule.
		/// </summary>
		public BooleanExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class represents a single declaration in the body of DeclareVariableStatement.
	/// </summary>
	[System.Serializable]
	public partial class DeclareVariableElement : TSqlFragment
	{


		private Identifier _variableName;

		/// <summary>
		/// The name of the variable. This includes the @ at the beginning.
		/// </summary>
		public Identifier VariableName
		{
			get { return _variableName; }
			set { UpdateTokenInfo(value); _variableName = value; }
		}
		private DataTypeReference _dataType;

		/// <summary>
		/// The data type of the variable. Type table is invalid.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}
		private NullableConstraintDefinition _nullable;

		/// <summary>
		/// The nullable constraint, optional can be null.
		/// </summary>
		public NullableConstraintDefinition Nullable
		{
			get { return _nullable; }
			set { UpdateTokenInfo(value); _nullable = value; }
		}
		private ScalarExpression _value;

		/// <summary>
		/// Initial variable value specified in declaration.
		/// </summary>
		public ScalarExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.VariableName != null)
			{
				this.VariableName.Accept(visitor);
			}

			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			if (this.Nullable != null)
			{
				this.Nullable.Accept(visitor);
			}

			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This statement represents declare @variable statement except table declarations.
	/// </summary>
	[System.Serializable]
	public partial class DeclareVariableStatement : TSqlStatement
	{


		private List<DeclareVariableElement> _declarations = new List<DeclareVariableElement>();

		/// <summary>
		/// The list of declarations, must have at least one element.
		/// </summary>
		public IList<DeclareVariableElement> Declarations
		{
			get { return _declarations; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Declarations.Count; i < count; ++i)
			{
				this.Declarations[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the goto statement.
	/// </summary>
	[System.Serializable]
	public partial class GoToStatement : TSqlStatement
	{


		private Identifier _labelName;

		/// <summary>
		/// Represents the label name.
		/// </summary>
		public Identifier LabelName
		{
			get { return _labelName; }
			set { UpdateTokenInfo(value); _labelName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.LabelName != null)
			{
				this.LabelName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the if statement.
	/// </summary>
	[System.Serializable]
	public partial class IfStatement : TSqlStatement
	{


		private BooleanExpression _predicate;

		/// <summary>
		/// The expression that is the predicate for the if statement.  This should be a boolean expression.
		/// </summary>
		public BooleanExpression Predicate
		{
			get { return _predicate; }
			set { UpdateTokenInfo(value); _predicate = value; }
		}
		private TSqlStatement _thenStatement;

		/// <summary>
		/// The statement that will be executed if the predicate evaluates true.
		/// </summary>
		public TSqlStatement ThenStatement
		{
			get { return _thenStatement; }
			set { UpdateTokenInfo(value); _thenStatement = value; }
		}
		private TSqlStatement _elseStatement;

		/// <summary>
		/// The statement that will be executed if the predicate evaluates false. Optional, may be null.
		/// </summary>
		public TSqlStatement ElseStatement
		{
			get { return _elseStatement; }
			set { UpdateTokenInfo(value); _elseStatement = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Predicate != null)
			{
				this.Predicate.Accept(visitor);
			}

			if (this.ThenStatement != null)
			{
				this.ThenStatement.Accept(visitor);
			}

			if (this.ElseStatement != null)
			{
				this.ElseStatement.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the label statement.
	/// </summary>
	[System.Serializable]
	public partial class LabelStatement : TSqlStatement
	{


		private string _value;

		/// <summary>
		/// Represents the value.
		/// </summary>
		public string Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a multi-part identifier.
	/// </summary>
	[System.Serializable]
	public partial class MultiPartIdentifier : TSqlFragment
	{


		private List<Identifier> _identifiers = new List<Identifier>();

		/// <summary>
		/// The Identifiers
		/// </summary>
		public IList<Identifier> Identifiers
		{
			get { return _identifiers; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Identifiers.Count; i < count; ++i)
			{
				this.Identifiers[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a schema object name.
	/// </summary>
	[System.Serializable]
	public partial class SchemaObjectName : MultiPartIdentifier
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the name of a schema object child.
	/// </summary>
	[System.Serializable]
	public partial class ChildObjectName : SchemaObjectName
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class represents a parameter that can be passed into a procedure.
	/// </summary>
	[System.Serializable]
	public partial class ProcedureParameter : DeclareVariableElement
	{


		private bool _isVarying;

		/// <summary>
		/// Shows if VARYING is defined.
		/// </summary>
		public bool IsVarying
		{
			get { return _isVarying; }
			set { _isVarying = value; }
		}
		private ParameterModifier _modifier;

		/// <summary>
		/// Shows if OUTPUT or READONLY is defined.
		/// </summary>
		public ParameterModifier Modifier
		{
			get { return _modifier; }
			set { _modifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The abstract base class for transaction statements.
	/// </summary>
	[System.Serializable]
	public abstract partial class TransactionStatement : TSqlStatement
	{


		private IdentifierOrValueExpression _name;

		/// <summary>
		/// The name of the save point. It is either an Identifier, Literal of type variable, or string.
		/// </summary>
		public IdentifierOrValueExpression Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the while statement.
	/// </summary>
	[System.Serializable]
	public partial class WhileStatement : TSqlStatement
	{


		private BooleanExpression _predicate;

		/// <summary>
		/// The expression that is the predicate for the if statement.  This should be a boolean expression.
		/// </summary>
		public BooleanExpression Predicate
		{
			get { return _predicate; }
			set { UpdateTokenInfo(value); _predicate = value; }
		}
		private TSqlStatement _statement;

		/// <summary>
		/// The statement that will be executed if the predicate evaluates true.
		/// </summary>
		public TSqlStatement Statement
		{
			get { return _statement; }
			set { UpdateTokenInfo(value); _statement = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Predicate != null)
			{
				this.Predicate.Accept(visitor);
			}

			if (this.Statement != null)
			{
				this.Statement.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the delete statement.
	/// </summary>
	[System.Serializable]
	public partial class DeleteStatement : DataModificationStatement
	{


		private DeleteSpecification _deleteSpecification;

		/// <summary>
		/// The properties for Delete
		/// </summary>
		public DeleteSpecification DeleteSpecification
		{
			get { return _deleteSpecification; }
			set { UpdateTokenInfo(value); _deleteSpecification = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.DeleteSpecification != null)
			{
				this.DeleteSpecification.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Base class for Update and Delete Specs
	/// </summary>
	[System.Serializable]
	public abstract partial class UpdateDeleteSpecificationBase : DataModificationSpecification
	{


		private FromClause _fromClause;

		/// <summary>
		/// Optional may be null.
		/// </summary>
		public FromClause FromClause
		{
			get { return _fromClause; }
			set { UpdateTokenInfo(value); _fromClause = value; }
		}
		private WhereClause _whereClause;

		/// <summary>
		/// Optional may be null.
		/// </summary>
		public WhereClause WhereClause
		{
			get { return _whereClause; }
			set { UpdateTokenInfo(value); _whereClause = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FromClause != null)
			{
				this.FromClause.Accept(visitor);
			}

			if (this.WhereClause != null)
			{
				this.WhereClause.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The properties for Delete
	/// </summary>
	[System.Serializable]
	public partial class DeleteSpecification : UpdateDeleteSpecificationBase
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the insert statement.
	/// </summary>
	[System.Serializable]
	public partial class InsertStatement : DataModificationStatement
	{


		private InsertSpecification _insertSpecification;

		/// <summary>
		/// The properties for the Insert
		/// </summary>
		public InsertSpecification InsertSpecification
		{
			get { return _insertSpecification; }
			set { UpdateTokenInfo(value); _insertSpecification = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.InsertSpecification != null)
			{
				this.InsertSpecification.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The properties for Insert
	/// </summary>
	[System.Serializable]
	public partial class InsertSpecification : DataModificationSpecification
	{


		private InsertOption _insertOption;

		/// <summary>
		/// Optional Into or Over
		/// </summary>
		public InsertOption InsertOption
		{
			get { return _insertOption; }
			set { _insertOption = value; }
		}
		private InsertSource _insertSource;

		/// <summary>
		/// The insert source can be ValuesInsertSource, SelectInsertSource, or ExecuteInsertSource.
		/// </summary>
		public InsertSource InsertSource
		{
			get { return _insertSource; }
			set { UpdateTokenInfo(value); _insertSource = value; }
		}
		private List<ColumnReferenceExpression> _columns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// Optional target columns.
		/// </summary>
		public IList<ColumnReferenceExpression> Columns
		{
			get { return _columns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.InsertSource != null)
			{
				this.InsertSource.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the update statement.
	/// </summary>
	[System.Serializable]
	public partial class UpdateStatement : DataModificationStatement
	{


		private UpdateSpecification _updateSpecification;

		/// <summary>
		/// The properties for Update
		/// </summary>
		public UpdateSpecification UpdateSpecification
		{
			get { return _updateSpecification; }
			set { UpdateTokenInfo(value); _updateSpecification = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.UpdateSpecification != null)
			{
				this.UpdateSpecification.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The properties for Update
	/// </summary>
	[System.Serializable]
	public partial class UpdateSpecification : UpdateDeleteSpecificationBase
	{


		private List<SetClause> _setClauses = new List<SetClause>();

		/// <summary>
		/// The collection of set clauses.
		/// </summary>
		public IList<SetClause> SetClauses
		{
			get { return _setClauses; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.SetClauses.Count; i < count; ++i)
			{
				this.SetClauses[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the create schema statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateSchemaStatement : TSqlStatement, IAuthorization
	{


		private Identifier _name;

		/// <summary>
		/// The name of the schema, may be null if there is an owner.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private StatementList _statementList;

		/// <summary>
		/// The optional list of statements. May be Create Table, Create View, Grant, Deny or Revoke.
		/// </summary>
		public StatementList StatementList
		{
			get { return _statementList; }
			set { UpdateTokenInfo(value); _statementList = value; }
		}
		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.StatementList != null)
			{
				this.StatementList.Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the waitfor statement.
	/// </summary>
	[System.Serializable]
	public partial class WaitForStatement : TSqlStatement
	{


		private WaitForOption _waitForOption;

		/// <summary>
		/// The type of the wait.
		/// </summary>
		public WaitForOption WaitForOption
		{
			get { return _waitForOption; }
			set { _waitForOption = value; }
		}
		private ValueExpression _parameter;

		/// <summary>
		/// Time to wait - in case of Delay or Time, null in case of statement. Can be a string or a variable.
		/// </summary>
		public ValueExpression Parameter
		{
			get { return _parameter; }
			set { UpdateTokenInfo(value); _parameter = value; }
		}
		private ScalarExpression _timeout;

		/// <summary>
		/// Optional timeout in case of statement
		/// </summary>
		public ScalarExpression Timeout
		{
			get { return _timeout; }
			set { UpdateTokenInfo(value); _timeout = value; }
		}
		private WaitForSupportedStatement _statement;

		/// <summary>
		/// Inner statement (can be null - in Time and Delay cases)
		/// </summary>
		public WaitForSupportedStatement Statement
		{
			get { return _statement; }
			set { UpdateTokenInfo(value); _statement = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Parameter != null)
			{
				this.Parameter.Accept(visitor);
			}

			if (this.Timeout != null)
			{
				this.Timeout.Accept(visitor);
			}

			if (this.Statement != null)
			{
				this.Statement.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the readtext statement.
	/// </summary>
	[System.Serializable]
	public partial class ReadTextStatement : TSqlStatement
	{


		private ColumnReferenceExpression _column;

		/// <summary>
		/// The column. Has to be at least a two part name including table.
		/// </summary>
		public ColumnReferenceExpression Column
		{
			get { return _column; }
			set { UpdateTokenInfo(value); _column = value; }
		}
		private ValueExpression _textPointer;

		/// <summary>
		/// Can be a binary or a variable.
		/// </summary>
		public ValueExpression TextPointer
		{
			get { return _textPointer; }
			set { UpdateTokenInfo(value); _textPointer = value; }
		}
		private ValueExpression _offset;

		/// <summary>
		/// Can be an integer or a variable.
		/// </summary>
		public ValueExpression Offset
		{
			get { return _offset; }
			set { UpdateTokenInfo(value); _offset = value; }
		}
		private ValueExpression _size;

		/// <summary>
		/// Can be an integer or a variable.
		/// </summary>
		public ValueExpression Size
		{
			get { return _size; }
			set { UpdateTokenInfo(value); _size = value; }
		}
		private bool _holdLock;

		/// <summary>
		/// True if HOLDLOCK was defined.
		/// </summary>
		public bool HoldLock
		{
			get { return _holdLock; }
			set { _holdLock = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Column != null)
			{
				this.Column.Accept(visitor);
			}

			if (this.TextPointer != null)
			{
				this.TextPointer.Accept(visitor);
			}

			if (this.Offset != null)
			{
				this.Offset.Accept(visitor);
			}

			if (this.Size != null)
			{
				this.Size.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the updatetext statement.
	/// </summary>
	[System.Serializable]
	public partial class UpdateTextStatement : TextModificationStatement
	{


		private ScalarExpression _insertOffset;

		/// <summary>
		/// Can be an integer, negative integer, NULL or a variable.
		/// </summary>
		public ScalarExpression InsertOffset
		{
			get { return _insertOffset; }
			set { UpdateTokenInfo(value); _insertOffset = value; }
		}
		private ScalarExpression _deleteLength;

		/// <summary>
		/// Can be an integer, negative integer, NULL or a variable.
		/// </summary>
		public ScalarExpression DeleteLength
		{
			get { return _deleteLength; }
			set { UpdateTokenInfo(value); _deleteLength = value; }
		}
		private ColumnReferenceExpression _sourceColumn;

		/// <summary>
		/// Optional may be null. Source column. Has to be at least a two part name including table.
		/// </summary>
		public ColumnReferenceExpression SourceColumn
		{
			get { return _sourceColumn; }
			set { UpdateTokenInfo(value); _sourceColumn = value; }
		}
		private ValueExpression _sourceParameter;

		/// <summary>
		/// This can come after source column if it is not null and be a binary or a variable. If the source column is null, it can be NULL, Ascii or Unicode string, binary or variable.
		/// </summary>
		public ValueExpression SourceParameter
		{
			get { return _sourceParameter; }
			set { UpdateTokenInfo(value); _sourceParameter = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.InsertOffset != null)
			{
				this.InsertOffset.Accept(visitor);
			}

			if (this.DeleteLength != null)
			{
				this.DeleteLength.Accept(visitor);
			}

			if (this.SourceColumn != null)
			{
				this.SourceColumn.Accept(visitor);
			}

			if (this.SourceParameter != null)
			{
				this.SourceParameter.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the writetext statement.
	/// </summary>
	[System.Serializable]
	public partial class WriteTextStatement : TextModificationStatement
	{


		private ValueExpression _sourceParameter;

		/// <summary>
		/// It can be null, Ascii or Unicode string, binary or variable.
		/// </summary>
		public ValueExpression SourceParameter
		{
			get { return _sourceParameter; }
			set { UpdateTokenInfo(value); _sourceParameter = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SourceParameter != null)
			{
				this.SourceParameter.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the writetext statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class TextModificationStatement : TSqlStatement
	{


		private bool _bulk;

		/// <summary>
		/// True is BULK was used.
		/// </summary>
		public bool Bulk
		{
			get { return _bulk; }
			set { _bulk = value; }
		}
		private ColumnReferenceExpression _column;

		/// <summary>
		/// The column. Has to be at least a two part name including table.
		/// </summary>
		public ColumnReferenceExpression Column
		{
			get { return _column; }
			set { UpdateTokenInfo(value); _column = value; }
		}
		private ValueExpression _textId;

		/// <summary>
		/// Can be a binary, an integer or a variable.
		/// </summary>
		public ValueExpression TextId
		{
			get { return _textId; }
			set { UpdateTokenInfo(value); _textId = value; }
		}
		private Literal _timestamp;

		/// <summary>
		/// Optional, literal of binary type.
		/// </summary>
		public Literal Timestamp
		{
			get { return _timestamp; }
			set { UpdateTokenInfo(value); _timestamp = value; }
		}
		private bool _withLog;

		/// <summary>
		/// True if WITH LOG was defined.
		/// </summary>
		public bool WithLog
		{
			get { return _withLog; }
			set { _withLog = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Column != null)
			{
				this.Column.Accept(visitor);
			}

			if (this.TextId != null)
			{
				this.TextId.Accept(visitor);
			}

			if (this.Timestamp != null)
			{
				this.Timestamp.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the lineno statement.
	/// </summary>
	[System.Serializable]
	public partial class LineNoStatement : TSqlStatement
	{


		private IntegerLiteral _lineNo;

		/// <summary>
		/// Literal of type integer.
		/// </summary>
		public IntegerLiteral LineNo
		{
			get { return _lineNo; }
			set { UpdateTokenInfo(value); _lineNo = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.LineNo != null)
			{
				this.LineNo.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the security statement body base class.
	/// </summary>
	[System.Serializable]
	public abstract partial class SecurityStatement : TSqlStatement
	{


		private List<Permission> _permissions = new List<Permission>();

		/// <summary>
		/// Represents the permissions.
		/// </summary>
		public IList<Permission> Permissions
		{
			get { return _permissions; }
		}

		private SecurityTargetObject _securityTargetObject;

		/// <summary>
		/// Security target object.  Optional may be null.
		/// </summary>
		public SecurityTargetObject SecurityTargetObject
		{
			get { return _securityTargetObject; }
			set { UpdateTokenInfo(value); _securityTargetObject = value; }
		}
		private List<SecurityPrincipal> _principals = new List<SecurityPrincipal>();

		/// <summary>
		/// Represents the principals.
		/// </summary>
		public IList<SecurityPrincipal> Principals
		{
			get { return _principals; }
		}

		private Identifier _asClause;

		/// <summary>
		/// Optional may be null.
		/// </summary>
		public Identifier AsClause
		{
			get { return _asClause; }
			set { UpdateTokenInfo(value); _asClause = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Permissions.Count; i < count; ++i)
			{
				this.Permissions[i].Accept(visitor);
			}

			if (this.SecurityTargetObject != null)
			{
				this.SecurityTargetObject.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Principals.Count; i < count; ++i)
			{
				this.Principals[i].Accept(visitor);
			}

			if (this.AsClause != null)
			{
				this.AsClause.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the grant statement.
	/// </summary>
	[System.Serializable]
	public partial class GrantStatement : SecurityStatement
	{


		private bool _withGrantOption;

		/// <summary>
		/// True is WITH GRANT OPTION is defined.
		/// </summary>
		public bool WithGrantOption
		{
			get { return _withGrantOption; }
			set { _withGrantOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = ((SecurityStatement)this).Permissions.Count; i < count; ++i)
			{
				 ((SecurityStatement)this).Permissions[i].Accept(visitor);
			}

			if (((SecurityStatement)this).SecurityTargetObject != null)
			{
				 ((SecurityStatement)this).SecurityTargetObject.Accept(visitor);
			}

			for (Int32 i = 0, count = ((SecurityStatement)this).Principals.Count; i < count; ++i)
			{
				 ((SecurityStatement)this).Principals[i].Accept(visitor);
			}

			if (((SecurityStatement)this).AsClause != null)
			{
				 ((SecurityStatement)this).AsClause.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the deny statement.
	/// </summary>
	[System.Serializable]
	public partial class DenyStatement : SecurityStatement
	{


		private bool _cascadeOption;

		/// <summary>
		/// True is CASCADE is defined.
		/// </summary>
		public bool CascadeOption
		{
			get { return _cascadeOption; }
			set { _cascadeOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = ((SecurityStatement)this).Permissions.Count; i < count; ++i)
			{
				 ((SecurityStatement)this).Permissions[i].Accept(visitor);
			}

			if (((SecurityStatement)this).SecurityTargetObject != null)
			{
				 ((SecurityStatement)this).SecurityTargetObject.Accept(visitor);
			}

			for (Int32 i = 0, count = ((SecurityStatement)this).Principals.Count; i < count; ++i)
			{
				 ((SecurityStatement)this).Principals[i].Accept(visitor);
			}

			if (((SecurityStatement)this).AsClause != null)
			{
				 ((SecurityStatement)this).AsClause.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the revoke statement.
	/// </summary>
	[System.Serializable]
	public partial class RevokeStatement : SecurityStatement
	{


		private bool _grantOptionFor;

		/// <summary>
		/// True is GRANT OPTION FOR is defined.
		/// </summary>
		public bool GrantOptionFor
		{
			get { return _grantOptionFor; }
			set { _grantOptionFor = value; }
		}
		private bool _cascadeOption;

		/// <summary>
		/// True is CASCADE is defined.
		/// </summary>
		public bool CascadeOption
		{
			get { return _cascadeOption; }
			set { _cascadeOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = ((SecurityStatement)this).Permissions.Count; i < count; ++i)
			{
				 ((SecurityStatement)this).Permissions[i].Accept(visitor);
			}

			if (((SecurityStatement)this).SecurityTargetObject != null)
			{
				 ((SecurityStatement)this).SecurityTargetObject.Accept(visitor);
			}

			for (Int32 i = 0, count = ((SecurityStatement)this).Principals.Count; i < count; ++i)
			{
				 ((SecurityStatement)this).Principals[i].Accept(visitor);
			}

			if (((SecurityStatement)this).AsClause != null)
			{
				 ((SecurityStatement)this).AsClause.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents alter authorization statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterAuthorizationStatement : TSqlStatement
	{


		private SecurityTargetObject _securityTargetObject;

		/// <summary>
		/// Security target object.  Optional may be null.
		/// </summary>
		public SecurityTargetObject SecurityTargetObject
		{
			get { return _securityTargetObject; }
			set { UpdateTokenInfo(value); _securityTargetObject = value; }
		}
		private bool _toSchemaOwner;

		/// <summary>
		/// True is SCHEMA OWNER is used.
		/// </summary>
		public bool ToSchemaOwner
		{
			get { return _toSchemaOwner; }
			set { _toSchemaOwner = value; }
		}
		private Identifier _principalName;

		/// <summary>
		/// Represents the principal name. Will be null if ToSchemaOwner is true.
		/// </summary>
		public Identifier PrincipalName
		{
			get { return _principalName; }
			set { UpdateTokenInfo(value); _principalName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SecurityTargetObject != null)
			{
				this.SecurityTargetObject.Accept(visitor);
			}

			if (this.PrincipalName != null)
			{
				this.PrincipalName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the permission that can be used in security statement body.
	/// </summary>
	[System.Serializable]
	public partial class Permission : TSqlFragment
	{


		private List<Identifier> _identifiers = new List<Identifier>();

		/// <summary>
		/// Represents the permission.
		/// </summary>
		public IList<Identifier> Identifiers
		{
			get { return _identifiers; }
		}

		private List<Identifier> _columns = new List<Identifier>();

		/// <summary>
		/// Represents the columns. Optional may have zero elements.
		/// </summary>
		public IList<Identifier> Columns
		{
			get { return _columns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Identifiers.Count; i < count; ++i)
			{
				this.Identifiers[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the target object that can be used in security statement body.
	/// </summary>
	[System.Serializable]
	public partial class SecurityTargetObject : TSqlFragment
	{


		private SecurityObjectKind _objectKind;

		/// <summary>
		/// Object kind
		/// </summary>
		public SecurityObjectKind ObjectKind
		{
			get { return _objectKind; }
			set { _objectKind = value; }
		}
		private SecurityTargetObjectName _objectName;

		/// <summary>
		/// Represents the object.
		/// </summary>
		public SecurityTargetObjectName ObjectName
		{
			get { return _objectName; }
			set { UpdateTokenInfo(value); _objectName = value; }
		}
		private List<Identifier> _columns = new List<Identifier>();

		/// <summary>
		/// Represents the columns. If this is used inside ALTER AUTHORIZATION, there can't be any columns. Optional may have zero elements.
		/// </summary>
		public IList<Identifier> Columns
		{
			get { return _columns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ObjectName != null)
			{
				this.ObjectName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the security target object name.
	/// </summary>
	[System.Serializable]
	public partial class SecurityTargetObjectName : TSqlFragment
	{


		private MultiPartIdentifier _multiPartIdentifier;

		/// <summary>
		/// The multi-part name of the security target object
		/// </summary>
		public MultiPartIdentifier MultiPartIdentifier
		{
			get { return _multiPartIdentifier; }
			set { UpdateTokenInfo(value); _multiPartIdentifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.MultiPartIdentifier != null)
			{
				this.MultiPartIdentifier.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the principal that can be used in security statement body.
	/// </summary>
	[System.Serializable]
	public partial class SecurityPrincipal : TSqlFragment
	{


		private PrincipalType _principalType;

		/// <summary>
		/// The type of the principal.
		/// </summary>
		public PrincipalType PrincipalType
		{
			get { return _principalType; }
			set { _principalType = value; }
		}
		private Identifier _identifier;

		/// <summary>
		/// Optional may be null.
		/// </summary>
		public Identifier Identifier
		{
			get { return _identifier; }
			set { UpdateTokenInfo(value); _identifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Identifier != null)
			{
				this.Identifier.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the security statement body base class.
	/// </summary>
	[System.Serializable]
	public abstract partial class SecurityStatementBody80 : TSqlStatement
	{


		private SecurityElement80 _securityElement80;

		/// <summary>
		/// The security statement body.
		/// </summary>
		public SecurityElement80 SecurityElement80
		{
			get { return _securityElement80; }
			set { UpdateTokenInfo(value); _securityElement80 = value; }
		}
		private SecurityUserClause80 _securityUserClause80;

		/// <summary>
		/// The user clause.
		/// </summary>
		public SecurityUserClause80 SecurityUserClause80
		{
			get { return _securityUserClause80; }
			set { UpdateTokenInfo(value); _securityUserClause80 = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SecurityElement80 != null)
			{
				this.SecurityElement80.Accept(visitor);
			}

			if (this.SecurityUserClause80 != null)
			{
				this.SecurityUserClause80.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the grant statement.
	/// </summary>
	[System.Serializable]
	public partial class GrantStatement80 : SecurityStatementBody80
	{


		private bool _withGrantOption;

		/// <summary>
		/// True is WITH GRANT OPTION is defined.
		/// </summary>
		public bool WithGrantOption
		{
			get { return _withGrantOption; }
			set { _withGrantOption = value; }
		}
		private Identifier _asClause;

		/// <summary>
		/// Optional may be null.
		/// </summary>
		public Identifier AsClause
		{
			get { return _asClause; }
			set { UpdateTokenInfo(value); _asClause = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.AsClause != null)
			{
				this.AsClause.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the deny statement.
	/// </summary>
	[System.Serializable]
	public partial class DenyStatement80 : SecurityStatementBody80
	{


		private bool _cascadeOption;

		/// <summary>
		/// True is CASCADE is defined.
		/// </summary>
		public bool CascadeOption
		{
			get { return _cascadeOption; }
			set { _cascadeOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the revoke statement.
	/// </summary>
	[System.Serializable]
	public partial class RevokeStatement80 : SecurityStatementBody80
	{


		private bool _grantOptionFor;

		/// <summary>
		/// True is GRANT OPTION FOR is defined.
		/// </summary>
		public bool GrantOptionFor
		{
			get { return _grantOptionFor; }
			set { _grantOptionFor = value; }
		}
		private bool _cascadeOption;

		/// <summary>
		/// True is CASCADE is defined.
		/// </summary>
		public bool CascadeOption
		{
			get { return _cascadeOption; }
			set { _cascadeOption = value; }
		}
		private Identifier _asClause;

		/// <summary>
		/// Optional may be null.
		/// </summary>
		public Identifier AsClause
		{
			get { return _asClause; }
			set { UpdateTokenInfo(value); _asClause = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.AsClause != null)
			{
				this.AsClause.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the security statement body that is common for Grant Deny and Revoke Statements.
	/// </summary>
	[System.Serializable]
	public abstract partial class SecurityElement80 : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the security element that has commands.
	/// </summary>
	[System.Serializable]
	public partial class CommandSecurityElement80 : SecurityElement80
	{


		private bool _all;

		/// <summary>
		/// True is ALL is defined.
		/// </summary>
		public bool All
		{
			get { return _all; }
			set { _all = value; }
		}
		private CommandOptions _commandOptions;

		/// <summary>
		/// The command options
		/// </summary>
		public CommandOptions CommandOptions
		{
			get { return _commandOptions; }
			set { _commandOptions = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the security element that has priviliges.
	/// </summary>
	[System.Serializable]
	public partial class PrivilegeSecurityElement80 : SecurityElement80
	{


		private List<Privilege80> _privileges = new List<Privilege80>();

		/// <summary>
		/// The collection of privileges
		/// </summary>
		public IList<Privilege80> Privileges
		{
			get { return _privileges; }
		}

		private SchemaObjectName _schemaObjectName;

		/// <summary>
		/// The security object.
		/// </summary>
		public SchemaObjectName SchemaObjectName
		{
			get { return _schemaObjectName; }
			set { UpdateTokenInfo(value); _schemaObjectName = value; }
		}
		private List<Identifier> _columns = new List<Identifier>();

		/// <summary>
		/// May have zero elements.
		/// </summary>
		public IList<Identifier> Columns
		{
			get { return _columns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Privileges.Count; i < count; ++i)
			{
				this.Privileges[i].Accept(visitor);
			}

			if (this.SchemaObjectName != null)
			{
				this.SchemaObjectName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a privilage that can be used in a security statement.
	/// </summary>
	[System.Serializable]
	public partial class Privilege80 : TSqlFragment
	{


		private List<Identifier> _columns = new List<Identifier>();

		/// <summary>
		/// May have zero elements.
		/// </summary>
		public IList<Identifier> Columns
		{
			get { return _columns; }
		}

		private PrivilegeType80 _privilegeType80;

		/// <summary>
		/// The privilege type.
		/// </summary>
		public PrivilegeType80 PrivilegeType80
		{
			get { return _privilegeType80; }
			set { _privilegeType80 = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the security statement body that is common for Grant Deny and Revoke Statements.
	/// </summary>
	[System.Serializable]
	public partial class SecurityUserClause80 : TSqlFragment
	{


		private List<Identifier> _users = new List<Identifier>();

		/// <summary>
		/// The list of users. Will have zero elements if UserType80 is Public or NULL.
		/// </summary>
		public IList<Identifier> Users
		{
			get { return _users; }
		}

		private UserType80 _userType80;

		/// <summary>
		/// Can be Null, Public, or Users
		/// </summary>
		public UserType80 UserType80
		{
			get { return _userType80; }
			set { _userType80 = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Users.Count; i < count; ++i)
			{
				this.Users[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the SqlCommandIdentifier.
	/// </summary>
	[System.Serializable]
	public partial class SqlCommandIdentifier : Identifier
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The base class for SET clause.
	/// </summary>
	[System.Serializable]
	public abstract partial class SetClause : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SET clause for assignment.
	/// </summary>
	[System.Serializable]
	public partial class AssignmentSetClause : SetClause
	{


		private VariableReference _variable;

		/// <summary>
		/// Optional can be null.
		/// </summary>
		public VariableReference Variable
		{
			get { return _variable; }
			set { UpdateTokenInfo(value); _variable = value; }
		}
		private ColumnReferenceExpression _column;

		/// <summary>
		/// Column being set. Can be null, if variable is present.
		/// </summary>
		public ColumnReferenceExpression Column
		{
			get { return _column; }
			set { UpdateTokenInfo(value); _column = value; }
		}
		private ScalarExpression _newValue;

		/// <summary>
		/// The expression that the variable and/or the column will be set to.
		/// </summary>
		public ScalarExpression NewValue
		{
			get { return _newValue; }
			set { UpdateTokenInfo(value); _newValue = value; }
		}
		private AssignmentKind _assignmentKind;

		/// <summary>
		/// Assignment operator used.
		/// </summary>
		public AssignmentKind AssignmentKind
		{
			get { return _assignmentKind; }
			set { _assignmentKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Variable != null)
			{
				this.Variable.Accept(visitor);
			}

			if (this.Column != null)
			{
				this.Column.Accept(visitor);
			}

			if (this.NewValue != null)
			{
				this.NewValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SET clause for function calls.
	/// </summary>
	[System.Serializable]
	public partial class FunctionCallSetClause : SetClause
	{


		private FunctionCall _mutatorFunction;

		/// <summary>
		/// The mutator method call
		/// </summary>
		public FunctionCall MutatorFunction
		{
			get { return _mutatorFunction; }
			set { UpdateTokenInfo(value); _mutatorFunction = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.MutatorFunction != null)
			{
				this.MutatorFunction.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for source nodes of insert statements.
	/// </summary>
	[System.Serializable]
	public abstract partial class InsertSource : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the insert source for VALUES.
	/// </summary>
	[System.Serializable]
	public partial class ValuesInsertSource : InsertSource
	{


		private bool _isDefaultValues;

		/// <summary>
		/// True if default values are used. The values list should have zero elements if this is true.
		/// </summary>
		public bool IsDefaultValues
		{
			get { return _isDefaultValues; }
			set { _isDefaultValues = value; }
		}
		private List<RowValue> _rowValues = new List<RowValue>();

		/// <summary>
		/// The list of rows, if it has any elements DefaultValues should be false.
		/// </summary>
		public IList<RowValue> RowValues
		{
			get { return _rowValues; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.RowValues.Count; i < count; ++i)
			{
				this.RowValues[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the insert source for SELECT.
	/// </summary>
	[System.Serializable]
	public partial class SelectInsertSource : InsertSource
	{


		private QueryExpression _select;

		/// <summary>
		/// The select query for the values to insert.
		/// </summary>
		public QueryExpression Select
		{
			get { return _select; }
			set { UpdateTokenInfo(value); _select = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Select != null)
			{
				this.Select.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the insert source for EXECUTE.
	/// </summary>
	[System.Serializable]
	public partial class ExecuteInsertSource : InsertSource
	{


		private ExecuteSpecification _execute;

		/// <summary>
		/// The execute call for the values to insert.
		/// </summary>
		public ExecuteSpecification Execute
		{
			get { return _execute; }
			set { UpdateTokenInfo(value); _execute = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Execute != null)
			{
				this.Execute.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents data for a single row.
	/// </summary>
	[System.Serializable]
	public partial class RowValue : TSqlFragment
	{


		private List<ScalarExpression> _columnValues = new List<ScalarExpression>();

		/// <summary>
		/// The list of column values.
		/// </summary>
		public IList<ScalarExpression> ColumnValues
		{
			get { return _columnValues; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.ColumnValues.Count; i < count; ++i)
			{
				this.ColumnValues[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the print statement.
	/// </summary>
	[System.Serializable]
	public partial class PrintStatement : TSqlStatement
	{


		private ScalarExpression _expression;

		/// <summary>
		/// The expression to be printed.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the update function call which is a boolean function for use in triggers.
	/// </summary>
	[System.Serializable]
	public partial class UpdateCall : BooleanExpression
	{


		private Identifier _identifier;

		/// <summary>
		/// The column name to test.
		/// </summary>
		public Identifier Identifier
		{
			get { return _identifier; }
			set { UpdateTokenInfo(value); _identifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Identifier != null)
			{
				this.Identifier.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the tsequal function call which is a boolean function.
	/// </summary>
	[System.Serializable]
	public partial class TSEqualCall : BooleanExpression
	{


		private ScalarExpression _firstExpression;

		/// <summary>
		/// The first expression.
		/// </summary>
		public ScalarExpression FirstExpression
		{
			get { return _firstExpression; }
			set { UpdateTokenInfo(value); _firstExpression = value; }
		}
		private ScalarExpression _secondExpression;

		/// <summary>
		/// The second expression.
		/// </summary>
		public ScalarExpression SecondExpression
		{
			get { return _secondExpression; }
			set { UpdateTokenInfo(value); _secondExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.FirstExpression != null)
			{
				this.FirstExpression.Accept(visitor);
			}

			if (this.SecondExpression != null)
			{
				this.SecondExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the abstract base class for primary expressions.
	/// </summary>
	[System.Serializable]
	public abstract partial class PrimaryExpression : ScalarExpression, ICollationSetter
	{


		private Identifier _collation;

		/// <summary>
		/// Collation identifier
		/// </summary>
		public Identifier Collation
		{
			get { return _collation; }
			set { UpdateTokenInfo(value); _collation = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Collation != null)
			{
				this.Collation.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a literal constant.
	/// </summary>
	[System.Serializable]
	public abstract partial class Literal : ValueExpression
	{


		private string _value;

		/// <summary>
		/// Represents the value of the literal.
		/// </summary>
		public string Value
		{
			get { return _value; }
			set { _value = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an Integer literal.
	/// </summary>
	[System.Serializable]
	public partial class IntegerLiteral : Literal
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a Numeric literal.
	/// </summary>
	[System.Serializable]
	public partial class NumericLiteral : Literal
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a Real literal.
	/// </summary>
	[System.Serializable]
	public partial class RealLiteral : Literal
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a Money literal.
	/// </summary>
	[System.Serializable]
	public partial class MoneyLiteral : Literal
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a Binary literal.
	/// </summary>
	[System.Serializable]
	public partial class BinaryLiteral : Literal
	{


		private bool _isLargeObject;

		/// <summary>
		/// Indicates if the literal exceeds 8000 bytes
		/// </summary>
		public bool IsLargeObject
		{
			get { return _isLargeObject; }
			set { _isLargeObject = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a string literal.
	/// </summary>
	[System.Serializable]
	public partial class StringLiteral : Literal
	{


		private bool _isNational;

		/// <summary>
		/// Indicates if the string is unicode
		/// </summary>
		public bool IsNational
		{
			get { return _isNational; }
			set { _isNational = value; }
		}
		private bool _isLargeObject;

		/// <summary>
		/// Indicates if the literal exceeds 8000 bytes
		/// </summary>
		public bool IsLargeObject
		{
			get { return _isLargeObject; }
			set { _isLargeObject = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a null literal.
	/// </summary>
	[System.Serializable]
	public partial class NullLiteral : Literal
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an identifier that is treated as a literal.
	/// </summary>
	[System.Serializable]
	public partial class IdentifierLiteral : Literal
	{


		private QuoteType _quoteType;

		/// <summary>
		/// The QuoteType of the identifier.
		/// </summary>
		public QuoteType QuoteType
		{
			get { return _quoteType; }
			set { _quoteType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the literal for DEFAULT
	/// </summary>
	[System.Serializable]
	public partial class DefaultLiteral : Literal
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the MAX literal.
	/// </summary>
	[System.Serializable]
	public partial class MaxLiteral : Literal
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an odbc formatted literal.
	/// </summary>
	[System.Serializable]
	public partial class OdbcLiteral : Literal
	{


		private OdbcLiteralType _odbcLiteralType;

		/// <summary>
		/// The Odbc Literal Type
		/// </summary>
		public OdbcLiteralType OdbcLiteralType
		{
			get { return _odbcLiteralType; }
			set { _odbcLiteralType = value; }
		}
		private bool _isNational;

		/// <summary>
		/// Indicates if the string is unicode
		/// </summary>
		public bool IsNational
		{
			get { return _isNational; }
			set { _isNational = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single literal or a range of literals.
	/// </summary>
	[System.Serializable]
	public partial class LiteralRange : TSqlFragment
	{


		private Literal _from;

		/// <summary>
		/// First boundary of the range or the literal itself.
		/// </summary>
		public Literal From
		{
			get { return _from; }
			set { UpdateTokenInfo(value); _from = value; }
		}
		private Literal _to;

		/// <summary>
		/// Optional second boundary of the range.
		/// </summary>
		public Literal To
		{
			get { return _to; }
			set { UpdateTokenInfo(value); _to = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.From != null)
			{
				this.From.Accept(visitor);
			}

			if (this.To != null)
			{
				this.To.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for literals, variables, and global variables.
	/// </summary>
	[System.Serializable]
	public abstract partial class ValueExpression : PrimaryExpression
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a reference to a variable
	/// </summary>
	[System.Serializable]
	public partial class VariableReference : ValueExpression
	{


		private string _name;

		/// <summary>
		/// The variable name.
		/// </summary>
		public string Name
		{
			get { return _name; }
			set { _name = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an option value.
	/// </summary>
	[System.Serializable]
	public abstract partial class OptionValue : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents either an ON or OFF option value.
	/// </summary>
	[System.Serializable]
	public partial class OnOffOptionValue : OptionValue
	{


		private OptionState _optionState;

		/// <summary>
		/// Whether the option is ON or OFF.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the literal value of an option.
	/// </summary>
	[System.Serializable]
	public partial class LiteralOptionValue : OptionValue
	{


		private Literal _value;

		/// <summary>
		/// The literal value represented by this option.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a global variable expression
	/// </summary>
	[System.Serializable]
	public partial class GlobalVariableExpression : ValueExpression
	{


		private string _name;

		/// <summary>
		/// The global variable name.
		/// </summary>
		public string Name
		{
			get { return _name; }
			set { _name = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents either an Identifer or ValueExpression
	/// </summary>
	[System.Serializable]
	public partial class IdentifierOrValueExpression : TSqlFragment
	{


		private Identifier _identifier;

		/// <summary>
		/// Mutually exclusive with ValueExpression
		/// </summary>
		public Identifier Identifier
		{
			get { return _identifier; }
			set { UpdateTokenInfo(value); _identifier = value; }
		}
		private ValueExpression _valueExpression;

		/// <summary>
		/// Mutually exclusive with Identifier
		/// </summary>
		public ValueExpression ValueExpression
		{
			get { return _valueExpression; }
			set { UpdateTokenInfo(value); _valueExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Identifier != null)
			{
				this.Identifier.Accept(visitor);
			}

			if (this.ValueExpression != null)
			{
				this.ValueExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents either an Identifer or ScalarExpression
	/// </summary>
	[System.Serializable]
	public partial class IdentifierOrScalarExpression : TSqlFragment
	{


		private Identifier _identifier;

		/// <summary>
		/// Mutually exclusive with ScalarExpression
		/// </summary>
		public Identifier Identifier
		{
			get { return _identifier; }
			set { UpdateTokenInfo(value); _identifier = value; }
		}
		private ScalarExpression _scalarExpression;

		/// <summary>
		/// Mutually exclusive with Identifier
		/// </summary>
		public ScalarExpression ScalarExpression
		{
			get { return _scalarExpression; }
			set { UpdateTokenInfo(value); _scalarExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Identifier != null)
			{
				this.Identifier.Accept(visitor);
			}

			if (this.ScalarExpression != null)
			{
				this.ScalarExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents either a SchemaObjectName or ValueExpression
	/// </summary>
	[System.Serializable]
	public partial class SchemaObjectNameOrValueExpression : TSqlFragment
	{


		private SchemaObjectName _schemaObjectName;

		/// <summary>
		/// Mutually exclusive with ObjectValue
		/// </summary>
		public SchemaObjectName SchemaObjectName
		{
			get { return _schemaObjectName; }
			set { UpdateTokenInfo(value); _schemaObjectName = value; }
		}
		private ValueExpression _valueExpression;

		/// <summary>
		/// Mutually exclusive with ObjectName
		/// </summary>
		public ValueExpression ValueExpression
		{
			get { return _valueExpression; }
			set { UpdateTokenInfo(value); _valueExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SchemaObjectName != null)
			{
				this.SchemaObjectName.Accept(visitor);
			}

			if (this.ValueExpression != null)
			{
				this.ValueExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an expression enclosed in parentheses.
	/// </summary>
	[System.Serializable]
	public partial class ParenthesisExpression : PrimaryExpression
	{


		private ScalarExpression _expression;

		/// <summary>
		/// Represents the parenthesis expression.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// 
	/// This class represents a column.  Because of the ambiguity of Sql syntax, we can not
	/// distiguish columns from properties without having the Table and type definitions, even
	/// then it could be ambiguous.  So the column might have trailing properties in the Identifiers.
	/// 
	/// </summary>
	[System.Serializable]
	public partial class ColumnReferenceExpression : PrimaryExpression
	{


		private ColumnType _columnType;

		/// <summary>
		/// The type of the column.
		/// </summary>
		public ColumnType ColumnType
		{
			get { return _columnType; }
			set { _columnType = value; }
		}
		private MultiPartIdentifier _multiPartIdentifier;

		/// <summary>
		/// The multi-part name of the column.
		/// </summary>
		public MultiPartIdentifier MultiPartIdentifier
		{
			get { return _multiPartIdentifier; }
			set { UpdateTokenInfo(value); _multiPartIdentifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.MultiPartIdentifier != null)
			{
				this.MultiPartIdentifier.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the NEXT VALUE FOR expression.
	/// </summary>
	[System.Serializable]
	public partial class NextValueForExpression : PrimaryExpression
	{


		private SchemaObjectName _sequenceName;

		/// <summary>
		/// The name of the sequence.
		/// </summary>
		public SchemaObjectName SequenceName
		{
			get { return _sequenceName; }
			set { UpdateTokenInfo(value); _sequenceName = value; }
		}
		private OverClause _overClause;

		/// <summary>
		/// The over clause. Optional may be null.
		/// </summary>
		public OverClause OverClause
		{
			get { return _overClause; }
			set { UpdateTokenInfo(value); _overClause = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SequenceName != null)
			{
				this.SequenceName.Accept(visitor);
			}

			if (this.OverClause != null)
			{
				this.OverClause.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for all sequence statement objects
	/// </summary>
	[System.Serializable]
	public abstract partial class SequenceStatement : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The name of the sequence.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<SequenceOption> _sequenceOptions = new List<SequenceOption>();

		/// <summary>
		/// The sequence options. May have zero elements.
		/// </summary>
		public IList<SequenceOption> SequenceOptions
		{
			get { return _sequenceOptions; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.SequenceOptions.Count; i < count; ++i)
			{
				this.SequenceOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a sequence option.
	/// </summary>
	[System.Serializable]
	public partial class SequenceOption : TSqlFragment
	{


		private SequenceOptionKind _optionKind;

		/// <summary>
		/// The type of the option.
		/// </summary>
		public SequenceOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private Boolean _noValue;

		/// <summary>
		/// Whether or not the NO prefix is used.
		/// </summary>
		public Boolean NoValue
		{
			get { return _noValue; }
			set { _noValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents sequence Option that defines the data type
	/// </summary>
	[System.Serializable]
	public partial class DataTypeSequenceOption : SequenceOption
	{


		private DataTypeReference _dataType;

		/// <summary>
		/// The data type for the sequence.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents sequence option with a scalar expression.
	/// </summary>
	[System.Serializable]
	public partial class ScalarExpressionSequenceOption : SequenceOption
	{


		private ScalarExpression _optionValue;

		/// <summary>
		/// The expression.
		/// </summary>
		public ScalarExpression OptionValue
		{
			get { return _optionValue; }
			set { UpdateTokenInfo(value); _optionValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.OptionValue != null)
			{
				this.OptionValue.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents CREATE SEQUENCE statement
	/// </summary>
	[System.Serializable]
	public partial class CreateSequenceStatement : SequenceStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER SEQUENCE statement
	/// </summary>
	[System.Serializable]
	public partial class AlterSequenceStatement : SequenceStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP SEQUENCE statement
	/// </summary>
	[System.Serializable]
	public partial class DropSequenceStatement : DropObjectsStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for all Security Policy statement objects
	/// </summary>
	[System.Serializable]
	public abstract partial class SecurityPolicyStatement : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The name of the security policy.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private Boolean _notForReplication;

		/// <summary>
		/// Whether the security policy is not for replication.
		/// </summary>
		public Boolean NotForReplication
		{
			get { return _notForReplication; }
			set { _notForReplication = value; }
		}
		private List<SecurityPolicyOption> _securityPolicyOptions = new List<SecurityPolicyOption>();

		/// <summary>
		/// The security predicate options for this statement.
		/// </summary>
		public IList<SecurityPolicyOption> SecurityPolicyOptions
		{
			get { return _securityPolicyOptions; }
		}

		private List<SecurityPredicateAction> _securityPredicateActions = new List<SecurityPredicateAction>();

		/// <summary>
		/// The security predicate actions for this statement.
		/// </summary>
		public IList<SecurityPredicateAction> SecurityPredicateActions
		{
			get { return _securityPredicateActions; }
		}

		private SecurityPolicyActionType _actionType;

		/// <summary>
		/// The type of security policy action being taken.
		/// </summary>
		public SecurityPolicyActionType ActionType
		{
			get { return _actionType; }
			set { _actionType = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a security predicate add alter or drop action.
	/// </summary>
	[System.Serializable]
	public partial class SecurityPredicateAction : TSqlFragment
	{


		private SecurityPredicateActionType _actionType;

		/// <summary>
		/// The type of security predicate action being taken.
		/// </summary>
		public SecurityPredicateActionType ActionType
		{
			get { return _actionType; }
			set { _actionType = value; }
		}
		private SecurityPredicateType _securityPredicateType;

		/// <summary>
		/// The type of security predicate on which the action is being performed
		/// </summary>
		public SecurityPredicateType SecurityPredicateType
		{
			get { return _securityPredicateType; }
			set { _securityPredicateType = value; }
		}
		private FunctionCall _functionCall;

		/// <summary>
		/// The function call used by this predicate.
		/// </summary>
		public FunctionCall FunctionCall
		{
			get { return _functionCall; }
			set { UpdateTokenInfo(value); _functionCall = value; }
		}
		private SchemaObjectName _targetObjectName;

		/// <summary>
		/// Target object name of this prediate.
		/// </summary>
		public SchemaObjectName TargetObjectName
		{
			get { return _targetObjectName; }
			set { UpdateTokenInfo(value); _targetObjectName = value; }
		}
		private SecurityPredicateOperation _securityPredicateOperation;

		/// <summary>
		/// The security predicate operation
		/// </summary>
		public SecurityPredicateOperation SecurityPredicateOperation
		{
			get { return _securityPredicateOperation; }
			set { _securityPredicateOperation = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.FunctionCall != null)
			{
				this.FunctionCall.Accept(visitor);
			}

			if (this.TargetObjectName != null)
			{
				this.TargetObjectName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an option in a CREATE/ALTER SECURITY POLICY statement
	/// </summary>
	[System.Serializable]
	public partial class SecurityPolicyOption : TSqlFragment
	{


		private SecurityPolicyOptionKind _optionKind;

		/// <summary>
		/// The type of security policy option
		/// </summary>
		public SecurityPolicyOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private OptionState _optionState;

		/// <summary>
		/// The option state
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a CREATE SECURITY POLICY statement
	/// </summary>
	[System.Serializable]
	public partial class CreateSecurityPolicyStatement : SecurityPolicyStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an ALTER SECURITY POLICY statement
	/// </summary>
	[System.Serializable]
	public partial class AlterSecurityPolicyStatement : SecurityPolicyStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a DROP SECURITY POLICY statement
	/// </summary>
	[System.Serializable]
	public partial class DropSecurityPolicyStatement : DropObjectsStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a CREATE COLUMN MASTER KEY statement
	/// </summary>
	[System.Serializable]
	public partial class CreateColumnMasterKeyStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the column master key
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<ColumnMasterKeyParameter> _parameters = new List<ColumnMasterKeyParameter>();

		/// <summary>
		/// The collection of parameters required by create column master key
		/// </summary>
		public IList<ColumnMasterKeyParameter> Parameters
		{
			get { return _parameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Single parameter in CREATE COLUMN MASTER KEY statement
	/// </summary>
	[System.Serializable]
	public abstract partial class ColumnMasterKeyParameter : TSqlFragment
	{


		private ColumnMasterKeyParameterKind _parameterKind;

		/// <summary>
		/// The parameter kind.
		/// </summary>
		public ColumnMasterKeyParameterKind ParameterKind
		{
			get { return _parameterKind; }
			set { _parameterKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Key store provider parameter protecting the column master key
	/// </summary>
	[System.Serializable]
	public partial class ColumnMasterKeyStoreProviderNameParameter : ColumnMasterKeyParameter
	{


		private StringLiteral _name;

		/// <summary>
		/// Key store provider name.
		/// </summary>
		public StringLiteral Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Parameter representing path of the key in the key store provider
	/// </summary>
	[System.Serializable]
	public partial class ColumnMasterKeyPathParameter : ColumnMasterKeyParameter
	{


		private StringLiteral _path;

		/// <summary>
		/// Key path.
		/// </summary>
		public StringLiteral Path
		{
			get { return _path; }
			set { UpdateTokenInfo(value); _path = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Path != null)
			{
				this.Path.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Parameter representing enclave computation signature
	/// </summary>
	[System.Serializable]
	public partial class ColumnMasterKeyEnclaveComputationsParameter : ColumnMasterKeyParameter
	{


		private BinaryLiteral _signature;

		/// <summary>
		/// Signature
		/// </summary>
		public BinaryLiteral Signature
		{
			get { return _signature; }
			set { UpdateTokenInfo(value); _signature = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Signature != null)
			{
				this.Signature.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a DROP COLUMN MASTER KEY statement
	/// </summary>
	[System.Serializable]
	public partial class DropColumnMasterKeyStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for all Column Encryption Key statement objects
	/// </summary>
	[System.Serializable]
	public abstract partial class ColumnEncryptionKeyStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the column encryption key
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<ColumnEncryptionKeyValue> _columnEncryptionKeyValues = new List<ColumnEncryptionKeyValue>();

		/// <summary>
		/// The values for this column encryption key
		/// </summary>
		public IList<ColumnEncryptionKeyValue> ColumnEncryptionKeyValues
		{
			get { return _columnEncryptionKeyValues; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ColumnEncryptionKeyValues.Count; i < count; ++i)
			{
				this.ColumnEncryptionKeyValues[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a CREATE COLUMN ENCRYPTION KEY statement
	/// </summary>
	[System.Serializable]
	public partial class CreateColumnEncryptionKeyStatement : ColumnEncryptionKeyStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an ALTER COLUMN ENCRYPTION KEY statement
	/// </summary>
	[System.Serializable]
	public partial class AlterColumnEncryptionKeyStatement : ColumnEncryptionKeyStatement
	{


		private ColumnEncryptionKeyAlterType _alterType;

		/// <summary>
		/// Represents whether the alter is to add or remove a value.
		/// </summary>
		public ColumnEncryptionKeyAlterType AlterType
		{
			get { return _alterType; }
			set { _alterType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a DROP COLUMN ENCRYPTION KEY statement
	/// </summary>
	[System.Serializable]
	public partial class DropColumnEncryptionKeyStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Class representing the value of a column encryption key encrypted with column master key
	/// </summary>
	[System.Serializable]
	public partial class ColumnEncryptionKeyValue : TSqlFragment
	{


		private List<ColumnEncryptionKeyValueParameter> _parameters = new List<ColumnEncryptionKeyValueParameter>();

		/// <summary>
		/// Parameters of a column encryption key value
		/// </summary>
		public IList<ColumnEncryptionKeyValueParameter> Parameters
		{
			get { return _parameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Single parameter in of a column encryption key value
	/// </summary>
	[System.Serializable]
	public abstract partial class ColumnEncryptionKeyValueParameter : TSqlFragment
	{


		private ColumnEncryptionKeyValueParameterKind _parameterKind;

		/// <summary>
		/// The parameter kind.
		/// </summary>
		public ColumnEncryptionKeyValueParameterKind ParameterKind
		{
			get { return _parameterKind; }
			set { _parameterKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Parameter representing the column master key used to encrypt the column encrytion key
	/// </summary>
	[System.Serializable]
	public partial class ColumnMasterKeyNameParameter : ColumnEncryptionKeyValueParameter
	{


		private Identifier _name;

		/// <summary>
		/// Name of the column master key.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Parameter representing the encryption algorithm used to encrypt the column encryption key
	/// </summary>
	[System.Serializable]
	public partial class ColumnEncryptionAlgorithmNameParameter : ColumnEncryptionKeyValueParameter
	{


		private StringLiteral _algorithm;

		/// <summary>
		/// The algorithm name.
		/// </summary>
		public StringLiteral Algorithm
		{
			get { return _algorithm; }
			set { UpdateTokenInfo(value); _algorithm = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Algorithm != null)
			{
				this.Algorithm.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Parameter representing the encrypted value of the column encryption key
	/// </summary>
	[System.Serializable]
	public partial class EncryptedValueParameter : ColumnEncryptionKeyValueParameter
	{


		private BinaryLiteral _value;

		/// <summary>
		/// The encrypted value.
		/// </summary>
		public BinaryLiteral Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Base class for all external table statement objects.
	/// </summary>
	[System.Serializable]
	public abstract partial class ExternalTableStatement : TSqlStatement
	{


		private SchemaObjectName _schemaObjectName;

		/// <summary>
		/// The external table name.
		/// </summary>
		public SchemaObjectName SchemaObjectName
		{
			get { return _schemaObjectName; }
			set { UpdateTokenInfo(value); _schemaObjectName = value; }
		}
		private List<ExternalTableColumnDefinition> _columnDefinitions = new List<ExternalTableColumnDefinition>();

		/// <summary>
		/// External table column definition.
		/// </summary>
		public IList<ExternalTableColumnDefinition> ColumnDefinitions
		{
			get { return _columnDefinitions; }
		}

		private Identifier _dataSource;

		/// <summary>
		/// The external table data source identifier.
		/// </summary>
		public Identifier DataSource
		{
			get { return _dataSource; }
			set { UpdateTokenInfo(value); _dataSource = value; }
		}
		private List<ExternalTableOption> _externalTableOptions = new List<ExternalTableOption>();

		/// <summary>
		/// External table options. (Valid and required elements vary by the referenced data source type.)
		/// </summary>
		public IList<ExternalTableOption> ExternalTableOptions
		{
			get { return _externalTableOptions; }
		}

		private SelectStatement _selectStatement;

		/// <summary>
		/// Represents the query part of a CTAS statement.
		/// </summary>
		public SelectStatement SelectStatement
		{
			get { return _selectStatement; }
			set { UpdateTokenInfo(value); _selectStatement = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SchemaObjectName != null)
			{
				this.SchemaObjectName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ColumnDefinitions.Count; i < count; ++i)
			{
				this.ColumnDefinitions[i].Accept(visitor);
			}

			if (this.DataSource != null)
			{
				this.DataSource.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ExternalTableOptions.Count; i < count; ++i)
			{
				this.ExternalTableOptions[i].Accept(visitor);
			}

			if (this.SelectStatement != null)
			{
				this.SelectStatement.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A single external table option.
	/// </summary>
	[System.Serializable]
	public abstract partial class ExternalTableOption : TSqlFragment
	{


		private ExternalTableOptionKind _optionKind;

		/// <summary>
		/// The option kind.
		/// </summary>
		public ExternalTableOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// An external table with clause option that expects a literal or identifer as the value being set.
	/// </summary>
	[System.Serializable]
	public partial class ExternalTableLiteralOrIdentifierOption : ExternalTableOption
	{


		private IdentifierOrValueExpression _value;

		/// <summary>
		/// Represents any property value of type Literal or Identifier.
		/// </summary>
		public IdentifierOrValueExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The external table DISTRIBUTION option for external tables on shard map manager data sources.
	/// </summary>
	[System.Serializable]
	public partial class ExternalTableDistributionOption : ExternalTableOption
	{


		private ExternalTableDistributionPolicy _value;

		/// <summary>
		/// The external table distribution policy for external tables on shard map manager data sources.
		/// </summary>
		public ExternalTableDistributionPolicy Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The external table REJECT_TYPE option for external tables on HDFS data sources.
	/// </summary>
	[System.Serializable]
	public partial class ExternalTableRejectTypeOption : ExternalTableOption
	{


		private ExternalTableRejectType _value;

		/// <summary>
		/// The external table reject type value for external tables on HDFS data sources.
		/// </summary>
		public ExternalTableRejectType Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for external table distribution policies.
	/// </summary>
	[System.Serializable]
	public abstract partial class ExternalTableDistributionPolicy : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Representation of the REPLICATED option for an external table distribution policy.
	/// </summary>
	[System.Serializable]
	public partial class ExternalTableReplicatedDistributionPolicy : ExternalTableDistributionPolicy
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Representation of the ROUND_ROBIN option for an external table distribution policy.
	/// </summary>
	[System.Serializable]
	public partial class ExternalTableRoundRobinDistributionPolicy : ExternalTableDistributionPolicy
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Representation of the SHARDED option for an external table distribution policy.
	/// </summary>
	[System.Serializable]
	public partial class ExternalTableShardedDistributionPolicy : ExternalTableDistributionPolicy
	{


		private Identifier _shardingColumn;

		/// <summary>
		/// The column reference in the SHARDED option for an external table distribution policy.
		/// </summary>
		public Identifier ShardingColumn
		{
			get { return _shardingColumn; }
			set { _shardingColumn = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a CREATE EXTERNAL TABLE statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateExternalTableStatement : ExternalTableStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a DROP EXTERNAL TABLE statement.
	/// </summary>
	[System.Serializable]
	public partial class DropExternalTableStatement : DropObjectsStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for all external data source statement objects.
	/// </summary>
	[System.Serializable]
	public abstract partial class ExternalDataSourceStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The external data source name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private ExternalDataSourceType _dataSourceType;

		/// <summary>
		/// The external data source type.
		/// </summary>
		public ExternalDataSourceType DataSourceType
		{
			get { return _dataSourceType; }
			set { _dataSourceType = value; }
		}
		private Literal _location;

		/// <summary>
		/// The external data source location name.
		/// </summary>
		public Literal Location
		{
			get { return _location; }
			set { UpdateTokenInfo(value); _location = value; }
		}
		private ExternalDataSourcePushdownOption? _pushdownOption;

		/// <summary>
		/// The external data source pushdown option.
		/// </summary>
		public ExternalDataSourcePushdownOption? PushdownOption
		{
			get { return _pushdownOption; }
			set { _pushdownOption = value; }
		}
		private List<ExternalDataSourceOption> _externalDataSourceOptions = new List<ExternalDataSourceOption>();

		/// <summary>
		/// The external data source optional property collection.
		/// </summary>
		public IList<ExternalDataSourceOption> ExternalDataSourceOptions
		{
			get { return _externalDataSourceOptions; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Location != null)
			{
				this.Location.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ExternalDataSourceOptions.Count; i < count; ++i)
			{
				this.ExternalDataSourceOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// CREATE EXTERNAL DATA SOURCE statement optional property.
	/// </summary>
	[System.Serializable]
	public abstract partial class ExternalDataSourceOption : TSqlFragment
	{


		private ExternalDataSourceOptionKind _optionKind;

		/// <summary>
		/// The external data source optional property.
		/// </summary>
		public ExternalDataSourceOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents property of type Literal or Identifier.
	/// </summary>
	[System.Serializable]
	public partial class ExternalDataSourceLiteralOrIdentifierOption : ExternalDataSourceOption
	{


		private IdentifierOrValueExpression _value;

		/// <summary>
		/// Represents any property value of type Literal or Identifier.
		/// </summary>
		public IdentifierOrValueExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a CREATE EXTERNAL DATA SOURCE statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateExternalDataSourceStatement : ExternalDataSourceStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an ALTER EXTERNAL DATA SOURCE statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterExternalDataSourceStatement : ExternalDataSourceStatement
	{


		private ExternalDataSourcePushdownOption _previousPushDownOption;

		/// <summary>
		/// previous pushdwn option of the data source
		/// </summary>
		public ExternalDataSourcePushdownOption PreviousPushDownOption
		{
			get { return _previousPushDownOption; }
			set { _previousPushDownOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a DROP EXTERNAL DATA SOURCE statement.
	/// </summary>
	[System.Serializable]
	public partial class DropExternalDataSourceStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for all external stream statement objects.
	/// </summary>
	[System.Serializable]
	public abstract partial class ExternalStreamStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The external stream name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private Literal _location;

		/// <summary>
		/// The external stream location name.
		/// </summary>
		public Literal Location
		{
			get { return _location; }
			set { UpdateTokenInfo(value); _location = value; }
		}
		private Literal _inputOptions;

		/// <summary>
		/// The options as key-value pairs for services that are inputs to streaming queries
		/// </summary>
		public Literal InputOptions
		{
			get { return _inputOptions; }
			set { UpdateTokenInfo(value); _inputOptions = value; }
		}
		private Literal _outputOptions;

		/// <summary>
		/// The options as key-value pairs for services that are inputs to streaming queries
		/// </summary>
		public Literal OutputOptions
		{
			get { return _outputOptions; }
			set { UpdateTokenInfo(value); _outputOptions = value; }
		}
		private List<ExternalStreamOption> _externalStreamOptions = new List<ExternalStreamOption>();

		/// <summary>
		/// The external data source optional property collection.
		/// </summary>
		public IList<ExternalStreamOption> ExternalStreamOptions
		{
			get { return _externalStreamOptions; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Location != null)
			{
				this.Location.Accept(visitor);
			}

			if (this.InputOptions != null)
			{
				this.InputOptions.Accept(visitor);
			}

			if (this.OutputOptions != null)
			{
				this.OutputOptions.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ExternalStreamOptions.Count; i < count; ++i)
			{
				this.ExternalStreamOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// CREATE EXTERNAL STREAM statement optional property.
	/// </summary>
	[System.Serializable]
	public abstract partial class ExternalStreamOption : TSqlFragment
	{


		private ExternalStreamOptionKind _optionKind;

		/// <summary>
		/// The external data source optional property.
		/// </summary>
		public ExternalStreamOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents property of type Literal or Identifier.
	/// </summary>
	[System.Serializable]
	public partial class ExternalStreamLiteralOrIdentifierOption : ExternalStreamOption
	{


		private IdentifierOrValueExpression _value;

		/// <summary>
		/// Represents any property value of type Literal or Identifier.
		/// </summary>
		public IdentifierOrValueExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents an CREATE EXTERNAL STREAM statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateExternalStreamStatement : ExternalStreamStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a DROP EXTERNAL STREAM statement.
	/// </summary>
	[System.Serializable]
	public partial class DropExternalStreamStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for all external file format statement objects.
	/// </summary>
	[System.Serializable]
	public abstract partial class ExternalFileFormatStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The external file format name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private ExternalFileFormatType _formatType;

		/// <summary>
		/// The external file format type name.
		/// </summary>
		public ExternalFileFormatType FormatType
		{
			get { return _formatType; }
			set { _formatType = value; }
		}
		private List<ExternalFileFormatOption> _externalFileFormatOptions = new List<ExternalFileFormatOption>();

		/// <summary>
		/// The external file format optional property collection.
		/// </summary>
		public IList<ExternalFileFormatOption> ExternalFileFormatOptions
		{
			get { return _externalFileFormatOptions; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ExternalFileFormatOptions.Count; i < count; ++i)
			{
				this.ExternalFileFormatOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// CREATE EXTERNAL FILE FORMAT statement optional property.
	/// </summary>
	[System.Serializable]
	public abstract partial class ExternalFileFormatOption : TSqlFragment
	{


		private ExternalFileFormatOptionKind _optionKind;

		/// <summary>
		/// The external file format optional property.
		/// </summary>
		public ExternalFileFormatOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents any property value of type Literal.
	/// </summary>
	[System.Serializable]
	public partial class ExternalFileFormatLiteralOption : ExternalFileFormatOption
	{


		private Literal _value;

		/// <summary>
		/// The value for a property of type Literal.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the USE_DEFAULT_TYPE optional property value.
	/// </summary>
	[System.Serializable]
	public partial class ExternalFileFormatUseDefaultTypeOption : ExternalFileFormatOption
	{


		private ExternalFileFormatUseDefaultType _externalFileFormatUseDefaultType;

		/// <summary>
		/// The external file format use default type value.
		/// </summary>
		public ExternalFileFormatUseDefaultType ExternalFileFormatUseDefaultType
		{
			get { return _externalFileFormatUseDefaultType; }
			set { _externalFileFormatUseDefaultType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a list of external file format suboptions.
	/// </summary>
	[System.Serializable]
	public partial class ExternalFileFormatContainerOption : ExternalFileFormatOption
	{


		private List<ExternalFileFormatOption> _suboptions = new List<ExternalFileFormatOption>();

		/// <summary>
		/// The list of specified suboptions.
		/// </summary>
		public IList<ExternalFileFormatOption> Suboptions
		{
			get { return _suboptions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Suboptions.Count; i < count; ++i)
			{
				this.Suboptions[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a CREATE EXTERNAL FILE FORMAT statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateExternalFileFormatStatement : ExternalFileFormatStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a DROP EXTERNAL FILE FORMAT statement.
	/// </summary>
	[System.Serializable]
	public partial class DropExternalFileFormatStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for all external streaming job statement objects.
	/// </summary>
	[System.Serializable]
	public abstract partial class ExternalStreamingJobStatement : TSqlStatement
	{


		private StringLiteral _name;

		/// <summary>
		/// Name of the external streaming job.
		/// </summary>
		public StringLiteral Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private StringLiteral _statement;

		/// <summary>
		/// Transformation query for the external streaming job.
		/// </summary>
		public StringLiteral Statement
		{
			get { return _statement; }
			set { UpdateTokenInfo(value); _statement = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Statement != null)
			{
				this.Statement.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an EXEC sys.sp_create_streaming_job statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateExternalStreamingJobStatement : ExternalStreamingJobStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an EXEC sys.sp_drop_streaming_job statement.
	/// </summary>
	[System.Serializable]
	public partial class DropExternalStreamingJobStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents common parts in create and alter assembly statements.
	/// </summary>
	[System.Serializable]
	public abstract partial class AssemblyStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the assembly.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<ScalarExpression> _parameters = new List<ScalarExpression>();

		/// <summary>
		/// These represent either the client assembly specifier ot the assembly bits.
		/// </summary>
		public IList<ScalarExpression> Parameters
		{
			get { return _parameters; }
		}

		private List<AssemblyOption> _options = new List<AssemblyOption>();

		/// <summary>
		/// The collection of assembly options.
		/// </summary>
		public IList<AssemblyOption> Options
		{
			get { return _options; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the CREATE ASSEMBLY statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateAssemblyStatement : AssemblyStatement, IAuthorization
	{


		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AssemblyStatement)this).Name != null)
			{
				 ((AssemblyStatement)this).Name.Accept(visitor);
			}

			for (Int32 i = 0, count = ((AssemblyStatement)this).Parameters.Count; i < count; ++i)
			{
				 ((AssemblyStatement)this).Parameters[i].Accept(visitor);
			}

			for (Int32 i = 0, count = ((AssemblyStatement)this).Options.Count; i < count; ++i)
			{
				 ((AssemblyStatement)this).Options[i].Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the ALTER ASSEMBLY statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterAssemblyStatement : AssemblyStatement
	{


		private List<Literal> _dropFiles = new List<Literal>();

		/// <summary>
		/// Files specified in DROP FILE clause
		/// </summary>
		public IList<Literal> DropFiles
		{
			get { return _dropFiles; }
		}

		private bool _isDropAll;

		/// <summary>
		/// True, if DROP FILE ALL was specified, false otherwise
		/// </summary>
		public bool IsDropAll
		{
			get { return _isDropAll; }
			set { _isDropAll = value; }
		}
		private List<AddFileSpec> _addFiles = new List<AddFileSpec>();

		/// <summary>
		/// Files specified in ADD FILE FROM clause
		/// </summary>
		public IList<AddFileSpec> AddFiles
		{
			get { return _addFiles; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.DropFiles.Count; i < count; ++i)
			{
				this.DropFiles[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.AddFiles.Count; i < count; ++i)
			{
				this.AddFiles[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents an assembly option.
	/// </summary>
	[System.Serializable]
	public partial class AssemblyOption : TSqlFragment
	{


		private AssemblyOptionKind _optionKind;

		/// <summary>
		/// The option type.
		/// </summary>
		public AssemblyOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an on/off assembly option.
	/// </summary>
	[System.Serializable]
	public partial class OnOffAssemblyOption : AssemblyOption
	{


		private OptionState _optionState;

		/// <summary>
		/// The state.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the PERMISSION_SET assembly option.
	/// </summary>
	[System.Serializable]
	public partial class PermissionSetAssemblyOption : AssemblyOption
	{


		private PermissionSetOption _permissionSetOption;

		/// <summary>
		/// The permission set.
		/// </summary>
		public PermissionSetOption PermissionSetOption
		{
			get { return _permissionSetOption; }
			set { _permissionSetOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents single file in ADD FILE FROM clause in ALTER ASSEMBLY statement
	/// </summary>
	[System.Serializable]
	public partial class AddFileSpec : TSqlFragment
	{


		private ScalarExpression _file;

		/// <summary>
		/// Client file specifier or file bits
		/// </summary>
		public ScalarExpression File
		{
			get { return _file; }
			set { UpdateTokenInfo(value); _file = value; }
		}
		private Literal _fileName;

		/// <summary>
		/// Optional file name (string Literal)
		/// </summary>
		public Literal FileName
		{
			get { return _fileName; }
			set { UpdateTokenInfo(value); _fileName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.File != null)
			{
				this.File.Accept(visitor);
			}

			if (this.FileName != null)
			{
				this.FileName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the create xml schema collection statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateXmlSchemaCollectionStatement : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The name of collection, can be at most two part.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private ScalarExpression _expression;

		/// <summary>
		/// The expression that defines the collection.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the alter xml schema collection statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterXmlSchemaCollectionStatement : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The name of collection, can be at most two part.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private ScalarExpression _expression;

		/// <summary>
		/// The expression that will be added to the collection.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP XML SCHEMA COLLECTION statement.
	/// </summary>
	[System.Serializable]
	public partial class DropXmlSchemaCollectionStatement : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The name of the collection.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CLR assembly names.
	/// </summary>
	[System.Serializable]
	public partial class AssemblyName : TSqlFragment
	{


		private Identifier _name;

		/// <summary>
		/// The name of the assembly.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private Identifier _className;

		/// <summary>
		/// The class name, optional can be null.
		/// </summary>
		public Identifier ClassName
		{
			get { return _className; }
			set { UpdateTokenInfo(value); _className = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.ClassName != null)
			{
				this.ClassName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the alter table statement base class.
	/// </summary>
	[System.Serializable]
	public abstract partial class AlterTableStatement : TSqlStatement
	{


		private SchemaObjectName _schemaObjectName;

		/// <summary>
		/// The name of the type, this can be at most a two part name.
		/// </summary>
		public SchemaObjectName SchemaObjectName
		{
			get { return _schemaObjectName; }
			set { UpdateTokenInfo(value); _schemaObjectName = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SchemaObjectName != null)
			{
				this.SchemaObjectName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Split/Merge the partitions of a SQL DW table.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableAlterPartitionStatement : AlterTableStatement
	{


		private ScalarExpression _boundaryValue;

		/// <summary>
		/// The boundary value of the partition command.
		/// </summary>
		public ScalarExpression BoundaryValue
		{
			get { return _boundaryValue; }
			set { UpdateTokenInfo(value); _boundaryValue = value; }
		}
		private bool _isSplit;

		/// <summary>
		/// True if splitting range, false if merging ranges.
		/// </summary>
		public bool IsSplit
		{
			get { return _isSplit; }
			set { _isSplit = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterTableStatement)this).SchemaObjectName != null)
			{
				 ((AlterTableStatement)this).SchemaObjectName.Accept(visitor);
			}

			if (this.BoundaryValue != null)
			{
				this.BoundaryValue.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Rebuilds indicies on a table.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableRebuildStatement : AlterTableStatement
	{


		private PartitionSpecifier _partition;

		/// <summary>
		/// Optional partition number (or all).
		/// </summary>
		public PartitionSpecifier Partition
		{
			get { return _partition; }
			set { UpdateTokenInfo(value); _partition = value; }
		}
		private List<IndexOption> _indexOptions = new List<IndexOption>();

		/// <summary>
		/// The index options. Optional - may have zero elements.
		/// </summary>
		public IList<IndexOption> IndexOptions
		{
			get { return _indexOptions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterTableStatement)this).SchemaObjectName != null)
			{
				 ((AlterTableStatement)this).SchemaObjectName.Accept(visitor);
			}

			if (this.Partition != null)
			{
				this.Partition.Accept(visitor);
			}

			for (Int32 i = 0, count = this.IndexOptions.Count; i < count; ++i)
			{
				this.IndexOptions[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Modifies change tracking for a table.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableChangeTrackingModificationStatement : AlterTableStatement
	{


		private bool _isEnable;

		/// <summary>
		/// True if statement enables change tracking, false otherwise.
		/// </summary>
		public bool IsEnable
		{
			get { return _isEnable; }
			set { _isEnable = value; }
		}
		private OptionState _trackColumnsUpdated;

		/// <summary>
		/// Specifies whether the Database Engine tracks which change tracked columns were updated.
		/// </summary>
		public OptionState TrackColumnsUpdated
		{
			get { return _trackColumnsUpdated; }
			set { _trackColumnsUpdated = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterTableStatement)this).SchemaObjectName != null)
			{
				 ((AlterTableStatement)this).SchemaObjectName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Enables or disable filetable namespace on a table.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableFileTableNamespaceStatement : AlterTableStatement
	{


		private bool _isEnable;

		/// <summary>
		/// True if statement enables filetable namespace, false otherwise.
		/// </summary>
		public bool IsEnable
		{
			get { return _isEnable; }
			set { _isEnable = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterTableStatement)this).SchemaObjectName != null)
			{
				 ((AlterTableStatement)this).SchemaObjectName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Changes table options for a table.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableSetStatement : AlterTableStatement
	{


		private List<TableOption> _options = new List<TableOption>();

		/// <summary>
		/// Options to be set.
		/// </summary>
		public IList<TableOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterTableStatement)this).SchemaObjectName != null)
			{
				 ((AlterTableStatement)this).SchemaObjectName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Alters a table by adding a CLUSTER BY specification.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableAddClusterByStatement : AlterTableStatement
	{


		private ClusterByTableOption _clusterByOption;

		/// <summary>
		/// The CLUSTER BY option to be added to the table.
		/// </summary>
		public ClusterByTableOption ClusterByOption
		{
			get { return _clusterByOption; }
			set { UpdateTokenInfo(value); _clusterByOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterTableStatement)this).SchemaObjectName != null)
			{
				 ((AlterTableStatement)this).SchemaObjectName.Accept(visitor);
			}

			if (this.ClusterByOption != null)
			{
				this.ClusterByOption.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// A single table option.
	/// </summary>
	[System.Serializable]
	public abstract partial class TableOption : TSqlFragment
	{


		private TableOptionKind _optionKind;

		/// <summary>
		/// The option kind.
		/// </summary>
		public TableOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Lock escalation table option.
	/// </summary>
	[System.Serializable]
	public partial class LockEscalationTableOption : TableOption
	{


		private LockEscalationMethod _value;

		/// <summary>
		/// Specifies the allowed methods of lock escalation for a table.
		/// </summary>
		public LockEscalationMethod Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Filestream_on table option.
	/// </summary>
	[System.Serializable]
	public partial class FileStreamOnTableOption : TableOption
	{


		private IdentifierOrValueExpression _value;

		/// <summary>
		/// Property value - can be either identifier or string literal.
		/// </summary>
		public IdentifierOrValueExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// FILETABLE_DIRECTORY table option.
	/// </summary>
	[System.Serializable]
	public partial class FileTableDirectoryTableOption : TableOption
	{


		private Literal _value;

		/// <summary>
		/// The directory name.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// FILETABLE_COLLATE_FILENAME table option.
	/// </summary>
	[System.Serializable]
	public partial class FileTableCollateFileNameTableOption : TableOption
	{


		private Identifier _value;

		/// <summary>
		/// The collation.
		/// </summary>
		public Identifier Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME, FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME, or FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME table option.
	/// </summary>
	[System.Serializable]
	public partial class FileTableConstraintNameTableOption : TableOption
	{


		private Identifier _value;

		/// <summary>
		/// The constraint name.
		/// </summary>
		public Identifier Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// MEMORY_OPTIMIZED table option.
	/// </summary>
	[System.Serializable]
	public partial class MemoryOptimizedTableOption : TableOption
	{


		private OptionState _optionState;

		/// <summary>
		/// Option state
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// DURABILITY table option.
	/// </summary>
	[System.Serializable]
	public partial class DurabilityTableOption : TableOption
	{


		private DurabilityTableOptionKind _durabilityTableOptionKind;

		/// <summary>
		/// Specifies the durability options for a table.
		/// </summary>
		public DurabilityTableOptionKind DurabilityTableOptionKind
		{
			get { return _durabilityTableOptionKind; }
			set { _durabilityTableOptionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// REMOTE_DATA_ARCHIVE table option for create and alter.
	/// </summary>
	[System.Serializable]
	public partial class RemoteDataArchiveTableOption : TableOption
	{


		private RdaTableOption _rdaTableOption;

		/// <summary>
		/// RDA state for the table.
		/// </summary>
		public RdaTableOption RdaTableOption
		{
			get { return _rdaTableOption; }
			set { _rdaTableOption = value; }
		}
		private MigrationState _migrationState;

		/// <summary>
		/// Option state which specifies if migration is disabled or inbound or outbound for a table.
		/// </summary>
		public MigrationState MigrationState
		{
			get { return _migrationState; }
			set { _migrationState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// REMOTE_DATA_ARCHIVE table option for alter.
	/// </summary>
	[System.Serializable]
	public partial class RemoteDataArchiveAlterTableOption : TableOption
	{


		private RdaTableOption _rdaTableOption;

		/// <summary>
		/// RDA state for the table.
		/// </summary>
		public RdaTableOption RdaTableOption
		{
			get { return _rdaTableOption; }
			set { _rdaTableOption = value; }
		}
		private MigrationState _migrationState;

		/// <summary>
		/// The migration state on this table.
		/// </summary>
		public MigrationState MigrationState
		{
			get { return _migrationState; }
			set { _migrationState = value; }
		}
		private bool _isMigrationStateSpecified;

		/// <summary>
		/// True if a migration state was specified, false otherwise.
		/// </summary>
		public bool IsMigrationStateSpecified
		{
			get { return _isMigrationStateSpecified; }
			set { _isMigrationStateSpecified = value; }
		}
		private bool _isFilterPredicateSpecified;

		/// <summary>
		/// True if a filter predicate was specified (even if set to null), false otherwise.
		/// </summary>
		public bool IsFilterPredicateSpecified
		{
			get { return _isFilterPredicateSpecified; }
			set { _isFilterPredicateSpecified = value; }
		}
		private FunctionCall _filterPredicate;

		/// <summary>
		/// Stretch Migration Filter Predicate to decide which rows in a table get migrated.
		/// </summary>
		public FunctionCall FilterPredicate
		{
			get { return _filterPredicate; }
			set { UpdateTokenInfo(value); _filterPredicate = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FilterPredicate != null)
			{
				this.FilterPredicate.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// REMOTE_DATA_ARCHIVE create / alter database options.
	/// </summary>
	[System.Serializable]
	public partial class RemoteDataArchiveDatabaseOption : DatabaseOption
	{


		private OptionState _optionState;

		/// <summary>
		/// Option state for the datbase.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}
		private List<RemoteDataArchiveDatabaseSetting> _settings = new List<RemoteDataArchiveDatabaseSetting>();

		/// <summary>
		/// Options to be set.
		/// </summary>
		public IList<RemoteDataArchiveDatabaseSetting> Settings
		{
			get { return _settings; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Settings.Count; i < count; ++i)
			{
				this.Settings[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// REMOTE_DATA_ARCHIVE DB-level settings
	/// </summary>
	[System.Serializable]
	public abstract partial class RemoteDataArchiveDatabaseSetting : TSqlFragment
	{


		private RemoteDataArchiveDatabaseSettingKind _settingKind;

		/// <summary>
		/// Indicates the type of setting
		/// </summary>
		public RemoteDataArchiveDatabaseSettingKind SettingKind
		{
			get { return _settingKind; }
			set { _settingKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// SERVER setting for REMOTE_DATA_ARCHIVE
	/// </summary>
	[System.Serializable]
	public partial class RemoteDataArchiveDbServerSetting : RemoteDataArchiveDatabaseSetting
	{


		private StringLiteral _server;

		/// <summary>
		/// Server name
		/// </summary>
		public StringLiteral Server
		{
			get { return _server; }
			set { _server = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// CREDENTIAL setting for REMOTE_DATA_ARCHIVE
	/// </summary>
	[System.Serializable]
	public partial class RemoteDataArchiveDbCredentialSetting : RemoteDataArchiveDatabaseSetting
	{


		private Identifier _credential;

		/// <summary>
		/// Credential name
		/// </summary>
		public Identifier Credential
		{
			get { return _credential; }
			set { _credential = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// FEDERATED_SERVICE_ACCOUNT setting for REMOTE_DATA_ARCHIVE
	/// </summary>
	[System.Serializable]
	public partial class RemoteDataArchiveDbFederatedServiceAccountSetting : RemoteDataArchiveDatabaseSetting
	{


		private bool _isOn;

		/// <summary>
		/// Indicates if a federated service account should be used
		/// </summary>
		public bool IsOn
		{
			get { return _isOn; }
			set { _isOn = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Definition of retention period for system versioned temporal table and data retention table option.
	/// </summary>
	[System.Serializable]
	public partial class RetentionPeriodDefinition : TSqlFragment
	{


		private IntegerLiteral _duration;

		/// <summary>
		/// Duration of retention period in given units. Unused if the period is set to INFINITY.
		/// </summary>
		public IntegerLiteral Duration
		{
			get { return _duration; }
			set { _duration = value; }
		}
		private TemporalRetentionPeriodUnit _units;

		/// <summary>
		/// Duration of retention period in given units. Unused if the period is set to INFINITY.
		/// </summary>
		public TemporalRetentionPeriodUnit Units
		{
			get { return _units; }
			set { _units = value; }
		}
		private bool _isInfinity;

		/// <summary>
		/// Is this retention policy set to INFINITY?
		/// </summary>
		public bool IsInfinity
		{
			get { return _isInfinity; }
			set { _isInfinity = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// SYSTEM_VERSIONING table option.
	/// </summary>
	[System.Serializable]
	public partial class SystemVersioningTableOption : TableOption
	{


		private OptionState _optionState;

		/// <summary>
		/// Option state
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}
		private OptionState _consistencyCheckEnabled;

		/// <summary>
		/// Option state
		/// </summary>
		public OptionState ConsistencyCheckEnabled
		{
			get { return _consistencyCheckEnabled; }
			set { _consistencyCheckEnabled = value; }
		}
		private SchemaObjectName _historyTable;

		/// <summary>
		/// The name of the history table.
		/// </summary>
		public SchemaObjectName HistoryTable
		{
			get { return _historyTable; }
			set { UpdateTokenInfo(value); _historyTable = value; }
		}
		private RetentionPeriodDefinition _retentionPeriod;

		/// <summary>
		/// History table retention period definition.
		/// </summary>
		public RetentionPeriodDefinition RetentionPeriod
		{
			get { return _retentionPeriod; }
			set { UpdateTokenInfo(value); _retentionPeriod = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.HistoryTable != null)
			{
				this.HistoryTable.Accept(visitor);
			}

			if (this.RetentionPeriod != null)
			{
				this.RetentionPeriod.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// LEDGER table option.
	/// </summary>
	[System.Serializable]
	public partial class LedgerTableOption : TableOption
	{


		private OptionState _optionState;

		/// <summary>
		/// Option state
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}
		private OptionState _appendOnly;

		/// <summary>
		/// Append Only
		/// </summary>
		public OptionState AppendOnly
		{
			get { return _appendOnly; }
			set { _appendOnly = value; }
		}
		private LedgerViewOption _ledgerViewOption;

		/// <summary>
		/// Ledger View Option
		/// </summary>
		public LedgerViewOption LedgerViewOption
		{
			get { return _ledgerViewOption; }
			set { UpdateTokenInfo(value); _ledgerViewOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.LedgerViewOption != null)
			{
				this.LedgerViewOption.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// LEDGER View option.
	/// </summary>
	[System.Serializable]
	public partial class LedgerViewOption : TableOption
	{


		private SchemaObjectName _viewName;

		/// <summary>
		/// Ledger View Name
		/// </summary>
		public SchemaObjectName ViewName
		{
			get { return _viewName; }
			set { UpdateTokenInfo(value); _viewName = value; }
		}
		private Identifier _transactionIdColumnName;

		/// <summary>
		/// Transaction Id Column Name
		/// </summary>
		public Identifier TransactionIdColumnName
		{
			get { return _transactionIdColumnName; }
			set { UpdateTokenInfo(value); _transactionIdColumnName = value; }
		}
		private Identifier _sequenceNumberColumnName;

		/// <summary>
		/// Sequence Number Column Name
		/// </summary>
		public Identifier SequenceNumberColumnName
		{
			get { return _sequenceNumberColumnName; }
			set { UpdateTokenInfo(value); _sequenceNumberColumnName = value; }
		}
		private Identifier _operationTypeColumnName;

		/// <summary>
		/// Operation Type Column Name
		/// </summary>
		public Identifier OperationTypeColumnName
		{
			get { return _operationTypeColumnName; }
			set { UpdateTokenInfo(value); _operationTypeColumnName = value; }
		}
		private Identifier _operationTypeDescColumnName;

		/// <summary>
		/// Operation Type Desc Column Name
		/// </summary>
		public Identifier OperationTypeDescColumnName
		{
			get { return _operationTypeDescColumnName; }
			set { UpdateTokenInfo(value); _operationTypeDescColumnName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.ViewName != null)
			{
				this.ViewName.Accept(visitor);
			}

			if (this.TransactionIdColumnName != null)
			{
				this.TransactionIdColumnName.Accept(visitor);
			}

			if (this.SequenceNumberColumnName != null)
			{
				this.SequenceNumberColumnName.Accept(visitor);
			}

			if (this.OperationTypeColumnName != null)
			{
				this.OperationTypeColumnName.Accept(visitor);
			}

			if (this.OperationTypeDescColumnName != null)
			{
				this.OperationTypeDescColumnName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// DATA_RETENTION table option.
	/// </summary>
	[System.Serializable]
	public partial class DataRetentionTableOption : TableOption
	{


		private OptionState _optionState;

		/// <summary>
		/// Option state
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}
		private Identifier _filterColumn;

		/// <summary>
		/// Filter Column Name
		/// </summary>
		public Identifier FilterColumn
		{
			get { return _filterColumn; }
			set { UpdateTokenInfo(value); _filterColumn = value; }
		}
		private RetentionPeriodDefinition _retentionPeriod;

		/// <summary>
		/// Table retention period definition
		/// </summary>
		public RetentionPeriodDefinition RetentionPeriod
		{
			get { return _retentionPeriod; }
			set { UpdateTokenInfo(value); _retentionPeriod = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FilterColumn != null)
			{
				this.FilterColumn.Accept(visitor);
			}

			if (this.RetentionPeriod != null)
			{
				this.RetentionPeriod.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Add table element specialization of Alter Table statement. Has column and constraint definitions.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableAddTableElementStatement : AlterTableStatement
	{


		private ConstraintEnforcement _existingRowsCheckEnforcement;

		/// <summary>
		/// 
		/// Specifies whether the data in the table is or is not validated against a newly added
		/// or re-enabled FOREIGN KEY or CHECK constraint.
		/// Defines which one of WITH CHECK or WITH NOCHECK were used.
		/// Check is the default for this class(if nothing was explicitly mentioned),
		/// since these are new constraints (Books online).
		/// 
		/// </summary>
		public ConstraintEnforcement ExistingRowsCheckEnforcement
		{
			get { return _existingRowsCheckEnforcement; }
			set { _existingRowsCheckEnforcement = value; }
		}
		private TableDefinition _definition;

		/// <summary>
		/// The table definition containing the column and constraint definitions.
		/// </summary>
		public TableDefinition Definition
		{
			get { return _definition; }
			set { UpdateTokenInfo(value); _definition = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterTableStatement)this).SchemaObjectName != null)
			{
				 ((AlterTableStatement)this).SchemaObjectName.Accept(visitor);
			}

			if (this.Definition != null)
			{
				this.Definition.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Defines modifications to a table constraint.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableConstraintModificationStatement : AlterTableStatement
	{


		private ConstraintEnforcement _existingRowsCheckEnforcement;

		/// <summary>
		/// 
		/// Specifies whether the data in the table is or is not validated against a
		/// newly added or re-enabled FOREIGN KEY or CHECK constraint.
		/// Defines which one of WITH CHECK or WITH NOCHECK were used.
		/// No Check is the default for this class(if nothing was explicitly mentioned),
		/// since these are reenabled constraints (Books online).
		/// 
		/// </summary>
		public ConstraintEnforcement ExistingRowsCheckEnforcement
		{
			get { return _existingRowsCheckEnforcement; }
			set { _existingRowsCheckEnforcement = value; }
		}
		private ConstraintEnforcement _constraintEnforcement;

		/// <summary>
		/// 
		/// Specifies that constraint is enabled or disabled. When disabled,
		/// future inserts or updates to the column are not validated against the
		/// constraint conditions.
		/// 
		/// </summary>
		public ConstraintEnforcement ConstraintEnforcement
		{
			get { return _constraintEnforcement; }
			set { _constraintEnforcement = value; }
		}
		private bool _all;

		/// <summary>
		/// True if the modification is for all constraints.
		/// </summary>
		public bool All
		{
			get { return _all; }
			set { _all = value; }
		}
		private List<Identifier> _constraintNames = new List<Identifier>();

		/// <summary>
		/// Names of constraints to be modified. Will have zero elements if All is true.
		/// </summary>
		public IList<Identifier> ConstraintNames
		{
			get { return _constraintNames; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterTableStatement)this).SchemaObjectName != null)
			{
				 ((AlterTableStatement)this).SchemaObjectName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ConstraintNames.Count; i < count; ++i)
			{
				this.ConstraintNames[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Switch specialization of Alter Table statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableSwitchStatement : AlterTableStatement
	{


		private ScalarExpression _sourcePartitionNumber;

		/// <summary>
		/// Represents the source partition number. Optional may be null.
		/// </summary>
		public ScalarExpression SourcePartitionNumber
		{
			get { return _sourcePartitionNumber; }
			set { UpdateTokenInfo(value); _sourcePartitionNumber = value; }
		}
		private ScalarExpression _targetPartitionNumber;

		/// <summary>
		/// Represents the target partition number. Optional may be null.
		/// </summary>
		public ScalarExpression TargetPartitionNumber
		{
			get { return _targetPartitionNumber; }
			set { UpdateTokenInfo(value); _targetPartitionNumber = value; }
		}
		private SchemaObjectName _targetTable;

		/// <summary>
		/// The name of the target table.
		/// </summary>
		public SchemaObjectName TargetTable
		{
			get { return _targetTable; }
			set { UpdateTokenInfo(value); _targetTable = value; }
		}
		private List<TableSwitchOption> _options = new List<TableSwitchOption>();

		/// <summary>
		/// The collection of alter table switch options.
		/// </summary>
		public IList<TableSwitchOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterTableStatement)this).SchemaObjectName != null)
			{
				 ((AlterTableStatement)this).SchemaObjectName.Accept(visitor);
			}

			if (this.SourcePartitionNumber != null)
			{
				this.SourcePartitionNumber.Accept(visitor);
			}

			if (this.TargetPartitionNumber != null)
			{
				this.TargetPartitionNumber.Accept(visitor);
			}

			if (this.TargetTable != null)
			{
				this.TargetTable.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the alter table switch option.
	/// </summary>
	[System.Serializable]
	public abstract partial class TableSwitchOption : TSqlFragment
	{


		private TableSwitchOptionKind _optionKind;

		/// <summary>
		/// The type of the option.
		/// </summary>
		public TableSwitchOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the low priority lock wait option for alter table switch statement.
	/// </summary>
	[System.Serializable]
	public partial class LowPriorityLockWaitTableSwitchOption : TableSwitchOption
	{


		private List<LowPriorityLockWaitOption> _options = new List<LowPriorityLockWaitOption>();

		/// <summary>
		/// The low priority lock wait options.
		/// </summary>
		public IList<LowPriorityLockWaitOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the truncate target table option for alter table switch statement.
	/// </summary>
	[System.Serializable]
	public partial class TruncateTargetTableSwitchOption : TableSwitchOption
	{


		private bool _truncateTarget;

		/// <summary>
		/// Flag that indicates whether to truncate the target partition or table before performing the switch.
		/// </summary>
		public bool TruncateTarget
		{
			get { return _truncateTarget; }
			set { _truncateTarget = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The abstract base class for drop clustered constraints.
	/// </summary>
	[System.Serializable]
	public abstract partial class DropClusteredConstraintOption : TSqlFragment
	{


		private DropClusteredConstraintOptionKind _optionKind;

		/// <summary>
		/// The type of the option.
		/// </summary>
		public DropClusteredConstraintOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The abstract base class for drop clustered constraints.
	/// </summary>
	[System.Serializable]
	public partial class DropClusteredConstraintStateOption : DropClusteredConstraintOption
	{


		private OptionState _optionState;

		/// <summary>
		/// The state.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The drop clustered constraint option with value specified
	/// </summary>
	[System.Serializable]
	public partial class DropClusteredConstraintValueOption : DropClusteredConstraintOption
	{


		private Literal _optionValue;

		/// <summary>
		/// The option value.
		/// </summary>
		public Literal OptionValue
		{
			get { return _optionValue; }
			set { UpdateTokenInfo(value); _optionValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.OptionValue != null)
			{
				this.OptionValue.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The drop clustered constraint move option
	/// </summary>
	[System.Serializable]
	public partial class DropClusteredConstraintMoveOption : DropClusteredConstraintOption
	{


		private FileGroupOrPartitionScheme _optionValue;

		/// <summary>
		/// The option value.
		/// </summary>
		public FileGroupOrPartitionScheme OptionValue
		{
			get { return _optionValue; }
			set { UpdateTokenInfo(value); _optionValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.OptionValue != null)
			{
				this.OptionValue.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The drop clustered constraint wait at low priority lock option
	/// </summary>
	[System.Serializable]
	public partial class DropClusteredConstraintWaitAtLowPriorityLockOption : DropClusteredConstraintOption
	{


		private List<LowPriorityLockWaitOption> _options = new List<LowPriorityLockWaitOption>();

		/// <summary>
		/// The low priority lock wait options.
		/// </summary>
		public IList<LowPriorityLockWaitOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents an individual element that can be used in alter table drop statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableDropTableElement : TSqlFragment
	{


		private TableElementType _tableElementType;

		/// <summary>
		/// The type of the table element.
		/// </summary>
		public TableElementType TableElementType
		{
			get { return _tableElementType; }
			set { _tableElementType = value; }
		}
		private Identifier _name;

		/// <summary>
		/// Names of the table element.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<DropClusteredConstraintOption> _dropClusteredConstraintOptions = new List<DropClusteredConstraintOption>();

		/// <summary>
		/// The drop clustered constraint options. May have zero elements.
		/// </summary>
		public IList<DropClusteredConstraintOption> DropClusteredConstraintOptions
		{
			get { return _dropClusteredConstraintOptions; }
		}

		private bool _isIfExists;

		/// <summary>
		/// True when IF EXISTS construct is used.
		/// </summary>
		public bool IsIfExists
		{
			get { return _isIfExists; }
			set { _isIfExists = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.DropClusteredConstraintOptions.Count; i < count; ++i)
			{
				this.DropClusteredConstraintOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Drop table element specialization of Alter Table statement. Has names of columns and constraints to be dropped.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableDropTableElementStatement : AlterTableStatement
	{


		private List<AlterTableDropTableElement> _alterTableDropTableElements = new List<AlterTableDropTableElement>();

		/// <summary>
		/// The dropped table elements.
		/// </summary>
		public IList<AlterTableDropTableElement> AlterTableDropTableElements
		{
			get { return _alterTableDropTableElements; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterTableStatement)this).SchemaObjectName != null)
			{
				 ((AlterTableStatement)this).SchemaObjectName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.AlterTableDropTableElements.Count; i < count; ++i)
			{
				this.AlterTableDropTableElements[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Defines the modifications to a Trigger on a table. Triggers can be enabled or disabled.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableTriggerModificationStatement : AlterTableStatement
	{


		private TriggerEnforcement _triggerEnforcement;

		/// <summary>
		/// Defines the new enforcement option on the trigger.
		/// </summary>
		public TriggerEnforcement TriggerEnforcement
		{
			get { return _triggerEnforcement; }
			set { _triggerEnforcement = value; }
		}
		private bool _all;

		/// <summary>
		/// True if the modification is for all triggers.
		/// </summary>
		public bool All
		{
			get { return _all; }
			set { _all = value; }
		}
		private List<Identifier> _triggerNames = new List<Identifier>();

		/// <summary>
		/// Names of triggers to be modified.
		/// </summary>
		public IList<Identifier> TriggerNames
		{
			get { return _triggerNames; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterTableStatement)this).SchemaObjectName != null)
			{
				 ((AlterTableStatement)this).SchemaObjectName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.TriggerNames.Count; i < count; ++i)
			{
				this.TriggerNames[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Defines the modifications to triggers. Triggers can be enabled or disabled.
	/// </summary>
	[System.Serializable]
	public partial class EnableDisableTriggerStatement : TSqlStatement
	{


		private TriggerEnforcement _triggerEnforcement;

		/// <summary>
		/// Defines the new enforcement option on the trigger.
		/// </summary>
		public TriggerEnforcement TriggerEnforcement
		{
			get { return _triggerEnforcement; }
			set { _triggerEnforcement = value; }
		}
		private bool _all;

		/// <summary>
		/// True if the modification is for all triggers.
		/// </summary>
		public bool All
		{
			get { return _all; }
			set { _all = value; }
		}
		private List<SchemaObjectName> _triggerNames = new List<SchemaObjectName>();

		/// <summary>
		/// Triggers to be modified.
		/// </summary>
		public IList<SchemaObjectName> TriggerNames
		{
			get { return _triggerNames; }
		}

		private TriggerObject _triggerObject;

		/// <summary>
		/// The target.
		/// </summary>
		public TriggerObject TriggerObject
		{
			get { return _triggerObject; }
			set { UpdateTokenInfo(value); _triggerObject = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.TriggerNames.Count; i < count; ++i)
			{
				this.TriggerNames[i].Accept(visitor);
			}

			if (this.TriggerObject != null)
			{
				this.TriggerObject.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Defines the try catch statement.
	/// </summary>
	[System.Serializable]
	public partial class TryCatchStatement : TSqlStatement
	{


		private StatementList _tryStatements;

		/// <summary>
		/// The try statements.
		/// </summary>
		public StatementList TryStatements
		{
			get { return _tryStatements; }
			set { UpdateTokenInfo(value); _tryStatements = value; }
		}
		private StatementList _catchStatements;

		/// <summary>
		/// The catch statements. May have zero elements.
		/// </summary>
		public StatementList CatchStatements
		{
			get { return _catchStatements; }
			set { UpdateTokenInfo(value); _catchStatements = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.TryStatements != null)
			{
				this.TryStatements.Accept(visitor);
			}

			if (this.CatchStatements != null)
			{
				this.CatchStatements.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the create type statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class CreateTypeStatement : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The name of the type, this can be at most a two part name.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the create type statement for user defined types, the one that derive from CLR types.
	/// </summary>
	[System.Serializable]
	public partial class CreateTypeUdtStatement : CreateTypeStatement
	{


		private AssemblyName _assemblyName;

		/// <summary>
		/// The assembly name.
		/// </summary>
		public AssemblyName AssemblyName
		{
			get { return _assemblyName; }
			set { UpdateTokenInfo(value); _assemblyName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((CreateTypeStatement)this).Name != null)
			{
				 ((CreateTypeStatement)this).Name.Accept(visitor);
			}

			if (this.AssemblyName != null)
			{
				this.AssemblyName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the create type statement for user defined data types, the one that derive from Sql types.
	/// </summary>
	[System.Serializable]
	public partial class CreateTypeUddtStatement : CreateTypeStatement
	{


		private DataTypeReference _dataType;

		/// <summary>
		/// The data type.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}
		private NullableConstraintDefinition _nullableConstraint;

		/// <summary>
		/// The nullable constraint, optional can be null.
		/// </summary>
		public NullableConstraintDefinition NullableConstraint
		{
			get { return _nullableConstraint; }
			set { UpdateTokenInfo(value); _nullableConstraint = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((CreateTypeStatement)this).Name != null)
			{
				 ((CreateTypeStatement)this).Name.Accept(visitor);
			}

			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			if (this.NullableConstraint != null)
			{
				this.NullableConstraint.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the create synonym statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateSynonymStatement : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The name of the synonym, this can be at most a two part name.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private SchemaObjectName _forName;

		/// <summary>
		/// The name of the object the synonym is for, can be a four part name.
		/// </summary>
		public SchemaObjectName ForName
		{
			get { return _forName; }
			set { UpdateTokenInfo(value); _forName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.ForName != null)
			{
				this.ForName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the execute as clause.
	/// </summary>
	[System.Serializable]
	public partial class ExecuteAsClause : TSqlFragment
	{


		private ExecuteAsOption _executeAsOption;

		/// <summary>
		/// The option.
		/// </summary>
		public ExecuteAsOption ExecuteAsOption
		{
			get { return _executeAsOption; }
			set { _executeAsOption = value; }
		}
		private Literal _literal;

		/// <summary>
		/// If the option is String, this bears the value of the string, otherwise null.
		/// </summary>
		public Literal Literal
		{
			get { return _literal; }
			set { UpdateTokenInfo(value); _literal = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Literal != null)
			{
				this.Literal.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the queue option.
	/// </summary>
	[System.Serializable]
	public partial class QueueOption : TSqlFragment
	{


		private QueueOptionKind _optionKind;

		/// <summary>
		/// The type of the option.
		/// </summary>
		public QueueOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the base for queue option that has a state.
	/// </summary>
	[System.Serializable]
	public partial class QueueStateOption : QueueOption
	{


		private OptionState _optionState;

		/// <summary>
		/// The state.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The queue option for procedure.
	/// </summary>
	[System.Serializable]
	public partial class QueueProcedureOption : QueueOption
	{


		private SchemaObjectName _optionValue;

		/// <summary>
		/// The name of the procedure.
		/// </summary>
		public SchemaObjectName OptionValue
		{
			get { return _optionValue; }
			set { UpdateTokenInfo(value); _optionValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.OptionValue != null)
			{
				this.OptionValue.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The queue option with a value.
	/// </summary>
	[System.Serializable]
	public partial class QueueValueOption : QueueOption
	{


		private ValueExpression _optionValue;

		/// <summary>
		/// The value.
		/// </summary>
		public ValueExpression OptionValue
		{
			get { return _optionValue; }
			set { UpdateTokenInfo(value); _optionValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.OptionValue != null)
			{
				this.OptionValue.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The queue option for execute as.
	/// </summary>
	[System.Serializable]
	public partial class QueueExecuteAsOption : QueueOption
	{


		private ExecuteAsClause _optionValue;

		/// <summary>
		/// The execute as clause.
		/// </summary>
		public ExecuteAsClause OptionValue
		{
			get { return _optionValue; }
			set { UpdateTokenInfo(value); _optionValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.OptionValue != null)
			{
				this.OptionValue.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the for route option.
	/// </summary>
	[System.Serializable]
	public partial class RouteOption : TSqlFragment
	{


		private RouteOptionKind _optionKind;

		/// <summary>
		/// The type of the option.
		/// </summary>
		public RouteOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private Literal _literal;

		/// <summary>
		/// Can be of type string or integer.
		/// </summary>
		public Literal Literal
		{
			get { return _literal; }
			set { UpdateTokenInfo(value); _literal = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Literal != null)
			{
				this.Literal.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the base for route statements.
	/// </summary>
	[System.Serializable]
	public abstract partial class RouteStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the queue.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<RouteOption> _routeOptions = new List<RouteOption>();

		/// <summary>
		/// The route options.
		/// </summary>
		public IList<RouteOption> RouteOptions
		{
			get { return _routeOptions; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.RouteOptions.Count; i < count; ++i)
			{
				this.RouteOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents alter route statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterRouteStatement : RouteStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents create route statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateRouteStatement : RouteStatement, IAuthorization
	{


		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((RouteStatement)this).Name != null)
			{
				 ((RouteStatement)this).Name.Accept(visitor);
			}

			for (Int32 i = 0, count = ((RouteStatement)this).RouteOptions.Count; i < count; ++i)
			{
				 ((RouteStatement)this).RouteOptions[i].Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the base for queue statements.
	/// </summary>
	[System.Serializable]
	public abstract partial class QueueStatement : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The name of the queue.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<QueueOption> _queueOptions = new List<QueueOption>();

		/// <summary>
		/// The queue options. May have zero elements in CreateQueueStatement.
		/// </summary>
		public IList<QueueOption> QueueOptions
		{
			get { return _queueOptions; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.QueueOptions.Count; i < count; ++i)
			{
				this.QueueOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents alter queue statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterQueueStatement : QueueStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents create queue statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateQueueStatement : QueueStatement
	{


		private IdentifierOrValueExpression _onFileGroup;

		/// <summary>
		/// The name of the filegroup, can be a Literal of type string or an Identifier. Optional may be null.
		/// </summary>
		public IdentifierOrValueExpression OnFileGroup
		{
			get { return _onFileGroup; }
			set { UpdateTokenInfo(value); _onFileGroup = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((QueueStatement)this).Name != null)
			{
				 ((QueueStatement)this).Name.Accept(visitor);
			}

			for (Int32 i = 0, count = ((QueueStatement)this).QueueOptions.Count; i < count; ++i)
			{
				 ((QueueStatement)this).QueueOptions[i].Accept(visitor);
			}

			if (this.OnFileGroup != null)
			{
				this.OnFileGroup.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the base for index definitions.
	/// </summary>
	[System.Serializable]
	public partial class IndexDefinition : TSqlStatement, IFileStreamSpecifier
	{


		private Identifier _name;

		/// <summary>
		/// Index name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private bool _unique;

		/// <summary>
		/// Shows if Unique keyword is used.
		/// </summary>
		public bool Unique
		{
			get { return _unique; }
			set { _unique = value; }
		}
		private IndexType _indexType;

		/// <summary>
		/// The index type.
		/// </summary>
		public IndexType IndexType
		{
			get { return _indexType; }
			set { _indexType = value; }
		}
		private List<IndexOption> _indexOptions = new List<IndexOption>();

		/// <summary>
		/// The index options. Optional may have zero elements.
		/// </summary>
		public IList<IndexOption> IndexOptions
		{
			get { return _indexOptions; }
		}

		private List<ColumnWithSortOrder> _columns = new List<ColumnWithSortOrder>();

		/// <summary>
		/// The defined columns.
		/// </summary>
		public IList<ColumnWithSortOrder> Columns
		{
			get { return _columns; }
		}

		private List<ColumnReferenceExpression> _includeColumns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// Non-key columns to be added to the leaf level of the nonclustered index.
		/// </summary>
		public IList<ColumnReferenceExpression> IncludeColumns
		{
			get { return _includeColumns; }
		}

		private FileGroupOrPartitionScheme _onFileGroupOrPartitionScheme;

		/// <summary>
		/// The filegroup or partition scheme. Might be null.
		/// </summary>
		public FileGroupOrPartitionScheme OnFileGroupOrPartitionScheme
		{
			get { return _onFileGroupOrPartitionScheme; }
			set { UpdateTokenInfo(value); _onFileGroupOrPartitionScheme = value; }
		}
		private BooleanExpression _filterPredicate;

		/// <summary>
		/// Optional filter predicate for index.
		/// </summary>
		public BooleanExpression FilterPredicate
		{
			get { return _filterPredicate; }
			set { UpdateTokenInfo(value); _filterPredicate = value; }
		}
		private IdentifierOrValueExpression _fileStreamOn;

		/// <summary>
		/// Optional specification of the filestream. Can be either Identifier or String literal.
		/// </summary>
		public IdentifierOrValueExpression FileStreamOn
		{
			get { return _fileStreamOn; }
			set { UpdateTokenInfo(value); _fileStreamOn = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.IndexOptions.Count; i < count; ++i)
			{
				this.IndexOptions[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.IncludeColumns.Count; i < count; ++i)
			{
				this.IncludeColumns[i].Accept(visitor);
			}

			if (this.OnFileGroupOrPartitionScheme != null)
			{
				this.OnFileGroupOrPartitionScheme.Accept(visitor);
			}

			if (this.FilterPredicate != null)
			{
				this.FilterPredicate.Accept(visitor);
			}

			if (this.FileStreamOn != null)
			{
				this.FileStreamOn.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Period for temporal system time.
	/// </summary>
	[System.Serializable]
	public partial class SystemTimePeriodDefinition : TSqlFragment
	{


		private Identifier _startTimeColumn;

		/// <summary>
		/// Period start column.
		/// </summary>
		public Identifier StartTimeColumn
		{
			get { return _startTimeColumn; }
			set { UpdateTokenInfo(value); _startTimeColumn = value; }
		}
		private Identifier _endTimeColumn;

		/// <summary>
		/// Period end column.
		/// </summary>
		public Identifier EndTimeColumn
		{
			get { return _endTimeColumn; }
			set { UpdateTokenInfo(value); _endTimeColumn = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.StartTimeColumn != null)
			{
				this.StartTimeColumn.Accept(visitor);
			}

			if (this.EndTimeColumn != null)
			{
				this.EndTimeColumn.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the base for create index statements.
	/// </summary>
	[System.Serializable]
	public abstract partial class IndexStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the index.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private SchemaObjectName _onName;

		/// <summary>
		/// The table or view name that comes after the ON keyword.
		/// </summary>
		public SchemaObjectName OnName
		{
			get { return _onName; }
			set { UpdateTokenInfo(value); _onName = value; }
		}
		private List<IndexOption> _indexOptions = new List<IndexOption>();

		/// <summary>
		/// The index options. Optional may have zero elements.
		/// </summary>
		public IList<IndexOption> IndexOptions
		{
			get { return _indexOptions; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.OnName != null)
			{
				this.OnName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.IndexOptions.Count; i < count; ++i)
			{
				this.IndexOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an index type
	/// </summary>
	[System.Serializable]
	public partial class IndexType : TSqlFragment
	{


		private IndexTypeKind? _indexTypeKind;

		/// <summary>
		/// The type of index.
		/// </summary>
		public IndexTypeKind? IndexTypeKind
		{
			get { return _indexTypeKind; }
			set { _indexTypeKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a partition specifier as expression or ALL.
	/// </summary>
	[System.Serializable]
	public partial class PartitionSpecifier : TSqlFragment
	{


		private ScalarExpression _number;

		/// <summary>
		/// The expression that shows the partition. Optional, may be null.
		/// </summary>
		public ScalarExpression Number
		{
			get { return _number; }
			set { UpdateTokenInfo(value); _number = value; }
		}
		private bool _all;

		/// <summary>
		/// True if ALL was specified.
		/// </summary>
		public bool All
		{
			get { return _all; }
			set { _all = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Number != null)
			{
				this.Number.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the alter index statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterIndexStatement : IndexStatement
	{


		private bool _all;

		/// <summary>
		/// Shows if All keyword is used.
		/// </summary>
		public bool All
		{
			get { return _all; }
			set { _all = value; }
		}
		private AlterIndexType _alterIndexType;

		/// <summary>
		/// The type of the alter index statement.
		/// </summary>
		public AlterIndexType AlterIndexType
		{
			get { return _alterIndexType; }
			set { _alterIndexType = value; }
		}
		private PartitionSpecifier _partition;

		/// <summary>
		/// The expression that shows the partition. Optional, may be null.
		/// </summary>
		public PartitionSpecifier Partition
		{
			get { return _partition; }
			set { UpdateTokenInfo(value); _partition = value; }
		}
		private List<SelectiveXmlIndexPromotedPath> _promotedPaths = new List<SelectiveXmlIndexPromotedPath>();

		/// <summary>
		/// The list of the promoted xml paths.
		/// </summary>
		public IList<SelectiveXmlIndexPromotedPath> PromotedPaths
		{
			get { return _promotedPaths; }
		}

		private XmlNamespaces _xmlNamespaces;

		/// <summary>
		/// XML namespaces specified in WITH XMLNAMESPACES part of the statement.
		/// </summary>
		public XmlNamespaces XmlNamespaces
		{
			get { return _xmlNamespaces; }
			set { UpdateTokenInfo(value); _xmlNamespaces = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((IndexStatement)this).Name != null)
			{
				 ((IndexStatement)this).Name.Accept(visitor);
			}

			if (((IndexStatement)this).OnName != null)
			{
				 ((IndexStatement)this).OnName.Accept(visitor);
			}

			for (Int32 i = 0, count = ((IndexStatement)this).IndexOptions.Count; i < count; ++i)
			{
				 ((IndexStatement)this).IndexOptions[i].Accept(visitor);
			}

			if (this.Partition != null)
			{
				this.Partition.Accept(visitor);
			}

			for (Int32 i = 0, count = this.PromotedPaths.Count; i < count; ++i)
			{
				this.PromotedPaths[i].Accept(visitor);
			}

			if (this.XmlNamespaces != null)
			{
				this.XmlNamespaces.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the create xml index statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateXmlIndexStatement : IndexStatement
	{


		private bool _primary;

		/// <summary>
		/// Shows if Primary keyword is used.
		/// </summary>
		public bool Primary
		{
			get { return _primary; }
			set { _primary = value; }
		}
		private Identifier _xmlColumn;

		/// <summary>
		/// The xml column.
		/// </summary>
		public Identifier XmlColumn
		{
			get { return _xmlColumn; }
			set { UpdateTokenInfo(value); _xmlColumn = value; }
		}
		private Identifier _secondaryXmlIndexName;

		/// <summary>
		/// The secondary xml index name. Optional may be null.
		/// </summary>
		public Identifier SecondaryXmlIndexName
		{
			get { return _secondaryXmlIndexName; }
			set { UpdateTokenInfo(value); _secondaryXmlIndexName = value; }
		}
		private SecondaryXmlIndexType _secondaryXmlIndexType;

		/// <summary>
		/// The secondary xml index type.
		/// </summary>
		public SecondaryXmlIndexType SecondaryXmlIndexType
		{
			get { return _secondaryXmlIndexType; }
			set { _secondaryXmlIndexType = value; }
		}
		private FileGroupOrPartitionScheme _onFileGroupOrPartitionScheme;

		/// <summary>
		/// The filegroup or partition scheme. Might be null.
		/// </summary>
		public FileGroupOrPartitionScheme OnFileGroupOrPartitionScheme
		{
			get { return _onFileGroupOrPartitionScheme; }
			set { UpdateTokenInfo(value); _onFileGroupOrPartitionScheme = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((IndexStatement)this).Name != null)
			{
				 ((IndexStatement)this).Name.Accept(visitor);
			}

			if (((IndexStatement)this).OnName != null)
			{
				 ((IndexStatement)this).OnName.Accept(visitor);
			}

			if (this.XmlColumn != null)
			{
				this.XmlColumn.Accept(visitor);
			}

			if (this.SecondaryXmlIndexName != null)
			{
				this.SecondaryXmlIndexName.Accept(visitor);
			}

			if (this.OnFileGroupOrPartitionScheme != null)
			{
				this.OnFileGroupOrPartitionScheme.Accept(visitor);
			}

			for (Int32 i = 0, count = ((IndexStatement)this).IndexOptions.Count; i < count; ++i)
			{
				 ((IndexStatement)this).IndexOptions[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the create selective xml index statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateSelectiveXmlIndexStatement : IndexStatement
	{


		private bool _isSecondary;

		/// <summary>
		/// Shows if index is secondary selective XML Index.
		/// </summary>
		public bool IsSecondary
		{
			get { return _isSecondary; }
			set { _isSecondary = value; }
		}
		private Identifier _xmlColumn;

		/// <summary>
		/// The xml column.
		/// </summary>
		public Identifier XmlColumn
		{
			get { return _xmlColumn; }
			set { UpdateTokenInfo(value); _xmlColumn = value; }
		}
		private List<SelectiveXmlIndexPromotedPath> _promotedPaths = new List<SelectiveXmlIndexPromotedPath>();

		/// <summary>
		/// The list of the promoted xml paths.
		/// </summary>
		public IList<SelectiveXmlIndexPromotedPath> PromotedPaths
		{
			get { return _promotedPaths; }
		}

		private XmlNamespaces _xmlNamespaces;

		/// <summary>
		/// XML namespaces specified in WITH XMLNAMESPACES part of the statement.
		/// </summary>
		public XmlNamespaces XmlNamespaces
		{
			get { return _xmlNamespaces; }
			set { UpdateTokenInfo(value); _xmlNamespaces = value; }
		}
		private Identifier _usingXmlIndexName;

		/// <summary>
		/// The name of the using selective xml index. Optional may be null.
		/// </summary>
		public Identifier UsingXmlIndexName
		{
			get { return _usingXmlIndexName; }
			set { UpdateTokenInfo(value); _usingXmlIndexName = value; }
		}
		private Identifier _pathName;

		/// <summary>
		/// Path specified in selective xml index over which secondary xml index is created.
		/// </summary>
		public Identifier PathName
		{
			get { return _pathName; }
			set { UpdateTokenInfo(value); _pathName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((IndexStatement)this).Name != null)
			{
				 ((IndexStatement)this).Name.Accept(visitor);
			}

			if (((IndexStatement)this).OnName != null)
			{
				 ((IndexStatement)this).OnName.Accept(visitor);
			}

			if (this.XmlColumn != null)
			{
				this.XmlColumn.Accept(visitor);
			}

			for (Int32 i = 0, count = this.PromotedPaths.Count; i < count; ++i)
			{
				this.PromotedPaths[i].Accept(visitor);
			}

			if (this.XmlNamespaces != null)
			{
				this.XmlNamespaces.Accept(visitor);
			}

			if (this.UsingXmlIndexName != null)
			{
				this.UsingXmlIndexName.Accept(visitor);
			}

			if (this.PathName != null)
			{
				this.PathName.Accept(visitor);
			}

			for (Int32 i = 0, count = ((IndexStatement)this).IndexOptions.Count; i < count; ++i)
			{
				 ((IndexStatement)this).IndexOptions[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a filegroup or a partition scheme.
	/// </summary>
	[System.Serializable]
	public partial class FileGroupOrPartitionScheme : TSqlFragment
	{


		private IdentifierOrValueExpression _name;

		/// <summary>
		/// Can be an identifier or literal of type string.
		/// </summary>
		public IdentifierOrValueExpression Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<Identifier> _partitionSchemeColumns = new List<Identifier>();

		/// <summary>
		/// The column names for the partition scheme. Might be empty.
		/// </summary>
		public IList<Identifier> PartitionSchemeColumns
		{
			get { return _partitionSchemeColumns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.PartitionSchemeColumns.Count; i < count; ++i)
			{
				this.PartitionSchemeColumns[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the create index statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateIndexStatement : IndexStatement, IFileStreamSpecifier
	{


		private bool _translated80SyntaxTo90;

		/// <summary>
		/// 
		/// True if the 80 syntax was translated into 90
		/// If this is false and there are index options present, then this statement must be a TSql90 statement
		/// However, 80 syntax is still being accepted in SQL 2005...
		/// 
		/// </summary>
		public bool Translated80SyntaxTo90
		{
			get { return _translated80SyntaxTo90; }
			set { _translated80SyntaxTo90 = value; }
		}
		private bool _unique;

		/// <summary>
		/// Shows if Unique keyword is used.
		/// </summary>
		public bool Unique
		{
			get { return _unique; }
			set { _unique = value; }
		}
		private bool? _clustered;

		/// <summary>
		/// Shows if Clustered keyword is used.
		/// </summary>
		public bool? Clustered
		{
			get { return _clustered; }
			set { _clustered = value; }
		}
		private List<ColumnWithSortOrder> _columns = new List<ColumnWithSortOrder>();

		/// <summary>
		/// The defined columns.
		/// </summary>
		public IList<ColumnWithSortOrder> Columns
		{
			get { return _columns; }
		}

		private List<ColumnReferenceExpression> _includeColumns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// The include columns.
		/// </summary>
		public IList<ColumnReferenceExpression> IncludeColumns
		{
			get { return _includeColumns; }
		}

		private FileGroupOrPartitionScheme _onFileGroupOrPartitionScheme;

		/// <summary>
		/// The filegroup or partition scheme. Might be null.
		/// </summary>
		public FileGroupOrPartitionScheme OnFileGroupOrPartitionScheme
		{
			get { return _onFileGroupOrPartitionScheme; }
			set { UpdateTokenInfo(value); _onFileGroupOrPartitionScheme = value; }
		}
		private BooleanExpression _filterPredicate;

		/// <summary>
		/// Optional filter predicate for index.
		/// </summary>
		public BooleanExpression FilterPredicate
		{
			get { return _filterPredicate; }
			set { UpdateTokenInfo(value); _filterPredicate = value; }
		}
		private IdentifierOrValueExpression _fileStreamOn;

		/// <summary>
		/// Optional specification of the filestream. Can be either Identifier or String literal.
		/// </summary>
		public IdentifierOrValueExpression FileStreamOn
		{
			get { return _fileStreamOn; }
			set { UpdateTokenInfo(value); _fileStreamOn = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((IndexStatement)this).Name != null)
			{
				 ((IndexStatement)this).Name.Accept(visitor);
			}

			if (((IndexStatement)this).OnName != null)
			{
				 ((IndexStatement)this).OnName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.IncludeColumns.Count; i < count; ++i)
			{
				this.IncludeColumns[i].Accept(visitor);
			}

			for (Int32 i = 0, count = ((IndexStatement)this).IndexOptions.Count; i < count; ++i)
			{
				 ((IndexStatement)this).IndexOptions[i].Accept(visitor);
			}

			if (this.OnFileGroupOrPartitionScheme != null)
			{
				this.OnFileGroupOrPartitionScheme.Accept(visitor);
			}

			if (this.FilterPredicate != null)
			{
				this.FilterPredicate.Accept(visitor);
			}

			if (this.FileStreamOn != null)
			{
				this.FileStreamOn.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the index option.
	/// </summary>
	[System.Serializable]
	public abstract partial class IndexOption : TSqlFragment
	{


		private IndexOptionKind _optionKind;

		/// <summary>
		/// The type of the option.
		/// </summary>
		public IndexOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the index option that could be on or off.
	/// </summary>
	[System.Serializable]
	public partial class IndexStateOption : IndexOption
	{


		private OptionState _optionState;

		/// <summary>
		/// The state.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the index option that could be an expression.
	/// </summary>
	[System.Serializable]
	public partial class IndexExpressionOption : IndexOption
	{


		private ScalarExpression _expression;

		/// <summary>
		/// Can be an integer or a negative integer.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the max duration option.
	/// </summary>
	[System.Serializable]
	public partial class MaxDurationOption : IndexOption
	{


		private Literal _maxDuration;

		/// <summary>
		/// The maximum duration in time.
		/// </summary>
		public Literal MaxDuration
		{
			get { return _maxDuration; }
			set { UpdateTokenInfo(value); _maxDuration = value; }
		}
		private TimeUnit? _unit;

		/// <summary>
		/// Unit for max duration. Only Minutes is supported. Optional, may be null.
		/// </summary>
		public TimeUnit? Unit
		{
			get { return _unit; }
			set { _unit = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.MaxDuration != null)
			{
				this.MaxDuration.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the low priority lock wait option for alter table switch statement.
	/// </summary>
	[System.Serializable]
	public partial class WaitAtLowPriorityOption : IndexOption
	{


		private List<LowPriorityLockWaitOption> _options = new List<LowPriorityLockWaitOption>();

		/// <summary>
		/// The low priority lock wait options.
		/// </summary>
		public IList<LowPriorityLockWaitOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the online option.
	/// </summary>
	[System.Serializable]
	public partial class OnlineIndexOption : IndexStateOption
	{


		private OnlineIndexLowPriorityLockWaitOption _lowPriorityLockWaitOption;

		/// <summary>
		/// Optional low priority lock wait suboption.
		/// </summary>
		public OnlineIndexLowPriorityLockWaitOption LowPriorityLockWaitOption
		{
			get { return _lowPriorityLockWaitOption; }
			set { UpdateTokenInfo(value); _lowPriorityLockWaitOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.LowPriorityLockWaitOption != null)
			{
				this.LowPriorityLockWaitOption.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the ignore_dup_key index option.
	/// </summary>
	[System.Serializable]
	public partial class IgnoreDupKeyIndexOption : IndexStateOption
	{


		private bool? _suppressMessagesOption;

		/// <summary>
		/// Optional suppress duplicate key message suboption.
		/// </summary>
		public bool? SuppressMessagesOption
		{
			get { return _suppressMessagesOption; }
			set { _suppressMessagesOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the order option.
	/// </summary>
	[System.Serializable]
	public partial class OrderIndexOption : IndexOption
	{


		private List<ColumnReferenceExpression> _columns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// The columns used for order hint
		/// </summary>
		public IList<ColumnReferenceExpression> Columns
		{
			get { return _columns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the low priority lock wait suboption for online index option.
	/// </summary>
	[System.Serializable]
	public partial class OnlineIndexLowPriorityLockWaitOption : TSqlFragment
	{


		private List<LowPriorityLockWaitOption> _options = new List<LowPriorityLockWaitOption>();

		/// <summary>
		/// The low priority lock wait options.
		/// </summary>
		public IList<LowPriorityLockWaitOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the low priority lock wait option.
	/// </summary>
	[System.Serializable]
	public abstract partial class LowPriorityLockWaitOption : TSqlFragment
	{


		private LowPriorityLockWaitOptionKind _optionKind;

		/// <summary>
		/// The type of the option.
		/// </summary>
		public LowPriorityLockWaitOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the max duration of the low priority lock wait option.
	/// </summary>
	[System.Serializable]
	public partial class LowPriorityLockWaitMaxDurationOption : LowPriorityLockWaitOption
	{


		private Literal _maxDuration;

		/// <summary>
		/// The maximum duration in time.
		/// </summary>
		public Literal MaxDuration
		{
			get { return _maxDuration; }
			set { UpdateTokenInfo(value); _maxDuration = value; }
		}
		private TimeUnit? _unit;

		/// <summary>
		/// Unit for max duration. Only Minutes is supported. Optional, may be null.
		/// </summary>
		public TimeUnit? Unit
		{
			get { return _unit; }
			set { _unit = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.MaxDuration != null)
			{
				this.MaxDuration.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the action of the low priority lock wait option.
	/// </summary>
	[System.Serializable]
	public partial class LowPriorityLockWaitAbortAfterWaitOption : LowPriorityLockWaitOption
	{


		private AbortAfterWaitType _abortAfterWait;

		/// <summary>
		/// The action to be taken after the maximum duration expires.
		/// </summary>
		public AbortAfterWaitType AbortAfterWait
		{
			get { return _abortAfterWait; }
			set { _abortAfterWait = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the column for a fulltext index.
	/// </summary>
	[System.Serializable]
	public partial class FullTextIndexColumn : TSqlFragment
	{


		private Identifier _name;

		/// <summary>
		/// Name of the column.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private Identifier _typeColumn;

		/// <summary>
		/// The type column. Optional may be null.
		/// </summary>
		public Identifier TypeColumn
		{
			get { return _typeColumn; }
			set { UpdateTokenInfo(value); _typeColumn = value; }
		}
		private IdentifierOrValueExpression _languageTerm;

		/// <summary>
		/// The language term, identifier or literal of type integer, string or hexadecimal. Optional may be null.
		/// </summary>
		public IdentifierOrValueExpression LanguageTerm
		{
			get { return _languageTerm; }
			set { UpdateTokenInfo(value); _languageTerm = value; }
		}
		private bool _statisticalSemantics;

		/// <summary>
		/// Indicates whether statistical_semantics was specified.
		/// </summary>
		public bool StatisticalSemantics
		{
			get { return _statisticalSemantics; }
			set { _statisticalSemantics = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.TypeColumn != null)
			{
				this.TypeColumn.Accept(visitor);
			}

			if (this.LanguageTerm != null)
			{
				this.LanguageTerm.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the create fulltext index statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateFullTextIndexStatement : TSqlStatement
	{


		private SchemaObjectName _onName;

		/// <summary>
		/// The name table the fulltext index is on.
		/// </summary>
		public SchemaObjectName OnName
		{
			get { return _onName; }
			set { UpdateTokenInfo(value); _onName = value; }
		}
		private List<FullTextIndexColumn> _fullTextIndexColumns = new List<FullTextIndexColumn>();

		/// <summary>
		/// The columns.
		/// </summary>
		public IList<FullTextIndexColumn> FullTextIndexColumns
		{
			get { return _fullTextIndexColumns; }
		}

		private Identifier _keyIndexName;

		/// <summary>
		/// The name of the key index.
		/// </summary>
		public Identifier KeyIndexName
		{
			get { return _keyIndexName; }
			set { UpdateTokenInfo(value); _keyIndexName = value; }
		}
		private FullTextCatalogAndFileGroup _catalogAndFileGroup;

		/// <summary>
		/// Specifies the name of the fulltext catalog and/or filegroup. Optional may be null.
		/// </summary>
		public FullTextCatalogAndFileGroup CatalogAndFileGroup
		{
			get { return _catalogAndFileGroup; }
			set { UpdateTokenInfo(value); _catalogAndFileGroup = value; }
		}
		private List<FullTextIndexOption> _options = new List<FullTextIndexOption>();

		/// <summary>
		/// Optional CHANGE_TRACKING and STOPLIST options.
		/// </summary>
		public IList<FullTextIndexOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OnName != null)
			{
				this.OnName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.FullTextIndexColumns.Count; i < count; ++i)
			{
				this.FullTextIndexColumns[i].Accept(visitor);
			}

			if (this.KeyIndexName != null)
			{
				this.KeyIndexName.Accept(visitor);
			}

			if (this.CatalogAndFileGroup != null)
			{
				this.CatalogAndFileGroup.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single option in CREATE FULLTEXT INDEX statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class FullTextIndexOption : TSqlFragment
	{


		private FullTextIndexOptionKind _optionKind;

		/// <summary>
		/// The option kind.
		/// </summary>
		public FullTextIndexOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CHANGE_TRACKING option in FULLTEXT INDEX statement.
	/// </summary>
	[System.Serializable]
	public partial class ChangeTrackingFullTextIndexOption : FullTextIndexOption
	{


		private ChangeTrackingOption _value;

		/// <summary>
		/// The change tracking option.
		/// </summary>
		public ChangeTrackingOption Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents STOPLIST option in FULLTEXT INDEX statement.
	/// </summary>
	[System.Serializable]
	public partial class StopListFullTextIndexOption : FullTextIndexOption
	{


		private bool _isOff;

		/// <summary>
		/// True if OFF was specified.
		/// </summary>
		public bool IsOff
		{
			get { return _isOff; }
			set { _isOff = value; }
		}
		private Identifier _stopListName;

		/// <summary>
		/// Name of the stoplist, can be empty (in case of OFF) or SYSTEM.
		/// </summary>
		public Identifier StopListName
		{
			get { return _stopListName; }
			set { UpdateTokenInfo(value); _stopListName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.StopListName != null)
			{
				this.StopListName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the search property list option in FULLTEXT INDEX statement.
	/// </summary>
	[System.Serializable]
	public partial class SearchPropertyListFullTextIndexOption : FullTextIndexOption
	{


		private bool _isOff;

		/// <summary>
		/// If the search property list is off
		/// </summary>
		public bool IsOff
		{
			get { return _isOff; }
			set { _isOff = value; }
		}
		private Identifier _propertyListName;

		/// <summary>
		/// The name of the search property list
		/// </summary>
		public Identifier PropertyListName
		{
			get { return _propertyListName; }
			set { UpdateTokenInfo(value); _propertyListName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.PropertyListName != null)
			{
				this.PropertyListName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents catalog / filegroup option in CREATE FULLTEXT STATEMENT.
	/// </summary>
	[System.Serializable]
	public partial class FullTextCatalogAndFileGroup : TSqlFragment
	{


		private Identifier _catalogName;

		/// <summary>
		/// The name of the fulltext catalog. Optional may be null.
		/// </summary>
		public Identifier CatalogName
		{
			get { return _catalogName; }
			set { UpdateTokenInfo(value); _catalogName = value; }
		}
		private Identifier _fileGroupName;

		/// <summary>
		/// The name of the filegroup. Optional may be null.
		/// </summary>
		public Identifier FileGroupName
		{
			get { return _fileGroupName; }
			set { UpdateTokenInfo(value); _fileGroupName = value; }
		}
		private bool _fileGroupIsFirst;

		/// <summary>
		/// Specifies that filegroup was encountered first in this option.
		/// </summary>
		public bool FileGroupIsFirst
		{
			get { return _fileGroupIsFirst; }
			set { _fileGroupIsFirst = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.CatalogName != null)
			{
				this.CatalogName.Accept(visitor);
			}

			if (this.FileGroupName != null)
			{
				this.FileGroupName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents event type or group
	/// </summary>
	[System.Serializable]
	public abstract partial class EventTypeGroupContainer : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents event type
	/// </summary>
	[System.Serializable]
	public partial class EventTypeContainer : EventTypeGroupContainer
	{


		private EventNotificationEventType _eventType;

		/// <summary>
		/// The event types.
		/// </summary>
		public EventNotificationEventType EventType
		{
			get { return _eventType; }
			set { _eventType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents event type
	/// </summary>
	[System.Serializable]
	public partial class EventGroupContainer : EventTypeGroupContainer
	{


		private EventNotificationEventGroup _eventGroup;

		/// <summary>
		/// The event types.
		/// </summary>
		public EventNotificationEventGroup EventGroup
		{
			get { return _eventGroup; }
			set { _eventGroup = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the create event notification statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateEventNotificationStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the event notification.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private EventNotificationObjectScope _scope;

		/// <summary>
		/// The scope for event notification.
		/// </summary>
		public EventNotificationObjectScope Scope
		{
			get { return _scope; }
			set { UpdateTokenInfo(value); _scope = value; }
		}
		private bool _withFanIn;

		/// <summary>
		/// True if With FAN_IN is defined.
		/// </summary>
		public bool WithFanIn
		{
			get { return _withFanIn; }
			set { _withFanIn = value; }
		}
		private List<EventTypeGroupContainer> _eventTypeGroups = new List<EventTypeGroupContainer>();

		/// <summary>
		/// The event types or groups.
		/// </summary>
		public IList<EventTypeGroupContainer> EventTypeGroups
		{
			get { return _eventTypeGroups; }
		}

		private Literal _brokerService;

		/// <summary>
		/// The name of the broker service. This is a literal of type string.
		/// </summary>
		public Literal BrokerService
		{
			get { return _brokerService; }
			set { UpdateTokenInfo(value); _brokerService = value; }
		}
		private Literal _brokerInstanceSpecifier;

		/// <summary>
		/// The name of the broker instance specifier. This is a literal of type string.
		/// </summary>
		public Literal BrokerInstanceSpecifier
		{
			get { return _brokerInstanceSpecifier; }
			set { UpdateTokenInfo(value); _brokerInstanceSpecifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Scope != null)
			{
				this.Scope.Accept(visitor);
			}

			for (Int32 i = 0, count = this.EventTypeGroups.Count; i < count; ++i)
			{
				this.EventTypeGroups[i].Accept(visitor);
			}

			if (this.BrokerService != null)
			{
				this.BrokerService.Accept(visitor);
			}

			if (this.BrokerInstanceSpecifier != null)
			{
				this.BrokerInstanceSpecifier.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents scope of event notification.
	/// </summary>
	[System.Serializable]
	public partial class EventNotificationObjectScope : TSqlFragment
	{


		private EventNotificationTarget _target;

		/// <summary>
		/// The target for event notification.
		/// </summary>
		public EventNotificationTarget Target
		{
			get { return _target; }
			set { _target = value; }
		}
		private SchemaObjectName _queueName;

		/// <summary>
		/// The name of the queue if the EventNotificationTarget is of type queue, is null otherwise.
		/// </summary>
		public SchemaObjectName QueueName
		{
			get { return _queueName; }
			set { UpdateTokenInfo(value); _queueName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.QueueName != null)
			{
				this.QueueName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the master key statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class MasterKeyStatement : TSqlStatement
	{


		private Literal _password;

		/// <summary>
		/// The password. This is a literal of type string.
		/// </summary>
		public Literal Password
		{
			get { return _password; }
			set { UpdateTokenInfo(value); _password = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Password != null)
			{
				this.Password.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE MASTER KEY statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateMasterKeyStatement : MasterKeyStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the master key statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterMasterKeyStatement : MasterKeyStatement
	{


		private AlterMasterKeyOption _option;

		/// <summary>
		/// Specifies how exactly MASTER KEY is altered.
		/// </summary>
		public AlterMasterKeyOption Option
		{
			get { return _option; }
			set { _option = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the application role option.
	/// </summary>
	[System.Serializable]
	public partial class ApplicationRoleOption : TSqlFragment
	{


		private ApplicationRoleOptionKind _optionKind;

		/// <summary>
		/// The type of the option.
		/// </summary>
		public ApplicationRoleOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private IdentifierOrValueExpression _value;

		/// <summary>
		/// The value for the option. Can be an identifier or a literal of type string.
		/// </summary>
		public IdentifierOrValueExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the application role statement base.
	/// </summary>
	[System.Serializable]
	public abstract partial class ApplicationRoleStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the application role.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<ApplicationRoleOption> _applicationRoleOptions = new List<ApplicationRoleOption>();

		/// <summary>
		/// The application role options.
		/// </summary>
		public IList<ApplicationRoleOption> ApplicationRoleOptions
		{
			get { return _applicationRoleOptions; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ApplicationRoleOptions.Count; i < count; ++i)
			{
				this.ApplicationRoleOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the create application role statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateApplicationRoleStatement : ApplicationRoleStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the alter application role statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterApplicationRoleStatement : ApplicationRoleStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the role statement base.
	/// </summary>
	[System.Serializable]
	public abstract partial class RoleStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the role.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the create role statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateRoleStatement : RoleStatement, IAuthorization
	{


		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the alter role statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterRoleStatement : RoleStatement
	{


		private AlterRoleAction _action;

		/// <summary>
		/// The alter role action.
		/// </summary>
		public AlterRoleAction Action
		{
			get { return _action; }
			set { UpdateTokenInfo(value); _action = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Action != null)
			{
				this.Action.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents an action in ALTER ROLE.
	/// </summary>
	[System.Serializable]
	public abstract partial class AlterRoleAction : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the rename alter role action.
	/// </summary>
	[System.Serializable]
	public partial class RenameAlterRoleAction : AlterRoleAction
	{


		private Identifier _newName;

		/// <summary>
		/// The new name.
		/// </summary>
		public Identifier NewName
		{
			get { return _newName; }
			set { UpdateTokenInfo(value); _newName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.NewName != null)
			{
				this.NewName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the add member alter role action.
	/// </summary>
	[System.Serializable]
	public partial class AddMemberAlterRoleAction : AlterRoleAction
	{


		private Identifier _member;

		/// <summary>
		/// The member to add
		/// </summary>
		public Identifier Member
		{
			get { return _member; }
			set { UpdateTokenInfo(value); _member = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Member != null)
			{
				this.Member.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the drop member alter role action.
	/// </summary>
	[System.Serializable]
	public partial class DropMemberAlterRoleAction : AlterRoleAction
	{


		private Identifier _member;

		/// <summary>
		/// The member to drop
		/// </summary>
		public Identifier Member
		{
			get { return _member; }
			set { UpdateTokenInfo(value); _member = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Member != null)
			{
				this.Member.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the CREATE SERVER ROLE statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateServerRoleStatement : CreateRoleStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the ALTER SERVER ROLE statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerRoleStatement : AlterRoleStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the DROP SERVER ROLE statement.
	/// </summary>
	[System.Serializable]
	public partial class DropServerRoleStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the user login option.
	/// </summary>
	[System.Serializable]
	public partial class UserLoginOption : TSqlFragment
	{


		private UserLoginOptionType _userLoginOptionType;

		/// <summary>
		/// The type of the user login.
		/// </summary>
		public UserLoginOptionType UserLoginOptionType
		{
			get { return _userLoginOptionType; }
			set { _userLoginOptionType = value; }
		}
		private Identifier _identifier;

		/// <summary>
		/// The value for the option. May be null if type is WithoutLogin.
		/// </summary>
		public Identifier Identifier
		{
			get { return _identifier; }
			set { UpdateTokenInfo(value); _identifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Identifier != null)
			{
				this.Identifier.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the user statement base.
	/// </summary>
	[System.Serializable]
	public abstract partial class UserStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the user.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<PrincipalOption> _userOptions = new List<PrincipalOption>();

		/// <summary>
		/// The user options.
		/// </summary>
		public IList<PrincipalOption> UserOptions
		{
			get { return _userOptions; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.UserOptions.Count; i < count; ++i)
			{
				this.UserOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the create user statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateUserStatement : UserStatement
	{


		private UserLoginOption _userLoginOption;

		/// <summary>
		/// The user login options.
		/// </summary>
		public UserLoginOption UserLoginOption
		{
			get { return _userLoginOption; }
			set { UpdateTokenInfo(value); _userLoginOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((UserStatement)this).Name != null)
			{
				 ((UserStatement)this).Name.Accept(visitor);
			}

			if (this.UserLoginOption != null)
			{
				this.UserLoginOption.Accept(visitor);
			}

			for (Int32 i = 0, count = ((UserStatement)this).UserOptions.Count; i < count; ++i)
			{
				 ((UserStatement)this).UserOptions[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the alter user statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterUserStatement : UserStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the statistics option.
	/// </summary>
	[System.Serializable]
	public partial class StatisticsOption : TSqlFragment
	{


		private StatisticsOptionKind _optionKind;

		/// <summary>
		/// The type of the statistics option.
		/// </summary>
		public StatisticsOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the resample statistics option that supports specifying a list of partition ranges on which to resample.
	/// </summary>
	[System.Serializable]
	public partial class ResampleStatisticsOption : StatisticsOption
	{


		private List<StatisticsPartitionRange> _partitions = new List<StatisticsPartitionRange>();

		/// <summary>
		/// The partitions to resample for Incremental Statistics.
		/// </summary>
		public IList<StatisticsPartitionRange> Partitions
		{
			get { return _partitions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Partitions.Count; i < count; ++i)
			{
				this.Partitions[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a single partition range, with constant expressions
	/// </summary>
	[System.Serializable]
	public partial class StatisticsPartitionRange : TSqlFragment
	{


		private IntegerLiteral _from;

		/// <summary>
		/// First partition integer literal.
		/// </summary>
		public IntegerLiteral From
		{
			get { return _from; }
			set { UpdateTokenInfo(value); _from = value; }
		}
		private IntegerLiteral _to;

		/// <summary>
		/// Optional second partition number integer literal.
		/// </summary>
		public IntegerLiteral To
		{
			get { return _to; }
			set { UpdateTokenInfo(value); _to = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.From != null)
			{
				this.From.Accept(visitor);
			}

			if (this.To != null)
			{
				this.To.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents new-style on-off options.
	/// </summary>
	[System.Serializable]
	public partial class OnOffStatisticsOption : StatisticsOption
	{


		private OptionState _optionState;

		/// <summary>
		/// Option state
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the statistics option.
	/// </summary>
	[System.Serializable]
	public partial class LiteralStatisticsOption : StatisticsOption
	{


		private Literal _literal;

		/// <summary>
		/// The value for the option.
		/// </summary>
		public Literal Literal
		{
			get { return _literal; }
			set { UpdateTokenInfo(value); _literal = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Literal != null)
			{
				this.Literal.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the create statistics statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateStatisticsStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the statistic.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private SchemaObjectName _onName;

		/// <summary>
		/// The table or view this statistic is on.
		/// </summary>
		public SchemaObjectName OnName
		{
			get { return _onName; }
			set { UpdateTokenInfo(value); _onName = value; }
		}
		private List<ColumnReferenceExpression> _columns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// The columns of the table or view that are relevant to the statistic.
		/// </summary>
		public IList<ColumnReferenceExpression> Columns
		{
			get { return _columns; }
		}

		private List<StatisticsOption> _statisticsOptions = new List<StatisticsOption>();

		/// <summary>
		/// The statistics options.
		/// </summary>
		public IList<StatisticsOption> StatisticsOptions
		{
			get { return _statisticsOptions; }
		}

		private BooleanExpression _filterPredicate;

		/// <summary>
		/// Optional filter predicate for CREATE STATISTICS statement.
		/// </summary>
		public BooleanExpression FilterPredicate
		{
			get { return _filterPredicate; }
			set { UpdateTokenInfo(value); _filterPredicate = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.OnName != null)
			{
				this.OnName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.StatisticsOptions.Count; i < count; ++i)
			{
				this.StatisticsOptions[i].Accept(visitor);
			}

			if (this.FilterPredicate != null)
			{
				this.FilterPredicate.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the update statistics statement.
	/// </summary>
	[System.Serializable]
	public partial class UpdateStatisticsStatement : TSqlStatement
	{


		private SchemaObjectName _schemaObjectName;

		/// <summary>
		/// The table or view this statistic is on.
		/// </summary>
		public SchemaObjectName SchemaObjectName
		{
			get { return _schemaObjectName; }
			set { UpdateTokenInfo(value); _schemaObjectName = value; }
		}
		private List<Identifier> _subElements = new List<Identifier>();

		/// <summary>
		/// The index or statistic names.
		/// </summary>
		public IList<Identifier> SubElements
		{
			get { return _subElements; }
		}

		private List<StatisticsOption> _statisticsOptions = new List<StatisticsOption>();

		/// <summary>
		/// The statistics options.
		/// </summary>
		public IList<StatisticsOption> StatisticsOptions
		{
			get { return _statisticsOptions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SchemaObjectName != null)
			{
				this.SchemaObjectName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.SubElements.Count; i < count; ++i)
			{
				this.SubElements[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.StatisticsOptions.Count; i < count; ++i)
			{
				this.StatisticsOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents return statement
	/// </summary>
	[System.Serializable]
	public partial class ReturnStatement : TSqlStatement
	{


		private ScalarExpression _expression;

		/// <summary>
		/// Optional return value
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DECLARE CURSOR statement
	/// </summary>
	[System.Serializable]
	public partial class DeclareCursorStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Cursor name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private CursorDefinition _cursorDefinition;

		/// <summary>
		/// Select and cursor options
		/// </summary>
		public CursorDefinition CursorDefinition
		{
			get { return _cursorDefinition; }
			set { UpdateTokenInfo(value); _cursorDefinition = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.CursorDefinition != null)
			{
				this.CursorDefinition.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents cursor definition
	/// </summary>
	[System.Serializable]
	public partial class CursorDefinition : TSqlFragment
	{


		private List<CursorOption> _options = new List<CursorOption>();

		/// <summary>
		/// The collection of cursor options.
		/// </summary>
		public IList<CursorOption> Options
		{
			get { return _options; }
		}

		private SelectStatement _select;

		/// <summary>
		/// Select statement
		/// </summary>
		public SelectStatement Select
		{
			get { return _select; }
			set { UpdateTokenInfo(value); _select = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			if (this.Select != null)
			{
				this.Select.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a cursor option.
	/// </summary>
	[System.Serializable]
	public partial class CursorOption : TSqlFragment
	{


		private CursorOptionKind _optionKind;

		/// <summary>
		/// The option kind.
		/// </summary>
		public CursorOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the set @local_variable statement
	/// </summary>
	[System.Serializable]
	public partial class SetVariableStatement : TSqlStatement
	{


		private VariableReference _variable;

		/// <summary>
		/// The variable that is going to be set.
		/// </summary>
		public VariableReference Variable
		{
			get { return _variable; }
			set { UpdateTokenInfo(value); _variable = value; }
		}
		private SeparatorType _separatorType;

		/// <summary>
		/// Shows the separator.
		/// </summary>
		public SeparatorType SeparatorType
		{
			get { return _separatorType; }
			set { _separatorType = value; }
		}
		private Identifier _identifier;

		/// <summary>
		/// The identifier that can represent the property, field or method. Optional, may be null.
		/// </summary>
		public Identifier Identifier
		{
			get { return _identifier; }
			set { UpdateTokenInfo(value); _identifier = value; }
		}
		private bool _functionCallExists;

		/// <summary>
		/// True if the column identifiers end with a function call.
		/// </summary>
		public bool FunctionCallExists
		{
			get { return _functionCallExists; }
			set { _functionCallExists = value; }
		}
		private List<ScalarExpression> _parameters = new List<ScalarExpression>();

		/// <summary>
		/// The parameters to the function.
		/// </summary>
		public IList<ScalarExpression> Parameters
		{
			get { return _parameters; }
		}

		private ScalarExpression _expression;

		/// <summary>
		/// The expression that the variable is goint to be set. Can be null in case of cursor
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}
		private CursorDefinition _cursorDefinition;

		/// <summary>
		/// Cursor - if not null, then Expression has to be null
		/// </summary>
		public CursorDefinition CursorDefinition
		{
			get { return _cursorDefinition; }
			set { UpdateTokenInfo(value); _cursorDefinition = value; }
		}
		private AssignmentKind _assignmentKind;

		/// <summary>
		/// Assignment operator used.
		/// </summary>
		public AssignmentKind AssignmentKind
		{
			get { return _assignmentKind; }
			set { _assignmentKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Variable != null)
			{
				this.Variable.Accept(visitor);
			}

			if (this.Identifier != null)
			{
				this.Identifier.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			if (this.CursorDefinition != null)
			{
				this.CursorDefinition.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents reference to cursor
	/// </summary>
	[System.Serializable]
	public partial class CursorId : TSqlFragment
	{


		private bool _isGlobal;

		/// <summary>
		/// If cursor is global
		/// </summary>
		public bool IsGlobal
		{
			get { return _isGlobal; }
			set { _isGlobal = value; }
		}
		private IdentifierOrValueExpression _name;

		/// <summary>
		/// Cursor name - can be either Identifier or variable Literal
		/// </summary>
		public IdentifierOrValueExpression Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base type for open/close/fetch cursor statements
	/// </summary>
	[System.Serializable]
	public abstract partial class CursorStatement : TSqlStatement
	{


		private CursorId _cursor;

		/// <summary>
		/// Cursor reference
		/// </summary>
		public CursorId Cursor
		{
			get { return _cursor; }
			set { UpdateTokenInfo(value); _cursor = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Cursor != null)
			{
				this.Cursor.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Open cursor statement
	/// </summary>
	[System.Serializable]
	public partial class OpenCursorStatement : CursorStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Close cursor statement
	/// </summary>
	[System.Serializable]
	public partial class CloseCursorStatement : CursorStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the decryption mechanism.
	/// </summary>
	[System.Serializable]
	public partial class CryptoMechanism : TSqlFragment
	{


		private CryptoMechanismType _cryptoMechanismType;

		/// <summary>
		/// The crypto mechanism type.
		/// </summary>
		public CryptoMechanismType CryptoMechanismType
		{
			get { return _cryptoMechanismType; }
			set { _cryptoMechanismType = value; }
		}
		private Identifier _identifier;

		/// <summary>
		/// The name of the key or certificate. May be null.
		/// </summary>
		public Identifier Identifier
		{
			get { return _identifier; }
			set { UpdateTokenInfo(value); _identifier = value; }
		}
		private Literal _passwordOrSignature;

		/// <summary>
		/// The password or signature. If this is a password, must be a string literal. If it's a signature, must be a binary literal. May be null.
		/// </summary>
		public Literal PasswordOrSignature
		{
			get { return _passwordOrSignature; }
			set { UpdateTokenInfo(value); _passwordOrSignature = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Identifier != null)
			{
				this.Identifier.Accept(visitor);
			}

			if (this.PasswordOrSignature != null)
			{
				this.PasswordOrSignature.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Open symmetric key statement.
	/// </summary>
	[System.Serializable]
	public partial class OpenSymmetricKeyStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the key.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private CryptoMechanism _decryptionMechanism;

		/// <summary>
		/// The decryption mechanism.
		/// </summary>
		public CryptoMechanism DecryptionMechanism
		{
			get { return _decryptionMechanism; }
			set { UpdateTokenInfo(value); _decryptionMechanism = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.DecryptionMechanism != null)
			{
				this.DecryptionMechanism.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Close symmetric key statement.
	/// </summary>
	[System.Serializable]
	public partial class CloseSymmetricKeyStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the key. May be null.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private bool _all;

		/// <summary>
		/// True if all defined.
		/// </summary>
		public bool All
		{
			get { return _all; }
			set { _all = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Open master key statement.
	/// </summary>
	[System.Serializable]
	public partial class OpenMasterKeyStatement : TSqlStatement
	{


		private Literal _password;

		/// <summary>
		/// The password.
		/// </summary>
		public Literal Password
		{
			get { return _password; }
			set { UpdateTokenInfo(value); _password = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Password != null)
			{
				this.Password.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Close master key statement.
	/// </summary>
	[System.Serializable]
	public partial class CloseMasterKeyStatement : TSqlStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Deallocate cursor statement
	/// </summary>
	[System.Serializable]
	public partial class DeallocateCursorStatement : CursorStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Holds information about different fetch orientations
	/// </summary>
	[System.Serializable]
	public partial class FetchType : TSqlFragment
	{


		private FetchOrientation _orientation;

		/// <summary>
		/// Fetch orientation
		/// </summary>
		public FetchOrientation Orientation
		{
			get { return _orientation; }
			set { _orientation = value; }
		}
		private ScalarExpression _rowOffset;

		/// <summary>
		/// Offset for ABSOLUTE and RELATIVE orientations, can be either variable or signed integer (thus expression - for minus)
		/// </summary>
		public ScalarExpression RowOffset
		{
			get { return _rowOffset; }
			set { UpdateTokenInfo(value); _rowOffset = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.RowOffset != null)
			{
				this.RowOffset.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents FETCH cursor statement
	/// </summary>
	[System.Serializable]
	public partial class FetchCursorStatement : CursorStatement
	{


		private FetchType _fetchType;

		/// <summary>
		/// Optional fetch orientation
		/// </summary>
		public FetchType FetchType
		{
			get { return _fetchType; }
			set { UpdateTokenInfo(value); _fetchType = value; }
		}
		private List<VariableReference> _intoVariables = new List<VariableReference>();

		/// <summary>
		/// Optional INTO variables
		/// </summary>
		public IList<VariableReference> IntoVariables
		{
			get { return _intoVariables; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FetchType != null)
			{
				this.FetchType.Accept(visitor);
			}

			for (Int32 i = 0, count = this.IntoVariables.Count; i < count; ++i)
			{
				this.IntoVariables[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the where clause that can be used in statements like select, update.
	/// </summary>
	[System.Serializable]
	public partial class WhereClause : TSqlFragment
	{


		private BooleanExpression _searchCondition;

		/// <summary>
		/// The search condition, is a boolean expression.
		/// </summary>
		public BooleanExpression SearchCondition
		{
			get { return _searchCondition; }
			set { UpdateTokenInfo(value); _searchCondition = value; }
		}
		private CursorId _cursor;

		/// <summary>
		/// 
		/// Cursor (for update and delete commands), mutually exclusive with SearchCondition
		/// Either this or SearchCondition should be present
		/// 
		/// </summary>
		public CursorId Cursor
		{
			get { return _cursor; }
			set { UpdateTokenInfo(value); _cursor = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SearchCondition != null)
			{
				this.SearchCondition.Accept(visitor);
			}

			if (this.Cursor != null)
			{
				this.Cursor.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP statement for those unowned objects
	/// </summary>
	[System.Serializable]
	public abstract partial class DropUnownedObjectStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the object to be dropped.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private bool _isIfExists;

		/// <summary>
		/// True when IF EXISTS construct is used.
		/// </summary>
		public bool IsIfExists
		{
			get { return _isIfExists; }
			set { _isIfExists = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP statement which references list of objects
	/// </summary>
	[System.Serializable]
	public abstract partial class DropObjectsStatement : TSqlStatement
	{


		private List<SchemaObjectName> _objects = new List<SchemaObjectName>();

		/// <summary>
		/// Objects to be dropped
		/// </summary>
		public IList<SchemaObjectName> Objects
		{
			get { return _objects; }
		}

		private bool _isIfExists;

		/// <summary>
		/// True when IF EXISTS construct is used.
		/// </summary>
		public bool IsIfExists
		{
			get { return _isIfExists; }
			set { _isIfExists = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Objects.Count; i < count; ++i)
			{
				this.Objects[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP DATABASE statement
	/// </summary>
	[System.Serializable]
	public partial class DropDatabaseStatement : TSqlStatement
	{


		private List<Identifier> _databases = new List<Identifier>();

		/// <summary>
		/// Databases to be dropped
		/// </summary>
		public IList<Identifier> Databases
		{
			get { return _databases; }
		}

		private bool _isIfExists;

		/// <summary>
		/// True when IF EXISTS construct is used.
		/// </summary>
		public bool IsIfExists
		{
			get { return _isIfExists; }
			set { _isIfExists = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Databases.Count; i < count; ++i)
			{
				this.Databases[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP which has child objects (DROP INDEX or STATISTICS)
	/// </summary>
	[System.Serializable]
	public abstract partial class DropChildObjectsStatement : TSqlStatement
	{


		private List<ChildObjectName> _objects = new List<ChildObjectName>();

		/// <summary>
		/// Objects to be dropped
		/// </summary>
		public IList<ChildObjectName> Objects
		{
			get { return _objects; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Objects.Count; i < count; ++i)
			{
				this.Objects[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP INDEX statement
	/// </summary>
	[System.Serializable]
	public partial class DropIndexStatement : TSqlStatement
	{


		private List<DropIndexClauseBase> _dropIndexClauses = new List<DropIndexClauseBase>();

		/// <summary>
		/// Indicies (possibly, with options) to be dropped
		/// </summary>
		public IList<DropIndexClauseBase> DropIndexClauses
		{
			get { return _dropIndexClauses; }
		}

		private bool _isIfExists;

		/// <summary>
		/// True when IF EXISTS construct is used.
		/// </summary>
		public bool IsIfExists
		{
			get { return _isIfExists; }
			set { _isIfExists = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.DropIndexClauses.Count; i < count; ++i)
			{
				this.DropIndexClauses[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents single clause in DROP INDEX statement
	/// </summary>
	[System.Serializable]
	public abstract partial class DropIndexClauseBase : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents old-style clause in DROP INDEX statement
	/// </summary>
	[System.Serializable]
	public partial class BackwardsCompatibleDropIndexClause : DropIndexClauseBase
	{


		private ChildObjectName _index;

		/// <summary>
		/// Index and table name together
		/// </summary>
		public ChildObjectName Index
		{
			get { return _index; }
			set { UpdateTokenInfo(value); _index = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Index != null)
			{
				this.Index.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents relational or xml index in DROP INDEX statement
	/// </summary>
	[System.Serializable]
	public partial class DropIndexClause : DropIndexClauseBase
	{


		private Identifier _index;

		/// <summary>
		/// Index name
		/// </summary>
		public Identifier Index
		{
			get { return _index; }
			set { UpdateTokenInfo(value); _index = value; }
		}
		private SchemaObjectName _object;

		/// <summary>
		/// Table or view name
		/// </summary>
		public SchemaObjectName Object
		{
			get { return _object; }
			set { UpdateTokenInfo(value); _object = value; }
		}
		private List<IndexOption> _options = new List<IndexOption>();

		/// <summary>
		/// Represents the options for DROP INDEX statement
		/// </summary>
		public IList<IndexOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Index != null)
			{
				this.Index.Accept(visitor);
			}

			if (this.Object != null)
			{
				this.Object.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Move To option in DROP INDEX
	/// </summary>
	[System.Serializable]
	public partial class MoveToDropIndexOption : IndexOption
	{


		private FileGroupOrPartitionScheme _moveTo;

		/// <summary>
		/// The filegroup or partition scheme.
		/// </summary>
		public FileGroupOrPartitionScheme MoveTo
		{
			get { return _moveTo; }
			set { UpdateTokenInfo(value); _moveTo = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.MoveTo != null)
			{
				this.MoveTo.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the FILESTREAM_ON option in DROP INDEX
	/// </summary>
	[System.Serializable]
	public partial class FileStreamOnDropIndexOption : IndexOption, IFileStreamSpecifier
	{


		private IdentifierOrValueExpression _fileStreamOn;

		/// <summary>
		/// Optional specification of the filestream. Can be either Identifier or String literal.
		/// </summary>
		public IdentifierOrValueExpression FileStreamOn
		{
			get { return _fileStreamOn; }
			set { UpdateTokenInfo(value); _fileStreamOn = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FileStreamOn != null)
			{
				this.FileStreamOn.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents DROP STATISTICS statement
	/// </summary>
	[System.Serializable]
	public partial class DropStatisticsStatement : DropChildObjectsStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP TABLE statement
	/// </summary>
	[System.Serializable]
	public partial class DropTableStatement : DropObjectsStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP PROCEDURE statement
	/// </summary>
	[System.Serializable]
	public partial class DropProcedureStatement : DropObjectsStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP FUNCTION statement
	/// </summary>
	[System.Serializable]
	public partial class DropFunctionStatement : DropObjectsStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP VIEW statement
	/// </summary>
	[System.Serializable]
	public partial class DropViewStatement : DropObjectsStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP DEFAULT statement
	/// </summary>
	[System.Serializable]
	public partial class DropDefaultStatement : DropObjectsStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP RULE statement
	/// </summary>
	[System.Serializable]
	public partial class DropRuleStatement : DropObjectsStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP TRIGGER statement
	/// </summary>
	[System.Serializable]
	public partial class DropTriggerStatement : DropObjectsStatement
	{


		private TriggerScope _triggerScope;

		/// <summary>
		/// The scope of the trigger.
		/// </summary>
		public TriggerScope TriggerScope
		{
			get { return _triggerScope; }
			set { _triggerScope = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP SCHEMA statement
	/// </summary>
	[System.Serializable]
	public partial class DropSchemaStatement : TSqlStatement
	{


		private SchemaObjectName _schema;

		/// <summary>
		/// Schema to be dropped
		/// </summary>
		public SchemaObjectName Schema
		{
			get { return _schema; }
			set { UpdateTokenInfo(value); _schema = value; }
		}
		private DropSchemaBehavior _dropBehavior;

		/// <summary>
		/// Drop behavior in case of SQL 80 drop
		/// </summary>
		public DropSchemaBehavior DropBehavior
		{
			get { return _dropBehavior; }
			set { _dropBehavior = value; }
		}
		private bool _isIfExists;

		/// <summary>
		/// True when IF EXISTS construct is used.
		/// </summary>
		public bool IsIfExists
		{
			get { return _isIfExists; }
			set { _isIfExists = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Schema != null)
			{
				this.Schema.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the legacy style raiserror statement.
	/// </summary>
	[System.Serializable]
	public partial class RaiseErrorLegacyStatement : TSqlStatement
	{


		private ScalarExpression _firstParameter;

		/// <summary>
		/// Can be a variable, an integer or a negative integer.
		/// </summary>
		public ScalarExpression FirstParameter
		{
			get { return _firstParameter; }
			set { UpdateTokenInfo(value); _firstParameter = value; }
		}
		private ValueExpression _secondParameter;

		/// <summary>
		/// A string or a variable.
		/// </summary>
		public ValueExpression SecondParameter
		{
			get { return _secondParameter; }
			set { UpdateTokenInfo(value); _secondParameter = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.FirstParameter != null)
			{
				this.FirstParameter.Accept(visitor);
			}

			if (this.SecondParameter != null)
			{
				this.SecondParameter.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the raiserror statement.
	/// </summary>
	[System.Serializable]
	public partial class RaiseErrorStatement : TSqlStatement
	{


		private ScalarExpression _firstParameter;

		/// <summary>
		/// Can be a string, a variable, an integer or a negative integer.
		/// </summary>
		public ScalarExpression FirstParameter
		{
			get { return _firstParameter; }
			set { UpdateTokenInfo(value); _firstParameter = value; }
		}
		private ScalarExpression _secondParameter;

		/// <summary>
		/// Can be a variable, an integer or a negative integer.
		/// </summary>
		public ScalarExpression SecondParameter
		{
			get { return _secondParameter; }
			set { UpdateTokenInfo(value); _secondParameter = value; }
		}
		private ScalarExpression _thirdParameter;

		/// <summary>
		/// Can be a variable, an integer or a negative integer.
		/// </summary>
		public ScalarExpression ThirdParameter
		{
			get { return _thirdParameter; }
			set { UpdateTokenInfo(value); _thirdParameter = value; }
		}
		private List<ScalarExpression> _optionalParameters = new List<ScalarExpression>();

		/// <summary>
		/// Can be a string, a variable, an integer or a negative integer.
		/// </summary>
		public IList<ScalarExpression> OptionalParameters
		{
			get { return _optionalParameters; }
		}

		private RaiseErrorOptions _raiseErrorOptions;

		/// <summary>
		/// The raiserror options.
		/// </summary>
		public RaiseErrorOptions RaiseErrorOptions
		{
			get { return _raiseErrorOptions; }
			set { _raiseErrorOptions = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.FirstParameter != null)
			{
				this.FirstParameter.Accept(visitor);
			}

			if (this.SecondParameter != null)
			{
				this.SecondParameter.Accept(visitor);
			}

			if (this.ThirdParameter != null)
			{
				this.ThirdParameter.Accept(visitor);
			}

			for (Int32 i = 0, count = this.OptionalParameters.Count; i < count; ++i)
			{
				this.OptionalParameters[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the THROW statement
	/// </summary>
	[System.Serializable]
	public partial class ThrowStatement : TSqlStatement
	{


		private ValueExpression _errorNumber;

		/// <summary>
		/// The error number to be thrown.
		/// </summary>
		public ValueExpression ErrorNumber
		{
			get { return _errorNumber; }
			set { UpdateTokenInfo(value); _errorNumber = value; }
		}
		private ValueExpression _message;

		/// <summary>
		/// The error message
		/// </summary>
		public ValueExpression Message
		{
			get { return _message; }
			set { UpdateTokenInfo(value); _message = value; }
		}
		private ValueExpression _state;

		/// <summary>
		/// The error state
		/// </summary>
		public ValueExpression State
		{
			get { return _state; }
			set { UpdateTokenInfo(value); _state = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ErrorNumber != null)
			{
				this.ErrorNumber.Accept(visitor);
			}

			if (this.Message != null)
			{
				this.Message.Accept(visitor);
			}

			if (this.State != null)
			{
				this.State.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the use statement.
	/// </summary>
	[System.Serializable]
	public partial class UseStatement : TSqlStatement
	{


		private Identifier _databaseName;

		/// <summary>
		/// The database name.
		/// </summary>
		public Identifier DatabaseName
		{
			get { return _databaseName; }
			set { UpdateTokenInfo(value); _databaseName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.DatabaseName != null)
			{
				this.DatabaseName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the kill statement.
	/// </summary>
	[System.Serializable]
	public partial class KillStatement : TSqlStatement
	{


		private ScalarExpression _parameter;

		/// <summary>
		/// Can be an integer, a negative integer or a string.
		/// </summary>
		public ScalarExpression Parameter
		{
			get { return _parameter; }
			set { UpdateTokenInfo(value); _parameter = value; }
		}
		private bool _withStatusOnly;

		/// <summary>
		/// True if WITH STATUSONLY was specified.
		/// </summary>
		public bool WithStatusOnly
		{
			get { return _withStatusOnly; }
			set { _withStatusOnly = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Parameter != null)
			{
				this.Parameter.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the kill query notification subscription statement.
	/// </summary>
	[System.Serializable]
	public partial class KillQueryNotificationSubscriptionStatement : TSqlStatement
	{


		private Literal _subscriptionId;

		/// <summary>
		/// Represents the subscription id, is an literal of type integer. Will be null if All is true.
		/// </summary>
		public Literal SubscriptionId
		{
			get { return _subscriptionId; }
			set { UpdateTokenInfo(value); _subscriptionId = value; }
		}
		private bool _all;

		/// <summary>
		/// True if ALL was specified.
		/// </summary>
		public bool All
		{
			get { return _all; }
			set { _all = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SubscriptionId != null)
			{
				this.SubscriptionId.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the kill stats job statement.
	/// </summary>
	[System.Serializable]
	public partial class KillStatsJobStatement : TSqlStatement
	{


		private ScalarExpression _jobId;

		/// <summary>
		/// Represents the job id.
		/// </summary>
		public ScalarExpression JobId
		{
			get { return _jobId; }
			set { UpdateTokenInfo(value); _jobId = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.JobId != null)
			{
				this.JobId.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the checkpoint statement.
	/// </summary>
	[System.Serializable]
	public partial class CheckpointStatement : TSqlStatement
	{


		private Literal _duration;

		/// <summary>
		/// Integer that shows the duration, optional may be null.
		/// </summary>
		public Literal Duration
		{
			get { return _duration; }
			set { UpdateTokenInfo(value); _duration = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Duration != null)
			{
				this.Duration.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the reconfigure statement.
	/// </summary>
	[System.Serializable]
	public partial class ReconfigureStatement : TSqlStatement
	{


		private bool _withOverride;

		/// <summary>
		/// True if WITH OVERRIDE is used.
		/// </summary>
		public bool WithOverride
		{
			get { return _withOverride; }
			set { _withOverride = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the shutdown statement.
	/// </summary>
	[System.Serializable]
	public partial class ShutdownStatement : TSqlStatement
	{


		private bool _withNoWait;

		/// <summary>
		/// True if WITH NOWAIT is used.
		/// </summary>
		public bool WithNoWait
		{
			get { return _withNoWait; }
			set { _withNoWait = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the setuser statement.
	/// </summary>
	[System.Serializable]
	public partial class SetUserStatement : TSqlStatement
	{


		private ValueExpression _userName;

		/// <summary>
		/// Can be a string or a variable, optional may be null.
		/// </summary>
		public ValueExpression UserName
		{
			get { return _userName; }
			set { UpdateTokenInfo(value); _userName = value; }
		}
		private bool _withNoReset;

		/// <summary>
		/// True if WITH NORESET is used.
		/// </summary>
		public bool WithNoReset
		{
			get { return _withNoReset; }
			set { _withNoReset = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.UserName != null)
			{
				this.UserName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the truncate table statement.
	/// </summary>
	[System.Serializable]
	public partial class TruncateTableStatement : TSqlStatement
	{


		private SchemaObjectName _tableName;

		/// <summary>
		/// The table name.
		/// </summary>
		public SchemaObjectName TableName
		{
			get { return _tableName; }
			set { UpdateTokenInfo(value); _tableName = value; }
		}
		private List<CompressionPartitionRange> _partitionRanges = new List<CompressionPartitionRange>();

		/// <summary>
		/// Partitions to truncate. Can be empty.
		/// </summary>
		public IList<CompressionPartitionRange> PartitionRanges
		{
			get { return _partitionRanges; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.TableName != null)
			{
				this.TableName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.PartitionRanges.Count; i < count; ++i)
			{
				this.PartitionRanges[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents Set statement ending if { ON | OFF }
	/// </summary>
	[System.Serializable]
	public abstract partial class SetOnOffStatement : TSqlStatement
	{


		private bool _isOn;

		/// <summary>
		/// Indicates whether this particular set statement is set to an ON ( true ) or OFF ( false ) state
		/// </summary>
		public bool IsOn
		{
			get { return _isOn; }
			set { _isOn = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the various Set {...} { ON | OFF } options in the TSQL grammar.
	/// </summary>
	[System.Serializable]
	public partial class PredicateSetStatement : SetOnOffStatement
	{


		private SetOptions _options;

		/// <summary>
		/// The specific set option(s) that this statement represents
		/// </summary>
		public SetOptions Options
		{
			get { return _options; }
			set { _options = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents Set Statistics {...} { ON | OFF } options in the TSQL grammar.
	/// </summary>
	[System.Serializable]
	public partial class SetStatisticsStatement : SetOnOffStatement
	{


		private SetStatisticsOptions _options;

		/// <summary>
		/// The specific set option(s) that this statement represents
		/// </summary>
		public SetStatisticsOptions Options
		{
			get { return _options; }
			set { _options = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SET ROWCOUNT statement
	/// </summary>
	[System.Serializable]
	public partial class SetRowCountStatement : TSqlStatement
	{


		private ValueExpression _numberRows;

		/// <summary>
		/// Number of rows to process before stopping query
		/// </summary>
		public ValueExpression NumberRows
		{
			get { return _numberRows; }
			set { UpdateTokenInfo(value); _numberRows = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.NumberRows != null)
			{
				this.NumberRows.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SET OFFSETS statement
	/// </summary>
	[System.Serializable]
	public partial class SetOffsetsStatement : SetOnOffStatement
	{


		private SetOffsets _options;

		/// <summary>
		/// Keywords list (as flags)
		/// </summary>
		public SetOffsets Options
		{
			get { return _options; }
			set { _options = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents single command in a SET statement (e.g. set !language us_english!)
	/// </summary>
	[System.Serializable]
	public abstract partial class SetCommand : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// To be broken into separate classes - when we would have time. For now, represents single command in a SET statement (e.g. set !language us_english!)
	/// </summary>
	[System.Serializable]
	public partial class GeneralSetCommand : SetCommand
	{


		private GeneralSetCommandType _commandType;

		/// <summary>
		/// Command type
		/// </summary>
		public GeneralSetCommandType CommandType
		{
			get { return _commandType; }
			set { _commandType = value; }
		}
		private ScalarExpression _parameter;

		/// <summary>
		/// Command parameter
		/// </summary>
		public ScalarExpression Parameter
		{
			get { return _parameter; }
			set { UpdateTokenInfo(value); _parameter = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Parameter != null)
			{
				this.Parameter.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SET FIPS_FLAGGER command
	/// </summary>
	[System.Serializable]
	public partial class SetFipsFlaggerCommand : SetCommand
	{


		private FipsComplianceLevel _complianceLevel;

		/// <summary>
		/// Compliance level
		/// </summary>
		public FipsComplianceLevel ComplianceLevel
		{
			get { return _complianceLevel; }
			set { _complianceLevel = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SET command statement (e.g. SET language us_english)
	/// </summary>
	[System.Serializable]
	public partial class SetCommandStatement : TSqlStatement
	{


		private List<SetCommand> _commands = new List<SetCommand>();

		/// <summary>
		/// Individual commands
		/// </summary>
		public IList<SetCommand> Commands
		{
			get { return _commands; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Commands.Count; i < count; ++i)
			{
				this.Commands[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SET TRANSACTION ISOLATION LEVEL statement (?) Snapshot (?)
	/// </summary>
	[System.Serializable]
	public partial class SetTransactionIsolationLevelStatement : TSqlStatement
	{


		private IsolationLevel _level;

		/// <summary>
		/// Isolation level
		/// </summary>
		public IsolationLevel Level
		{
			get { return _level; }
			set { _level = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SET TEXTSIZE statement
	/// </summary>
	[System.Serializable]
	public partial class SetTextSizeStatement : TSqlStatement
	{


		private ScalarExpression _textSize;

		/// <summary>
		/// Text size (number)
		/// </summary>
		public ScalarExpression TextSize
		{
			get { return _textSize; }
			set { UpdateTokenInfo(value); _textSize = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.TextSize != null)
			{
				this.TextSize.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SET IDENTITY_INSERT statement
	/// </summary>
	[System.Serializable]
	public partial class SetIdentityInsertStatement : SetOnOffStatement
	{


		private SchemaObjectName _table;

		/// <summary>
		/// Name of a table with an idntity column
		/// </summary>
		public SchemaObjectName Table
		{
			get { return _table; }
			set { UpdateTokenInfo(value); _table = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Table != null)
			{
				this.Table.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SET ERRLVL statement
	/// </summary>
	[System.Serializable]
	public partial class SetErrorLevelStatement : TSqlStatement
	{


		private ScalarExpression _level;

		/// <summary>
		/// Error level
		/// </summary>
		public ScalarExpression Level
		{
			get { return _level; }
			set { UpdateTokenInfo(value); _level = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Level != null)
			{
				this.Level.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE DATABASE statement
	/// </summary>
	[System.Serializable]
	public partial class CreateDatabaseStatement : TSqlStatement, ICollationSetter
	{


		private Identifier _databaseName;

		/// <summary>
		/// Name of the database being created
		/// </summary>
		public Identifier DatabaseName
		{
			get { return _databaseName; }
			set { UpdateTokenInfo(value); _databaseName = value; }
		}
		private ContainmentDatabaseOption _containment;

		/// <summary>
		/// The containment database option.
		/// </summary>
		public ContainmentDatabaseOption Containment
		{
			get { return _containment; }
			set { UpdateTokenInfo(value); _containment = value; }
		}
		private List<FileGroupDefinition> _fileGroups = new List<FileGroupDefinition>();

		/// <summary>
		/// Filegroups (including primary one) from LOG ON clause
		/// </summary>
		public IList<FileGroupDefinition> FileGroups
		{
			get { return _fileGroups; }
		}

		private List<FileDeclaration> _logOn = new List<FileDeclaration>();

		/// <summary>
		/// Log on file declarations.
		/// </summary>
		public IList<FileDeclaration> LogOn
		{
			get { return _logOn; }
		}

		private List<DatabaseOption> _options = new List<DatabaseOption>();

		/// <summary>
		/// Database Options for Create Database
		/// </summary>
		public IList<DatabaseOption> Options
		{
			get { return _options; }
		}

		private AttachMode _attachMode;

		/// <summary>
		/// Attach mode (?)
		/// </summary>
		public AttachMode AttachMode
		{
			get { return _attachMode; }
			set { _attachMode = value; }
		}
		private Identifier _databaseSnapshot;

		/// <summary>
		/// Database snapshot name
		/// </summary>
		public Identifier DatabaseSnapshot
		{
			get { return _databaseSnapshot; }
			set { UpdateTokenInfo(value); _databaseSnapshot = value; }
		}
		private MultiPartIdentifier _copyOf;

		/// <summary>
		/// Source database copy name.
		/// </summary>
		public MultiPartIdentifier CopyOf
		{
			get { return _copyOf; }
			set { UpdateTokenInfo(value); _copyOf = value; }
		}
		private Identifier _collation;

		/// <summary>
		/// Collation identifier
		/// </summary>
		public Identifier Collation
		{
			get { return _collation; }
			set { UpdateTokenInfo(value); _collation = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.DatabaseName != null)
			{
				this.DatabaseName.Accept(visitor);
			}

			if (this.Containment != null)
			{
				this.Containment.Accept(visitor);
			}

			for (Int32 i = 0, count = this.FileGroups.Count; i < count; ++i)
			{
				this.FileGroups[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.LogOn.Count; i < count; ++i)
			{
				this.LogOn[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			if (this.DatabaseSnapshot != null)
			{
				this.DatabaseSnapshot.Accept(visitor);
			}

			if (this.CopyOf != null)
			{
				this.CopyOf.Accept(visitor);
			}

			if (this.Collation != null)
			{
				this.Collation.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents single file declaration in CREATE DATABASE statement
	/// </summary>
	[System.Serializable]
	public partial class FileDeclaration : TSqlFragment
	{


		private List<FileDeclarationOption> _options = new List<FileDeclarationOption>();

		/// <summary>
		/// Options comprising declaration
		/// </summary>
		public IList<FileDeclarationOption> Options
		{
			get { return _options; }
		}

		private bool _isPrimary;

		/// <summary>
		/// If belongs to primary filegroup
		/// </summary>
		public bool IsPrimary
		{
			get { return _isPrimary; }
			set { _isPrimary = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents single file declaration option in CREATE DATABASE statement
	/// </summary>
	[System.Serializable]
	public partial class FileDeclarationOption : TSqlFragment
	{


		private FileDeclarationOptionKind _optionKind;

		/// <summary>
		/// The file declaration option kind.
		/// </summary>
		public FileDeclarationOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The file declaration option for NAME or NEWNAME.
	/// </summary>
	[System.Serializable]
	public partial class NameFileDeclarationOption : FileDeclarationOption
	{


		private IdentifierOrValueExpression _logicalFileName;

		/// <summary>
		/// Option value (Literal or Identifer)
		/// </summary>
		public IdentifierOrValueExpression LogicalFileName
		{
			get { return _logicalFileName; }
			set { UpdateTokenInfo(value); _logicalFileName = value; }
		}
		private bool _isNewName;

		/// <summary>
		/// True if this is NEWNAME option (false in case of NAME)
		/// </summary>
		public bool IsNewName
		{
			get { return _isNewName; }
			set { _isNewName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.LogicalFileName != null)
			{
				this.LogicalFileName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The file declaration option for FILENAME.
	/// </summary>
	[System.Serializable]
	public partial class FileNameFileDeclarationOption : FileDeclarationOption
	{


		private Literal _oSFileName;

		/// <summary>
		/// Option value
		/// </summary>
		public Literal OSFileName
		{
			get { return _oSFileName; }
			set { UpdateTokenInfo(value); _oSFileName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.OSFileName != null)
			{
				this.OSFileName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The file declaration option for SIZE.
	/// </summary>
	[System.Serializable]
	public partial class SizeFileDeclarationOption : FileDeclarationOption
	{


		private Literal _size;

		/// <summary>
		/// Option value
		/// </summary>
		public Literal Size
		{
			get { return _size; }
			set { UpdateTokenInfo(value); _size = value; }
		}
		private MemoryUnit _units;

		/// <summary>
		/// Units in which size is expressed
		/// </summary>
		public MemoryUnit Units
		{
			get { return _units; }
			set { _units = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Size != null)
			{
				this.Size.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The file declaration value for MAXSIZE.
	/// </summary>
	[System.Serializable]
	public partial class MaxSizeFileDeclarationOption : FileDeclarationOption
	{


		private Literal _maxSize;

		/// <summary>
		/// Option value
		/// </summary>
		public Literal MaxSize
		{
			get { return _maxSize; }
			set { UpdateTokenInfo(value); _maxSize = value; }
		}
		private MemoryUnit _units;

		/// <summary>
		/// Units in which size is expressed
		/// </summary>
		public MemoryUnit Units
		{
			get { return _units; }
			set { _units = value; }
		}
		private bool _unlimited;

		/// <summary>
		/// True if UNLIMITED was specified as option value - MaxSize should be null in this case
		/// </summary>
		public bool Unlimited
		{
			get { return _unlimited; }
			set { _unlimited = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.MaxSize != null)
			{
				this.MaxSize.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The file declaration option for FILEGROWTH.
	/// </summary>
	[System.Serializable]
	public partial class FileGrowthFileDeclarationOption : FileDeclarationOption
	{


		private Literal _growthIncrement;

		/// <summary>
		/// Option value
		/// </summary>
		public Literal GrowthIncrement
		{
			get { return _growthIncrement; }
			set { UpdateTokenInfo(value); _growthIncrement = value; }
		}
		private MemoryUnit _units;

		/// <summary>
		/// Units in which size is expressed
		/// </summary>
		public MemoryUnit Units
		{
			get { return _units; }
			set { _units = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.GrowthIncrement != null)
			{
				this.GrowthIncrement.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represent filegroup in CREATE DATABASE statement
	/// </summary>
	[System.Serializable]
	public partial class FileGroupDefinition : TSqlFragment
	{


		private Identifier _name;

		/// <summary>
		/// Filegroup name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<FileDeclaration> _fileDeclarations = new List<FileDeclaration>();

		/// <summary>
		/// File declarations in this group.
		/// </summary>
		public IList<FileDeclaration> FileDeclarations
		{
			get { return _fileDeclarations; }
		}

		private bool _isDefault;

		/// <summary>
		/// If this filegroup is default one in the database.
		/// </summary>
		public bool IsDefault
		{
			get { return _isDefault; }
			set { _isDefault = value; }
		}
		private bool _containsFileStream;

		/// <summary>
		/// True if filegroup containst filestream.
		/// </summary>
		public bool ContainsFileStream
		{
			get { return _containsFileStream; }
			set { _containsFileStream = value; }
		}
		private bool _containsMemoryOptimizedData;

		/// <summary>
		/// True if filegroup containst memory optimized data.
		/// </summary>
		public bool ContainsMemoryOptimizedData
		{
			get { return _containsMemoryOptimizedData; }
			set { _containsMemoryOptimizedData = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.FileDeclarations.Count; i < count; ++i)
			{
				this.FileDeclarations[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER DATABASE statement
	/// </summary>
	[System.Serializable]
	public abstract partial class AlterDatabaseStatement : TSqlStatement
	{


		private Identifier _databaseName;

		/// <summary>
		/// Database to alter
		/// </summary>
		public Identifier DatabaseName
		{
			get { return _databaseName; }
			set { UpdateTokenInfo(value); _databaseName = value; }
		}
		private bool _useCurrent;

		/// <summary>
		/// Whether CURRENT is specified instead of DatabaseName
		/// </summary>
		public bool UseCurrent
		{
			get { return _useCurrent; }
			set { _useCurrent = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.DatabaseName != null)
			{
				this.DatabaseName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER DATABASE SCOPED CONFIGURATION statement
	/// </summary>
	[System.Serializable]
	public abstract partial class AlterDatabaseScopedConfigurationStatement : TSqlStatement
	{


		private bool _secondary;

		/// <summary>
		/// Whether configuration setting is for Secondary database
		/// </summary>
		public bool Secondary
		{
			get { return _secondary; }
			set { _secondary = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER DATABASE SCOPED CONFIGURATION SET statement
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseScopedConfigurationSetStatement : AlterDatabaseScopedConfigurationStatement
	{


		private DatabaseConfigurationSetOption _option;

		/// <summary>
		/// Option specified in this statement
		/// </summary>
		public DatabaseConfigurationSetOption Option
		{
			get { return _option; }
			set { UpdateTokenInfo(value); _option = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Option != null)
			{
				this.Option.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ALTER DATABASE SCOPED CONFIGURATION CLEAR statement
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseScopedConfigurationClearStatement : AlterDatabaseScopedConfigurationStatement
	{


		private DatabaseConfigurationClearOption _option;

		/// <summary>
		/// Option specified in this statement
		/// </summary>
		public DatabaseConfigurationClearOption Option
		{
			get { return _option; }
			set { UpdateTokenInfo(value); _option = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Option != null)
			{
				this.Option.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Single option in ALTER DATABASE SCOPED CONFIGURATION statement, CLEAR option
	/// </summary>
	[System.Serializable]
	public partial class DatabaseConfigurationClearOption : TSqlFragment
	{


		private DatabaseConfigClearOptionKind _optionKind;

		/// <summary>
		/// The option kind.
		/// </summary>
		public DatabaseConfigClearOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private BinaryLiteral _planHandle;

		/// <summary>
		/// Optional PlanHandle value
		/// </summary>
		public BinaryLiteral PlanHandle
		{
			get { return _planHandle; }
			set { UpdateTokenInfo(value); _planHandle = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.PlanHandle != null)
			{
				this.PlanHandle.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Single option in ALTER DATABASE SCOPED CONFIGURATION statement, SET option
	/// </summary>
	[System.Serializable]
	public partial class DatabaseConfigurationSetOption : TSqlFragment
	{


		private DatabaseConfigSetOptionKind _optionKind;

		/// <summary>
		/// The option kind.
		/// </summary>
		public DatabaseConfigSetOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private Identifier _genericOptionKind;

		/// <summary>
		/// The generic option kind.
		/// </summary>
		public Identifier GenericOptionKind
		{
			get { return _genericOptionKind; }
			set { _genericOptionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Option which can be set to ON or OFF or PRIMARY.
	/// </summary>
	[System.Serializable]
	public partial class OnOffPrimaryConfigurationOption : DatabaseConfigurationSetOption
	{


		private DatabaseConfigurationOptionState _optionState;

		/// <summary>
		/// Option state
		/// </summary>
		public DatabaseConfigurationOptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// MAXDOP option in ALTER DATABASE SCOPED CONFIGURATION statement
	/// </summary>
	[System.Serializable]
	public partial class MaxDopConfigurationOption : DatabaseConfigurationSetOption
	{


		private Literal _value;

		/// <summary>
		/// MAXDOP Value
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { _value = value; }
		}
		private bool _primary;

		/// <summary>
		/// Can only be set on secondary database to match primary database's maxdop value
		/// </summary>
		public bool Primary
		{
			get { return _primary; }
			set { _primary = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// DWCompatibilityLevel option in ALTER DATABASE SCOPED CONFIGURATION statement
	/// </summary>
	[System.Serializable]
	public partial class DWCompatibilityLevelConfigurationOption : DatabaseConfigurationSetOption
	{


		private Literal _value;

		/// <summary>
		/// DWCompatibilityLevel Value
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Option which can be set to a signed integer, string literal, identifier or the keywords ON/OFF/PRIMARY.
	/// </summary>
	[System.Serializable]
	public partial class GenericConfigurationOption : DatabaseConfigurationSetOption
	{


		private IdentifierOrScalarExpression _genericOptionState;

		/// <summary>
		/// Generic option state
		/// </summary>
		public IdentifierOrScalarExpression GenericOptionState
		{
			get { return _genericOptionState; }
			set { _genericOptionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Alter COLLATE case from ALTER DATABASE
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseCollateStatement : AlterDatabaseStatement, ICollationSetter
	{


		private Identifier _collation;

		/// <summary>
		/// Collation identifier
		/// </summary>
		public Identifier Collation
		{
			get { return _collation; }
			set { UpdateTokenInfo(value); _collation = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Collation != null)
			{
				this.Collation.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Rebuild log case from ALTER DATABASE (undocumented)
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseRebuildLogStatement : AlterDatabaseStatement
	{


		private FileDeclaration _fileDeclaration;

		/// <summary>
		/// Optional file declaration
		/// </summary>
		public FileDeclaration FileDeclaration
		{
			get { return _fileDeclaration; }
			set { UpdateTokenInfo(value); _fileDeclaration = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FileDeclaration != null)
			{
				this.FileDeclaration.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Add file case from ALTER DATABASE
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseAddFileStatement : AlterDatabaseStatement
	{


		private List<FileDeclaration> _fileDeclarations = new List<FileDeclaration>();

		/// <summary>
		/// Files to add to database.
		/// </summary>
		public IList<FileDeclaration> FileDeclarations
		{
			get { return _fileDeclarations; }
		}

		private Identifier _fileGroup;

		/// <summary>
		/// To which filegroup files are added (optional)
		/// </summary>
		public Identifier FileGroup
		{
			get { return _fileGroup; }
			set { UpdateTokenInfo(value); _fileGroup = value; }
		}
		private bool _isLog;

		/// <summary>
		/// If we are adding log files
		/// </summary>
		public bool IsLog
		{
			get { return _isLog; }
			set { _isLog = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.FileDeclarations.Count; i < count; ++i)
			{
				this.FileDeclarations[i].Accept(visitor);
			}

			if (this.FileGroup != null)
			{
				this.FileGroup.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Add and remove filegroup cases from ALTER DATABASE
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseAddFileGroupStatement : AlterDatabaseStatement
	{


		private Identifier _fileGroup;

		/// <summary>
		/// Filegroup to be added to database
		/// </summary>
		public Identifier FileGroup
		{
			get { return _fileGroup; }
			set { UpdateTokenInfo(value); _fileGroup = value; }
		}
		private bool _containsFileStream;

		/// <summary>
		/// True if filegroup containst filestream.
		/// </summary>
		public bool ContainsFileStream
		{
			get { return _containsFileStream; }
			set { _containsFileStream = value; }
		}
		private bool _containsMemoryOptimizedData;

		/// <summary>
		/// True if filegroup containst memory optimized data.
		/// </summary>
		public bool ContainsMemoryOptimizedData
		{
			get { return _containsMemoryOptimizedData; }
			set { _containsMemoryOptimizedData = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FileGroup != null)
			{
				this.FileGroup.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Add and remove filegroup cases from ALTER DATABASE
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseRemoveFileGroupStatement : AlterDatabaseStatement
	{


		private Identifier _fileGroup;

		/// <summary>
		/// Filegroup to be removed from database.
		/// </summary>
		public Identifier FileGroup
		{
			get { return _fileGroup; }
			set { UpdateTokenInfo(value); _fileGroup = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FileGroup != null)
			{
				this.FileGroup.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Remove file case from ALTER DATABASE
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseRemoveFileStatement : AlterDatabaseStatement
	{


		private Identifier _file;

		/// <summary>
		/// File to be removed from database
		/// </summary>
		public Identifier File
		{
			get { return _file; }
			set { UpdateTokenInfo(value); _file = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.File != null)
			{
				this.File.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Modify name case from ALTER DATABASE
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseModifyNameStatement : AlterDatabaseStatement
	{


		private Identifier _newDatabaseName;

		/// <summary>
		/// New database name
		/// </summary>
		public Identifier NewDatabaseName
		{
			get { return _newDatabaseName; }
			set { UpdateTokenInfo(value); _newDatabaseName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.NewDatabaseName != null)
			{
				this.NewDatabaseName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Modify file case from ALTER DATABASE
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseModifyFileStatement : AlterDatabaseStatement
	{


		private FileDeclaration _fileDeclaration;

		/// <summary>
		/// File to modify
		/// </summary>
		public FileDeclaration FileDeclaration
		{
			get { return _fileDeclaration; }
			set { UpdateTokenInfo(value); _fileDeclaration = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FileDeclaration != null)
			{
				this.FileDeclaration.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Modify filegroup case from ALTER DATABASE
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseModifyFileGroupStatement : AlterDatabaseStatement
	{


		private Identifier _fileGroup;

		/// <summary>
		/// Filegroup to modify
		/// </summary>
		public Identifier FileGroup
		{
			get { return _fileGroup; }
			set { UpdateTokenInfo(value); _fileGroup = value; }
		}
		private Identifier _newFileGroupName;

		/// <summary>
		/// New filegroup name (might be null)
		/// </summary>
		public Identifier NewFileGroupName
		{
			get { return _newFileGroupName; }
			set { UpdateTokenInfo(value); _newFileGroupName = value; }
		}
		private bool _makeDefault;

		/// <summary>
		/// If true, makes specified filegroup default one in database
		/// </summary>
		public bool MakeDefault
		{
			get { return _makeDefault; }
			set { _makeDefault = value; }
		}
		private ModifyFileGroupOption _updatabilityOption;

		/// <summary>
		/// If not None, specifies new filegroup updatability option
		/// </summary>
		public ModifyFileGroupOption UpdatabilityOption
		{
			get { return _updatabilityOption; }
			set { _updatabilityOption = value; }
		}
		private AlterDatabaseTermination _termination;

		/// <summary>
		/// Optional termination options
		/// </summary>
		public AlterDatabaseTermination Termination
		{
			get { return _termination; }
			set { UpdateTokenInfo(value); _termination = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FileGroup != null)
			{
				this.FileGroup.Accept(visitor);
			}

			if (this.NewFileGroupName != null)
			{
				this.NewFileGroupName.Accept(visitor);
			}

			if (this.Termination != null)
			{
				this.Termination.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Contains termination information
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseTermination : TSqlFragment
	{


		private bool _immediateRollback;

		/// <summary>
		/// True if ROLLBACK IMMEDIATE was specified
		/// </summary>
		public bool ImmediateRollback
		{
			get { return _immediateRollback; }
			set { _immediateRollback = value; }
		}
		private Literal _rollbackAfter;

		/// <summary>
		/// Rollback after that many seconds
		/// </summary>
		public Literal RollbackAfter
		{
			get { return _rollbackAfter; }
			set { UpdateTokenInfo(value); _rollbackAfter = value; }
		}
		private bool _noWait;

		/// <summary>
		/// True if NO_WAIT was specified
		/// </summary>
		public bool NoWait
		{
			get { return _noWait; }
			set { _noWait = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.RollbackAfter != null)
			{
				this.RollbackAfter.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SET case in ALTER DATABASE statement
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseSetStatement : AlterDatabaseStatement
	{


		private AlterDatabaseTermination _termination;

		/// <summary>
		/// Optional termination options
		/// </summary>
		public AlterDatabaseTermination Termination
		{
			get { return _termination; }
			set { UpdateTokenInfo(value); _termination = value; }
		}
		private List<DatabaseOption> _options = new List<DatabaseOption>();

		/// <summary>
		/// Options specified in this statement
		/// </summary>
		public IList<DatabaseOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Termination != null)
			{
				this.Termination.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Single option in ALTER DATABASE statement, SET case
	/// </summary>
	[System.Serializable]
	public partial class DatabaseOption : TSqlFragment
	{


		private DatabaseOptionKind _optionKind;

		/// <summary>
		/// The option kind.
		/// </summary>
		public DatabaseOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Option which can be set to ON or OFF, in CREATE/ALTER DATABASE statement.
	/// </summary>
	[System.Serializable]
	public partial class OnOffDatabaseOption : DatabaseOption
	{


		private OptionState _optionState;

		/// <summary>
		/// Option state
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Database option with parentheses-wrapped suboptions.
	/// </summary>
	[System.Serializable]
	public partial class AutoCreateStatisticsDatabaseOption : OnOffDatabaseOption
	{


		private bool _hasIncremental;

		/// <summary>
		/// If IncrementalState is specified.
		/// </summary>
		public bool HasIncremental
		{
			get { return _hasIncremental; }
			set { _hasIncremental = value; }
		}
		private OptionState _incrementalState;

		/// <summary>
		/// Option if autocreated statistics are incremental.
		/// </summary>
		public OptionState IncrementalState
		{
			get { return _incrementalState; }
			set { _incrementalState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Database option for containment
	/// </summary>
	[System.Serializable]
	public partial class ContainmentDatabaseOption : DatabaseOption
	{


		private ContainmentOptionKind _value;

		/// <summary>
		/// The containment setting
		/// </summary>
		public ContainmentOptionKind Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Database option for HADR.
	/// </summary>
	[System.Serializable]
	public partial class HadrDatabaseOption : DatabaseOption
	{


		private HadrDatabaseOptionKind _hadrOption;

		/// <summary>
		/// The hadr option.
		/// </summary>
		public HadrDatabaseOptionKind HadrOption
		{
			get { return _hadrOption; }
			set { _hadrOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Database option for hadr availability group
	/// </summary>
	[System.Serializable]
	public partial class HadrAvailabilityGroupDatabaseOption : HadrDatabaseOption
	{


		private Identifier _groupName;

		/// <summary>
		/// The group name.
		/// </summary>
		public Identifier GroupName
		{
			get { return _groupName; }
			set { UpdateTokenInfo(value); _groupName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.GroupName != null)
			{
				this.GroupName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Database option for delayed durability
	/// </summary>
	[System.Serializable]
	public partial class DelayedDurabilityDatabaseOption : DatabaseOption
	{


		private DelayedDurabilityOptionKind _value;

		/// <summary>
		/// The delayed durability setting
		/// </summary>
		public DelayedDurabilityOptionKind Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// CURSOR_DEFAULT option in ALTER DATABASE statement, SET case
	/// </summary>
	[System.Serializable]
	public partial class CursorDefaultDatabaseOption : DatabaseOption
	{


		private bool _isLocal;

		/// <summary>
		/// True if cursor default is set to LOCAL, false if set to GLOBAL
		/// </summary>
		public bool IsLocal
		{
			get { return _isLocal; }
			set { _isLocal = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// RECOVERY option in ALTER DATABASE statement, SET case
	/// </summary>
	[System.Serializable]
	public partial class RecoveryDatabaseOption : DatabaseOption
	{


		private RecoveryDatabaseOptionKind _value;

		/// <summary>
		/// Actual option value
		/// </summary>
		public RecoveryDatabaseOptionKind Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// TARGET_RECOVERY_TIME option in ALTER DATABASE statement, SET case
	/// </summary>
	[System.Serializable]
	public partial class TargetRecoveryTimeDatabaseOption : DatabaseOption
	{


		private Literal _recoveryTime;

		/// <summary>
		/// Specified retention period.
		/// </summary>
		public Literal RecoveryTime
		{
			get { return _recoveryTime; }
			set { UpdateTokenInfo(value); _recoveryTime = value; }
		}
		private TimeUnit _unit;

		/// <summary>
		/// Units (seconds|minutes) for recovery time.
		/// </summary>
		public TimeUnit Unit
		{
			get { return _unit; }
			set { _unit = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.RecoveryTime != null)
			{
				this.RecoveryTime.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// PAGE_VERIFY option in ALTER DATABASE statement, SET case
	/// </summary>
	[System.Serializable]
	public partial class PageVerifyDatabaseOption : DatabaseOption
	{


		private PageVerifyDatabaseOptionKind _value;

		/// <summary>
		/// Actual option value
		/// </summary>
		public PageVerifyDatabaseOptionKind Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// PARTNER option in ALTER DATABASE statement, SET case
	/// </summary>
	[System.Serializable]
	public partial class PartnerDatabaseOption : DatabaseOption
	{


		private Literal _partnerServer;

		/// <summary>
		/// Partner server - if specified
		/// </summary>
		public Literal PartnerServer
		{
			get { return _partnerServer; }
			set { UpdateTokenInfo(value); _partnerServer = value; }
		}
		private PartnerDatabaseOptionKind _partnerOption;

		/// <summary>
		/// Partner option
		/// </summary>
		public PartnerDatabaseOptionKind PartnerOption
		{
			get { return _partnerOption; }
			set { _partnerOption = value; }
		}
		private Literal _timeout;

		/// <summary>
		/// Timeout - if specified
		/// </summary>
		public Literal Timeout
		{
			get { return _timeout; }
			set { UpdateTokenInfo(value); _timeout = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.PartnerServer != null)
			{
				this.PartnerServer.Accept(visitor);
			}

			if (this.Timeout != null)
			{
				this.Timeout.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// WITNESS option in ALTER DATABASE statement, SET case
	/// </summary>
	[System.Serializable]
	public partial class WitnessDatabaseOption : DatabaseOption
	{


		private Literal _witnessServer;

		/// <summary>
		/// Witness server if specified
		/// </summary>
		public Literal WitnessServer
		{
			get { return _witnessServer; }
			set { UpdateTokenInfo(value); _witnessServer = value; }
		}
		private bool _isOff;

		/// <summary>
		/// If OFF was specified
		/// </summary>
		public bool IsOff
		{
			get { return _isOff; }
			set { _isOff = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.WitnessServer != null)
			{
				this.WitnessServer.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// PARAMETERIZATION option in ALTER DATABASE statement, SET case
	/// </summary>
	[System.Serializable]
	public partial class ParameterizationDatabaseOption : DatabaseOption
	{


		private bool _isSimple;

		/// <summary>
		/// True if case of SIMPLE parameterization, false in case of FORCED parameterization
		/// </summary>
		public bool IsSimple
		{
			get { return _isSimple; }
			set { _isSimple = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Database option with a literal value
	/// </summary>
	[System.Serializable]
	public partial class LiteralDatabaseOption : DatabaseOption
	{


		private Literal _value;

		/// <summary>
		/// The literal value.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Database option with an identifier value
	/// </summary>
	[System.Serializable]
	public partial class IdentifierDatabaseOption : DatabaseOption
	{


		private Identifier _value;

		/// <summary>
		/// The Identifier value.
		/// </summary>
		public Identifier Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// CHANGE_TRACKING option in ALTER DATABASE statement, SET case
	/// </summary>
	[System.Serializable]
	public partial class ChangeTrackingDatabaseOption : DatabaseOption
	{


		private OptionState _optionState;

		/// <summary>
		/// Option state.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}
		private List<ChangeTrackingOptionDetail> _details = new List<ChangeTrackingOptionDetail>();

		/// <summary>
		/// Optional CHANGE_RETENTION and AUTO_CLEANUP details.
		/// </summary>
		public IList<ChangeTrackingOptionDetail> Details
		{
			get { return _details; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Details.Count; i < count; ++i)
			{
				this.Details[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// One detail for ChangeTrackingDatabaseOption
	/// </summary>
	[System.Serializable]
	public abstract partial class ChangeTrackingOptionDetail : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// AUTO_CLEANUP part of CHANGE_TRACKING option in ALTER DATABASE SET statement.
	/// </summary>
	[System.Serializable]
	public partial class AutoCleanupChangeTrackingOptionDetail : ChangeTrackingOptionDetail
	{


		private bool _isOn;

		/// <summary>
		/// True if AUTO_CLEANUP was set to ON, false otherwise.
		/// </summary>
		public bool IsOn
		{
			get { return _isOn; }
			set { _isOn = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// CHANGE_RETENTION part of CHANGE_TRACKING option in ALTER DATABASE SET statement.
	/// </summary>
	[System.Serializable]
	public partial class ChangeRetentionChangeTrackingOptionDetail : ChangeTrackingOptionDetail
	{


		private Literal _retentionPeriod;

		/// <summary>
		/// Specified retention period.
		/// </summary>
		public Literal RetentionPeriod
		{
			get { return _retentionPeriod; }
			set { UpdateTokenInfo(value); _retentionPeriod = value; }
		}
		private TimeUnit _unit;

		/// <summary>
		/// Units (days|hours|minutes) for retention period.
		/// </summary>
		public TimeUnit Unit
		{
			get { return _unit; }
			set { _unit = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.RetentionPeriod != null)
			{
				this.RetentionPeriod.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// ACCELERATED_DATABASE_RECOVERY option in ALTER DATABASE statement, SET case
	/// </summary>
	[System.Serializable]
	public partial class AcceleratedDatabaseRecoveryDatabaseOption : DatabaseOption
	{


		private OptionState _optionState;

		/// <summary>
		/// Option state.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Query Store (QDS) option in ALTER DATABASE statement, SET case
	/// </summary>
	[System.Serializable]
	public partial class QueryStoreDatabaseOption : DatabaseOption
	{


		private bool _clear;

		/// <summary>
		/// True if Clear QDS option was specified
		/// </summary>
		public bool Clear
		{
			get { return _clear; }
			set { _clear = value; }
		}
		private bool _clearAll;

		/// <summary>
		/// True if Clear ALL QDS option was specified
		/// </summary>
		public bool ClearAll
		{
			get { return _clearAll; }
			set { _clearAll = value; }
		}
		private OptionState _optionState;

		/// <summary>
		/// Option state.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}
		private List<QueryStoreOption> _options = new List<QueryStoreOption>();

		/// <summary>
		/// Options to be set.
		/// </summary>
		public IList<QueryStoreOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// A single query store option.
	/// </summary>
	[System.Serializable]
	public abstract partial class QueryStoreOption : TSqlFragment
	{


		private QueryStoreOptionKind _optionKind;

		/// <summary>
		/// The Query Store Option kind.
		/// </summary>
		public QueryStoreOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Desired State part of QueryStore Options
	/// </summary>
	[System.Serializable]
	public partial class QueryStoreDesiredStateOption : QueryStoreOption
	{


		private QueryStoreDesiredStateOptionKind _value;

		/// <summary>
		/// Possible values
		/// </summary>
		public QueryStoreDesiredStateOptionKind Value
		{
			get { return _value; }
			set { _value = value; }
		}
		private bool _operationModeSpecified;

		/// <summary>
		/// True if OPERATION_MODE was specified. This is soon to be deprecated and will be removed.
		/// </summary>
		public bool OperationModeSpecified
		{
			get { return _operationModeSpecified; }
			set { _operationModeSpecified = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Capture Policy part of QueryStore Options
	/// </summary>
	[System.Serializable]
	public partial class QueryStoreCapturePolicyOption : QueryStoreOption
	{


		private QueryStoreCapturePolicyOptionKind _value;

		/// <summary>
		/// Possible values
		/// </summary>
		public QueryStoreCapturePolicyOptionKind Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Size Based Cleanup Policy part of QueryStore Options
	/// </summary>
	[System.Serializable]
	public partial class QueryStoreSizeCleanupPolicyOption : QueryStoreOption
	{


		private QueryStoreSizeCleanupPolicyOptionKind _value;

		/// <summary>
		/// Possible values
		/// </summary>
		public QueryStoreSizeCleanupPolicyOptionKind Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Data Flush Interval part of QueryStore Options
	/// </summary>
	[System.Serializable]
	public partial class QueryStoreDataFlushIntervalOption : QueryStoreOption
	{


		private Literal _flushInterval;

		/// <summary>
		/// Flush Interval Value, specified as an integer
		/// </summary>
		public Literal FlushInterval
		{
			get { return _flushInterval; }
			set { UpdateTokenInfo(value); _flushInterval = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FlushInterval != null)
			{
				this.FlushInterval.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Runtime Stats Interval length part of QueryStore Options
	/// </summary>
	[System.Serializable]
	public partial class QueryStoreIntervalLengthOption : QueryStoreOption
	{


		private Literal _statsIntervalLength;

		/// <summary>
		/// Length of runtime stats interval
		/// </summary>
		public Literal StatsIntervalLength
		{
			get { return _statsIntervalLength; }
			set { UpdateTokenInfo(value); _statsIntervalLength = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.StatsIntervalLength != null)
			{
				this.StatsIntervalLength.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Max Storage Size part of QueryStore Options
	/// </summary>
	[System.Serializable]
	public partial class QueryStoreMaxStorageSizeOption : QueryStoreOption
	{


		private Literal _maxQdsSize;

		/// <summary>
		/// Max Qds Size in MB, specified as an integer
		/// </summary>
		public Literal MaxQdsSize
		{
			get { return _maxQdsSize; }
			set { UpdateTokenInfo(value); _maxQdsSize = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.MaxQdsSize != null)
			{
				this.MaxQdsSize.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Max Plans Per Query part of QueryStore Options
	/// </summary>
	[System.Serializable]
	public partial class QueryStoreMaxPlansPerQueryOption : QueryStoreOption
	{


		private Literal _maxPlansPerQuery;

		/// <summary>
		/// Max Plans per Query value, specified as an integer
		/// </summary>
		public Literal MaxPlansPerQuery
		{
			get { return _maxPlansPerQuery; }
			set { UpdateTokenInfo(value); _maxPlansPerQuery = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.MaxPlansPerQuery != null)
			{
				this.MaxPlansPerQuery.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Time based Cleanup Policy part of QueryStore Options
	/// </summary>
	[System.Serializable]
	public partial class QueryStoreTimeCleanupPolicyOption : QueryStoreOption
	{


		private Literal _staleQueryThreshold;

		/// <summary>
		/// Stale Query Threshold Value in Days, specified as an integer
		/// </summary>
		public Literal StaleQueryThreshold
		{
			get { return _staleQueryThreshold; }
			set { UpdateTokenInfo(value); _staleQueryThreshold = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.StaleQueryThreshold != null)
			{
				this.StaleQueryThreshold.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Wait Stats Capture part of QueryStore Options
	/// </summary>
	[System.Serializable]
	public partial class QueryStoreWaitStatsCaptureOption : QueryStoreOption
	{


		private OptionState _optionState;

		/// <summary>
		/// Controls whether wait statistics are captured per query
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Automatic tuning option in ALTER DATABASE statement, SET case
	/// </summary>
	[System.Serializable]
	public partial class AutomaticTuningDatabaseOption : DatabaseOption
	{


		private AutomaticTuningState _automaticTuningState;

		/// <summary>
		/// Option state ( AUTO | INHERIT | CUSTOM ).
		/// </summary>
		public AutomaticTuningState AutomaticTuningState
		{
			get { return _automaticTuningState; }
			set { _automaticTuningState = value; }
		}
		private List<AutomaticTuningOption> _options = new List<AutomaticTuningOption>();

		/// <summary>
		/// Options to be set.
		/// </summary>
		public IList<AutomaticTuningOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// A single Automatic Tuning option.
	/// </summary>
	[System.Serializable]
	public partial class AutomaticTuningOption : TSqlFragment
	{


		private AutomaticTuningOptionKind _optionKind;

		/// <summary>
		/// The Automatic Tuning Option kind.
		/// </summary>
		public AutomaticTuningOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private AutomaticTuningOptionState _value;

		/// <summary>
		/// Possible values
		/// </summary>
		public AutomaticTuningOptionState Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Force Last Good Plan part of Automatic Tuning Options
	/// </summary>
	[System.Serializable]
	public partial class AutomaticTuningForceLastGoodPlanOption : AutomaticTuningOption
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Create Index part of Automatic Tuning Options
	/// </summary>
	[System.Serializable]
	public partial class AutomaticTuningCreateIndexOption : AutomaticTuningOption
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Drop Index part of Automatic Tuning Options
	/// </summary>
	[System.Serializable]
	public partial class AutomaticTuningDropIndexOption : AutomaticTuningOption
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Maintain Index part of Automatic Tuning Options
	/// </summary>
	[System.Serializable]
	public partial class AutomaticTuningMaintainIndexOption : AutomaticTuningOption
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// FILESTREAM option in create and alter database.
	/// </summary>
	[System.Serializable]
	public partial class FileStreamDatabaseOption : DatabaseOption
	{


		private NonTransactedFileStreamAccess? _nonTransactedAccess;

		/// <summary>
		/// The non transactional file stream access level.
		/// </summary>
		public NonTransactedFileStreamAccess? NonTransactedAccess
		{
			get { return _nonTransactedAccess; }
			set { _nonTransactedAccess = value; }
		}
		private Literal _directoryName;

		/// <summary>
		/// The directory name to use for FileStream.
		/// </summary>
		public Literal DirectoryName
		{
			get { return _directoryName; }
			set { UpdateTokenInfo(value); _directoryName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.DirectoryName != null)
			{
				this.DirectoryName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Sets the database's CATALOG_COLLATION
	/// </summary>
	[System.Serializable]
	public partial class CatalogCollationOption : DatabaseOption
	{


		private CatalogCollation? _catalogCollation;

		/// <summary>
		/// The CATALOG_COLLATION for the database
		/// </summary>
		public CatalogCollation? CatalogCollation
		{
			get { return _catalogCollation; }
			set { _catalogCollation = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Sets the database's Ledger Option
	/// </summary>
	[System.Serializable]
	public partial class LedgerOption : DatabaseOption
	{


		private OptionState _optionState;

		/// <summary>
		/// The option state is ON or OFF value for Ledger.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// MAXSIZE option in create and alter database for Azure.
	/// </summary>
	[System.Serializable]
	public partial class MaxSizeDatabaseOption : DatabaseOption
	{


		private Literal _maxSize;

		/// <summary>
		/// The maximum size.
		/// </summary>
		public Literal MaxSize
		{
			get { return _maxSize; }
			set { UpdateTokenInfo(value); _maxSize = value; }
		}
		private MemoryUnit _units;

		/// <summary>
		/// Measurement units for size. Only GB is valid.
		/// </summary>
		public MemoryUnit Units
		{
			get { return _units; }
			set { _units = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.MaxSize != null)
			{
				this.MaxSize.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Alter index rebuild specialization of Alter Table statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableAlterIndexStatement : AlterTableStatement
	{


		private Identifier _indexIdentifier;

		/// <summary>
		/// The identifier that represents the name of the index.
		/// </summary>
		public Identifier IndexIdentifier
		{
			get { return _indexIdentifier; }
			set { UpdateTokenInfo(value); _indexIdentifier = value; }
		}
		private AlterIndexType _alterIndexType;

		/// <summary>
		/// The type that the index is being altered to.
		/// </summary>
		public AlterIndexType AlterIndexType
		{
			get { return _alterIndexType; }
			set { _alterIndexType = value; }
		}
		private List<IndexOption> _indexOptions = new List<IndexOption>();

		/// <summary>
		/// The index options.
		/// </summary>
		public IList<IndexOption> IndexOptions
		{
			get { return _indexOptions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterTableStatement)this).SchemaObjectName != null)
			{
				 ((AlterTableStatement)this).SchemaObjectName.Accept(visitor);
			}

			if (this.IndexIdentifier != null)
			{
				this.IndexIdentifier.Accept(visitor);
			}

			for (Int32 i = 0, count = this.IndexOptions.Count; i < count; ++i)
			{
				this.IndexOptions[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Alter column specialization of Alter Table statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterTableAlterColumnStatement : AlterTableStatement, ICollationSetter, IDataMaskingSetter
	{


		private Identifier _columnIdentifier;

		/// <summary>
		/// The indentifier that represents the name of the column.
		/// </summary>
		public Identifier ColumnIdentifier
		{
			get { return _columnIdentifier; }
			set { UpdateTokenInfo(value); _columnIdentifier = value; }
		}
		private DataTypeReference _dataType;

		/// <summary>
		/// The data type of the column.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}
		private AlterTableAlterColumnOption _alterTableAlterColumnOption;

		/// <summary>
		/// 
		/// The option on the column.  The DataType has to be null for this
		/// to be AddRowguidcol or DropRowguidcol. (?)PERSISTED used only in 2005"
		/// 
		/// </summary>
		public AlterTableAlterColumnOption AlterTableAlterColumnOption
		{
			get { return _alterTableAlterColumnOption; }
			set { _alterTableAlterColumnOption = value; }
		}
		private ColumnStorageOptions _storageOptions;

		/// <summary>
		/// Column storage options.
		/// </summary>
		public ColumnStorageOptions StorageOptions
		{
			get { return _storageOptions; }
			set { UpdateTokenInfo(value); _storageOptions = value; }
		}
		private List<IndexOption> _options = new List<IndexOption>();

		/// <summary>
		/// The statement options. Optional may have zero elements.
		/// </summary>
		public IList<IndexOption> Options
		{
			get { return _options; }
		}

		private GeneratedAlwaysType? _generatedAlways;

		/// <summary>
		/// Generated always type (if any).
		/// </summary>
		public GeneratedAlwaysType? GeneratedAlways
		{
			get { return _generatedAlways; }
			set { _generatedAlways = value; }
		}
		private bool _isHidden;

		/// <summary>
		/// True if the column is hidden.
		/// </summary>
		public bool IsHidden
		{
			get { return _isHidden; }
			set { _isHidden = value; }
		}
		private ColumnEncryptionDefinition _encryption;

		/// <summary>
		/// Column encryption definition set if column is encrypted.
		/// </summary>
		public ColumnEncryptionDefinition Encryption
		{
			get { return _encryption; }
			set { UpdateTokenInfo(value); _encryption = value; }
		}
		private Identifier _collation;

		/// <summary>
		/// Collation identifier
		/// </summary>
		public Identifier Collation
		{
			get { return _collation; }
			set { UpdateTokenInfo(value); _collation = value; }
		}
		private bool _isMasked;

		/// <summary>
		/// True if the column has a data masking function applied.
		/// </summary>
		public bool IsMasked
		{
			get { return _isMasked; }
			set { _isMasked = value; }
		}
		private StringLiteral _maskingFunction;

		/// <summary>
		/// Represents the data masking function applied to the column.
		/// </summary>
		public StringLiteral MaskingFunction
		{
			get { return _maskingFunction; }
			set { UpdateTokenInfo(value); _maskingFunction = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterTableStatement)this).SchemaObjectName != null)
			{
				 ((AlterTableStatement)this).SchemaObjectName.Accept(visitor);
			}

			if (this.ColumnIdentifier != null)
			{
				this.ColumnIdentifier.Accept(visitor);
			}

			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			if (this.StorageOptions != null)
			{
				this.StorageOptions.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			if (this.Encryption != null)
			{
				this.Encryption.Accept(visitor);
			}

			if (this.Collation != null)
			{
				this.Collation.Accept(visitor);
			}

			if (this.MaskingFunction != null)
			{
				this.MaskingFunction.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// This fragment represents a column definition
	/// </summary>
	[System.Serializable]
	public partial class ColumnDefinition : ColumnDefinitionBase, IDataMaskingSetter
	{


		private ScalarExpression _computedColumnExpression;

		/// <summary>
		/// Represents the expression if this is a computed column.
		/// </summary>
		public ScalarExpression ComputedColumnExpression
		{
			get { return _computedColumnExpression; }
			set { UpdateTokenInfo(value); _computedColumnExpression = value; }
		}
		private bool _isPersisted;

		/// <summary>
		/// True if the column is persisted.
		/// </summary>
		public bool IsPersisted
		{
			get { return _isPersisted; }
			set { _isPersisted = value; }
		}
		private DefaultConstraintDefinition _defaultConstraint;

		/// <summary>
		/// Defines the default value if not null. There can be at most one.
		/// </summary>
		public DefaultConstraintDefinition DefaultConstraint
		{
			get { return _defaultConstraint; }
			set { UpdateTokenInfo(value); _defaultConstraint = value; }
		}
		private IdentityOptions _identityOptions;

		/// <summary>
		/// Represents the Identity Options
		/// </summary>
		public IdentityOptions IdentityOptions
		{
			get { return _identityOptions; }
			set { UpdateTokenInfo(value); _identityOptions = value; }
		}
		private bool _isRowGuidCol;

		/// <summary>
		/// Indicates if the column is a row global unique identifier column.
		/// </summary>
		public bool IsRowGuidCol
		{
			get { return _isRowGuidCol; }
			set { _isRowGuidCol = value; }
		}
		private List<ConstraintDefinition> _constraints = new List<ConstraintDefinition>();

		/// <summary>
		/// The constraints for this column.
		/// </summary>
		public IList<ConstraintDefinition> Constraints
		{
			get { return _constraints; }
		}

		private ColumnStorageOptions _storageOptions;

		/// <summary>
		/// Column storage options.
		/// </summary>
		public ColumnStorageOptions StorageOptions
		{
			get { return _storageOptions; }
			set { UpdateTokenInfo(value); _storageOptions = value; }
		}
		private IndexDefinition _index;

		/// <summary>
		/// The index for this column.
		/// </summary>
		public IndexDefinition Index
		{
			get { return _index; }
			set { UpdateTokenInfo(value); _index = value; }
		}
		private GeneratedAlwaysType? _generatedAlways;

		/// <summary>
		/// Generated always type (if any).
		/// </summary>
		public GeneratedAlwaysType? GeneratedAlways
		{
			get { return _generatedAlways; }
			set { _generatedAlways = value; }
		}
		private bool _isHidden;

		/// <summary>
		/// True if the column is hidden.
		/// </summary>
		public bool IsHidden
		{
			get { return _isHidden; }
			set { _isHidden = value; }
		}
		private ColumnEncryptionDefinition _encryption;

		/// <summary>
		/// Column encryption definition set if column is encrypted.
		/// </summary>
		public ColumnEncryptionDefinition Encryption
		{
			get { return _encryption; }
			set { UpdateTokenInfo(value); _encryption = value; }
		}
		private bool _isMasked;

		/// <summary>
		/// True if the column has a data masking function applied.
		/// </summary>
		public bool IsMasked
		{
			get { return _isMasked; }
			set { _isMasked = value; }
		}
		private StringLiteral _maskingFunction;

		/// <summary>
		/// Represents the data masking function applied to the column.
		/// </summary>
		public StringLiteral MaskingFunction
		{
			get { return _maskingFunction; }
			set { UpdateTokenInfo(value); _maskingFunction = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.ComputedColumnExpression != null)
			{
				this.ComputedColumnExpression.Accept(visitor);
			}

			if (this.DefaultConstraint != null)
			{
				this.DefaultConstraint.Accept(visitor);
			}

			if (this.IdentityOptions != null)
			{
				this.IdentityOptions.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Constraints.Count; i < count; ++i)
			{
				this.Constraints[i].Accept(visitor);
			}

			if (this.StorageOptions != null)
			{
				this.StorageOptions.Accept(visitor);
			}

			if (this.Index != null)
			{
				this.Index.Accept(visitor);
			}

			if (this.Encryption != null)
			{
				this.Encryption.Accept(visitor);
			}

			if (this.MaskingFunction != null)
			{
				this.MaskingFunction.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Class representing the encryption properties for a column
	/// </summary>
	[System.Serializable]
	public partial class ColumnEncryptionDefinition : TSqlFragment
	{


		private List<ColumnEncryptionDefinitionParameter> _parameters = new List<ColumnEncryptionDefinitionParameter>();

		/// <summary>
		/// List of encryption properties for the column
		/// </summary>
		public IList<ColumnEncryptionDefinitionParameter> Parameters
		{
			get { return _parameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Single encryption parameter for a column
	/// </summary>
	[System.Serializable]
	public abstract partial class ColumnEncryptionDefinitionParameter : TSqlFragment
	{


		private ColumnEncryptionDefinitionParameterKind _parameterKind;

		/// <summary>
		/// The parameter kind.
		/// </summary>
		public ColumnEncryptionDefinitionParameterKind ParameterKind
		{
			get { return _parameterKind; }
			set { _parameterKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Parameter representing the column encryption key used to encrypt the column
	/// </summary>
	[System.Serializable]
	public partial class ColumnEncryptionKeyNameParameter : ColumnEncryptionDefinitionParameter
	{


		private Identifier _name;

		/// <summary>
		/// The column encryption key name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { _name = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Single parameter in column definition for column encryption type
	/// </summary>
	[System.Serializable]
	public partial class ColumnEncryptionTypeParameter : ColumnEncryptionDefinitionParameter
	{


		private ColumnEncryptionType _encryptionType;

		/// <summary>
		/// The encryption type.
		/// </summary>
		public ColumnEncryptionType EncryptionType
		{
			get { return _encryptionType; }
			set { _encryptionType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Single parameter in column definition for column encryption algorithm used to encrypt the column
	/// </summary>
	[System.Serializable]
	public partial class ColumnEncryptionAlgorithmParameter : ColumnEncryptionDefinitionParameter
	{


		private StringLiteral _encryptionAlgorithm;

		/// <summary>
		/// The algorithm name.
		/// </summary>
		public StringLiteral EncryptionAlgorithm
		{
			get { return _encryptionAlgorithm; }
			set { _encryptionAlgorithm = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents Identity Options for a Column
	/// </summary>
	[System.Serializable]
	public partial class IdentityOptions : TSqlFragment
	{


		private ScalarExpression _identitySeed;

		/// <summary>
		/// Can only be a integer like +3, -4, or 5.
		/// </summary>
		public ScalarExpression IdentitySeed
		{
			get { return _identitySeed; }
			set { UpdateTokenInfo(value); _identitySeed = value; }
		}
		private ScalarExpression _identityIncrement;

		/// <summary>
		/// Can only be a integer like +3, -4, or 5.
		/// </summary>
		public ScalarExpression IdentityIncrement
		{
			get { return _identityIncrement; }
			set { UpdateTokenInfo(value); _identityIncrement = value; }
		}
		private bool _isIdentityNotForReplication;

		/// <summary>
		/// Shows if identity is not for replication.
		/// </summary>
		public bool IsIdentityNotForReplication
		{
			get { return _isIdentityNotForReplication; }
			set { _isIdentityNotForReplication = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.IdentitySeed != null)
			{
				this.IdentitySeed.Accept(visitor);
			}

			if (this.IdentityIncrement != null)
			{
				this.IdentityIncrement.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents column storage options.
	/// </summary>
	[System.Serializable]
	public partial class ColumnStorageOptions : TSqlFragment
	{


		private bool _isFileStream;

		/// <summary>
		/// Indicates if the column is a filestream column.
		/// </summary>
		public bool IsFileStream
		{
			get { return _isFileStream; }
			set { _isFileStream = value; }
		}
		private SparseColumnOption _sparseOption;

		/// <summary>
		/// Indicates if the column is sparse or a column set for all sparse columns.
		/// </summary>
		public SparseColumnOption SparseOption
		{
			get { return _sparseOption; }
			set { _sparseOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents base class for constraints.
	/// </summary>
	[System.Serializable]
	public abstract partial class ConstraintDefinition : TSqlFragment
	{


		private Identifier _constraintIdentifier;

		/// <summary>
		/// The name of the constraint.
		/// </summary>
		public Identifier ConstraintIdentifier
		{
			get { return _constraintIdentifier; }
			set { UpdateTokenInfo(value); _constraintIdentifier = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ConstraintIdentifier != null)
			{
				this.ConstraintIdentifier.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents Create Table statement
	/// </summary>
	[System.Serializable]
	public partial class CreateTableStatement : TSqlStatement, IFileStreamSpecifier
	{


		private SchemaObjectName _schemaObjectName;

		/// <summary>
		/// The name of the table.
		/// </summary>
		public SchemaObjectName SchemaObjectName
		{
			get { return _schemaObjectName; }
			set { UpdateTokenInfo(value); _schemaObjectName = value; }
		}
		private bool _asEdge;

		/// <summary>
		/// Indicates whether AS EDGE was specified
		/// </summary>
		public bool AsEdge
		{
			get { return _asEdge; }
			set { _asEdge = value; }
		}
		private bool _asFileTable;

		/// <summary>
		/// Indicates whether AS FILETABLE was specified
		/// </summary>
		public bool AsFileTable
		{
			get { return _asFileTable; }
			set { _asFileTable = value; }
		}
		private bool _asNode;

		/// <summary>
		/// Indicates whether AS NODE was specified
		/// </summary>
		public bool AsNode
		{
			get { return _asNode; }
			set { _asNode = value; }
		}
		private TableDefinition _definition;

		/// <summary>
		/// The table definition containing columns and constraints.
		/// </summary>
		public TableDefinition Definition
		{
			get { return _definition; }
			set { UpdateTokenInfo(value); _definition = value; }
		}
		private FileGroupOrPartitionScheme _onFileGroupOrPartitionScheme;

		/// <summary>
		/// The filegroup or partition scheme. Might be null.
		/// </summary>
		public FileGroupOrPartitionScheme OnFileGroupOrPartitionScheme
		{
			get { return _onFileGroupOrPartitionScheme; }
			set { UpdateTokenInfo(value); _onFileGroupOrPartitionScheme = value; }
		}
		private FederationScheme _federationScheme;

		/// <summary>
		/// The federation scheme for the table. Might be null.
		/// </summary>
		public FederationScheme FederationScheme
		{
			get { return _federationScheme; }
			set { UpdateTokenInfo(value); _federationScheme = value; }
		}
		private IdentifierOrValueExpression _textImageOn;

		/// <summary>
		/// The filegroup identifier that comes after textimage_on. Can be either Identifier or String literal
		/// </summary>
		public IdentifierOrValueExpression TextImageOn
		{
			get { return _textImageOn; }
			set { UpdateTokenInfo(value); _textImageOn = value; }
		}
		private List<TableOption> _options = new List<TableOption>();

		/// <summary>
		/// The collection of table options.
		/// </summary>
		public IList<TableOption> Options
		{
			get { return _options; }
		}

		private SelectStatement _selectStatement;

		/// <summary>
		/// Represents the query part of a CTAS statement.
		/// </summary>
		public SelectStatement SelectStatement
		{
			get { return _selectStatement; }
			set { UpdateTokenInfo(value); _selectStatement = value; }
		}
		private List<Identifier> _ctasColumns = new List<Identifier>();

		/// <summary>
		/// The columns for the view. This is optionally supported with CTAS statements.
		/// </summary>
		public IList<Identifier> CtasColumns
		{
			get { return _ctasColumns; }
		}

		private SchemaObjectName _cloneSource;

		/// <summary>
		/// Source table for CLONE syntax.
		/// </summary>
		public SchemaObjectName CloneSource
		{
			get { return _cloneSource; }
			set { UpdateTokenInfo(value); _cloneSource = value; }
		}
		private ScalarExpression _clonePointInTime;

		/// <summary>
		/// Optional point in time for CLONE statement.
		/// </summary>
		public ScalarExpression ClonePointInTime
		{
			get { return _clonePointInTime; }
			set { UpdateTokenInfo(value); _clonePointInTime = value; }
		}
		private IdentifierOrValueExpression _fileStreamOn;

		/// <summary>
		/// Optional specification of the filestream. Can be either Identifier or String literal.
		/// </summary>
		public IdentifierOrValueExpression FileStreamOn
		{
			get { return _fileStreamOn; }
			set { UpdateTokenInfo(value); _fileStreamOn = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SchemaObjectName != null)
			{
				this.SchemaObjectName.Accept(visitor);
			}

			if (this.Definition != null)
			{
				this.Definition.Accept(visitor);
			}

			if (this.OnFileGroupOrPartitionScheme != null)
			{
				this.OnFileGroupOrPartitionScheme.Accept(visitor);
			}

			if (this.FederationScheme != null)
			{
				this.FederationScheme.Accept(visitor);
			}

			if (this.TextImageOn != null)
			{
				this.TextImageOn.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			if (this.SelectStatement != null)
			{
				this.SelectStatement.Accept(visitor);
			}

			for (Int32 i = 0, count = this.CtasColumns.Count; i < count; ++i)
			{
				this.CtasColumns[i].Accept(visitor);
			}

			if (this.CloneSource != null)
			{
				this.CloneSource.Accept(visitor);
			}

			if (this.ClonePointInTime != null)
			{
				this.ClonePointInTime.Accept(visitor);
			}

			if (this.FileStreamOn != null)
			{
				this.FileStreamOn.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class stores the federation scheme for a table
	/// </summary>
	[System.Serializable]
	public partial class FederationScheme : TSqlFragment
	{


		private Identifier _distributionName;

		/// <summary>
		/// The name of the distribution.
		/// </summary>
		public Identifier DistributionName
		{
			get { return _distributionName; }
			set { UpdateTokenInfo(value); _distributionName = value; }
		}
		private Identifier _columnName;

		/// <summary>
		/// The name of the federated column.
		/// </summary>
		public Identifier ColumnName
		{
			get { return _columnName; }
			set { UpdateTokenInfo(value); _columnName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.DistributionName != null)
			{
				this.DistributionName.Accept(visitor);
			}

			if (this.ColumnName != null)
			{
				this.ColumnName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The table option for DATA_COMPRESSION.
	/// </summary>
	[System.Serializable]
	public partial class TableDataCompressionOption : TableOption
	{


		private DataCompressionOption _dataCompressionOption;

		/// <summary>
		/// The data compression option.
		/// </summary>
		public DataCompressionOption DataCompressionOption
		{
			get { return _dataCompressionOption; }
			set { UpdateTokenInfo(value); _dataCompressionOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.DataCompressionOption != null)
			{
				this.DataCompressionOption.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The table option for XMLCOMPRESSION.
	/// </summary>
	[System.Serializable]
	public partial class TableXmlCompressionOption : TableOption
	{


		private XmlCompressionOption _xmlCompressionOption;

		/// <summary>
		/// The xml compression option.
		/// </summary>
		public XmlCompressionOption XmlCompressionOption
		{
			get { return _xmlCompressionOption; }
			set { UpdateTokenInfo(value); _xmlCompressionOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.XmlCompressionOption != null)
			{
				this.XmlCompressionOption.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the table DISTRIBUTION option for SQL DW tables.
	/// </summary>
	[System.Serializable]
	public partial class TableDistributionOption : TableOption
	{


		private TableDistributionPolicy _value;

		/// <summary>
		/// The table distribution policy for tables.
		/// </summary>
		public TableDistributionPolicy Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for table distribution policies.
	/// </summary>
	[System.Serializable]
	public abstract partial class TableDistributionPolicy : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Representation of the REPLICATE option for an table distribution policy.
	/// </summary>
	[System.Serializable]
	public partial class TableReplicateDistributionPolicy : TableDistributionPolicy
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Representation of the ROUND_ROBIN option for an table distribution policy.
	/// </summary>
	[System.Serializable]
	public partial class TableRoundRobinDistributionPolicy : TableDistributionPolicy
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Representation of the HASH option for an table distribution policy.
	/// </summary>
	[System.Serializable]
	public partial class TableHashDistributionPolicy : TableDistributionPolicy
	{


		/// <summary>
		/// The columns reference in the HASH option for a table distribution policy.
		/// </summary>
		public Identifier DistributionColumn
		{
			get { return DistributionColumns.Count > 0 ? DistributionColumns[0] : null; }
			set
			{
				if (DistributionColumns.Count == 0)
				{
					DistributionColumns.Add(value);
				}
				else
				{
					DistributionColumns[0] = value;
				}
			}
		}
		private List<Identifier> _distributionColumns = new List<Identifier>();

		/// <summary>
		/// The column reference in the HASH option for a table distribution policy.
		/// </summary>
		public IList<Identifier> DistributionColumns
		{
			get { return _distributionColumns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the CLUSTER BY option for tables.
	/// </summary>
	[System.Serializable]
	public partial class ClusterByTableOption : TableOption
	{


		private List<ColumnReferenceExpression> _columns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// The columns for clustering the table.
		/// </summary>
		public IList<ColumnReferenceExpression> Columns
		{
			get { return _columns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the table INDEX option for SQL DW tables.
	/// </summary>
	[System.Serializable]
	public partial class TableIndexOption : TableOption
	{


		private TableIndexType _value;

		/// <summary>
		/// The table index types could be clustered or non-clustered (heap).
		/// </summary>
		public TableIndexType Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for table index types.
	/// </summary>
	[System.Serializable]
	public abstract partial class TableIndexType : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Representation of the Clustered Index type for a table index.
	/// </summary>
	[System.Serializable]
	public partial class TableClusteredIndexType : TableIndexType
	{


		private List<ColumnWithSortOrder> _columns = new List<ColumnWithSortOrder>();

		/// <summary>
		/// The defined columns.
		/// </summary>
		public IList<ColumnWithSortOrder> Columns
		{
			get { return _columns; }
		}

		private bool _columnStore;

		/// <summary>
		/// Indicates if this a column store index.
		/// </summary>
		public bool ColumnStore
		{
			get { return _columnStore; }
			set { _columnStore = value; }
		}
		private List<ColumnReferenceExpression> _orderedColumns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// The columns which ordered columnstore indexes should be ordered on.
		/// </summary>
		public IList<ColumnReferenceExpression> OrderedColumns
		{
			get { return _orderedColumns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.OrderedColumns.Count; i < count; ++i)
			{
				this.OrderedColumns[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Representation of the Non-Clustered Index type or HEAP for a table index.
	/// </summary>
	[System.Serializable]
	public partial class TableNonClusteredIndexType : TableIndexType
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the table PARTITION option for SQL DW tables.
	/// </summary>
	[System.Serializable]
	public partial class TablePartitionOption : TableOption
	{


		private Identifier _partitionColumn;

		/// <summary>
		/// The partition column reference.
		/// </summary>
		public Identifier PartitionColumn
		{
			get { return _partitionColumn; }
			set { _partitionColumn = value; }
		}
		private TablePartitionOptionSpecifications _partitionOptionSpecs;

		/// <summary>
		/// The partition function to use.
		/// </summary>
		public TablePartitionOptionSpecifications PartitionOptionSpecs
		{
			get { return _partitionOptionSpecs; }
			set { UpdateTokenInfo(value); _partitionOptionSpecs = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.PartitionOptionSpecs != null)
			{
				this.PartitionOptionSpecs.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the specifications for a table partition.
	/// </summary>
	[System.Serializable]
	public abstract partial class PartitionSpecifications : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// For specifying range and values in the partition table option in the CREATE TABLE statement.
	/// </summary>
	[System.Serializable]
	public partial class TablePartitionOptionSpecifications : PartitionSpecifications
	{


		private PartitionTableOptionRange _range;

		/// <summary>
		/// Boundary side for boundary values
		/// </summary>
		public PartitionTableOptionRange Range
		{
			get { return _range; }
			set { _range = value; }
		}
		private List<ScalarExpression> _boundaryValues = new List<ScalarExpression>();

		/// <summary>
		/// Boundary values for the partition
		/// </summary>
		public IList<ScalarExpression> BoundaryValues
		{
			get { return _boundaryValues; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.BoundaryValues.Count; i < count; ++i)
			{
				this.BoundaryValues[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the LOCATION option for SQL DW Tables.
	/// </summary>
	[System.Serializable]
	public partial class LocationOption : TableOption
	{


		private Identifier _locationValue;

		/// <summary>
		/// The value of location option
		/// </summary>
		public Identifier LocationValue
		{
			get { return _locationValue; }
			set { UpdateTokenInfo(value); _locationValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.LocationValue != null)
			{
				this.LocationValue.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a Rename TABLE statement
	/// </summary>
	[System.Serializable]
	public partial class RenameEntityStatement : TSqlStatement
	{


		private SecurityObjectKind _renameEntityType;

		/// <summary>
		/// The type of the entity being renamed. This can be Object.
		/// </summary>
		public SecurityObjectKind RenameEntityType
		{
			get { return _renameEntityType; }
			set { _renameEntityType = value; }
		}
		private SeparatorType? _separatorType;

		/// <summary>
		/// Shows the separator.
		/// </summary>
		public SeparatorType? SeparatorType
		{
			get { return _separatorType; }
			set { _separatorType = value; }
		}
		private SchemaObjectName _oldName;

		/// <summary>
		/// Indicates the old table name of this statement.
		/// </summary>
		public SchemaObjectName OldName
		{
			get { return _oldName; }
			set { UpdateTokenInfo(value); _oldName = value; }
		}
		private Identifier _newName;

		/// <summary>
		/// Indicates the new table name of this statement.
		/// </summary>
		public Identifier NewName
		{
			get { return _newName; }
			set { UpdateTokenInfo(value); _newName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OldName != null)
			{
				this.OldName.Accept(visitor);
			}

			if (this.NewName != null)
			{
				this.NewName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents COPY statement
	/// </summary>
	[System.Serializable]
	public partial class CopyStatement : TSqlStatement
	{


		private List<StringLiteral> _from = new List<StringLiteral>();

		/// <summary>
		/// Data source for COPY. Can be string (Literal)
		/// </summary>
		public IList<StringLiteral> From
		{
			get { return _from; }
		}

		private SchemaObjectName _into;

		/// <summary>
		/// Table to insert data into
		/// </summary>
		public SchemaObjectName Into
		{
			get { return _into; }
			set { UpdateTokenInfo(value); _into = value; }
		}
		private List<CopyOption> _options = new List<CopyOption>();

		/// <summary>
		/// Possible options
		/// </summary>
		public IList<CopyOption> Options
		{
			get { return _options; }
		}

		private List<OptimizerHint> _optimizerHints = new List<OptimizerHint>();

		/// <summary>
		/// Optional optimizer hints.
		/// </summary>
		public IList<OptimizerHint> OptimizerHints
		{
			get { return _optimizerHints; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.From.Count; i < count; ++i)
			{
				this.From[i].Accept(visitor);
			}

			if (this.Into != null)
			{
				this.Into.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.OptimizerHints.Count; i < count; ++i)
			{
				this.OptimizerHints[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A single copy statement option.
	/// </summary>
	[System.Serializable]
	public abstract partial class CopyStatementOptionBase : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents COPY statement options
	/// </summary>
	[System.Serializable]
	public partial class CopyOption : TSqlFragment
	{


		private CopyOptionKind _kind;

		/// <summary>
		/// Type of option
		/// </summary>
		public CopyOptionKind Kind
		{
			get { return _kind; }
			set { _kind = value; }
		}
		private CopyStatementOptionBase _value;

		/// <summary>
		/// Type of the value of option
		/// </summary>
		public CopyStatementOptionBase Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents COPY statement CREDENTIAL options
	/// </summary>
	[System.Serializable]
	public partial class CopyCredentialOption : CopyStatementOptionBase
	{


		private StringLiteral _identity;

		/// <summary>
		/// Credential identity
		/// </summary>
		public StringLiteral Identity
		{
			get { return _identity; }
			set { UpdateTokenInfo(value); _identity = value; }
		}
		private StringLiteral _secret;

		/// <summary>
		/// Credential secret
		/// </summary>
		public StringLiteral Secret
		{
			get { return _secret; }
			set { UpdateTokenInfo(value); _secret = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Identity != null)
			{
				this.Identity.Accept(visitor);
			}

			if (this.Secret != null)
			{
				this.Secret.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents literals for COPY options
	/// </summary>
	[System.Serializable]
	public partial class SingleValueTypeCopyOption : CopyStatementOptionBase
	{


		private IdentifierOrValueExpression _singleValue;

		/// <summary>
		/// Represents identifier, integer or string literal
		/// </summary>
		public IdentifierOrValueExpression SingleValue
		{
			get { return _singleValue; }
			set { UpdateTokenInfo(value); _singleValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SingleValue != null)
			{
				this.SingleValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents list of same kind of external file options
	/// </summary>
	[System.Serializable]
	public partial class ListTypeCopyOption : CopyStatementOptionBase
	{


		private List<CopyStatementOptionBase> _options = new List<CopyStatementOptionBase>();

		/// <summary>
		/// Represents list of same kind of external file options
		/// </summary>
		public IList<CopyStatementOptionBase> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents column options of copy command
	/// </summary>
	[System.Serializable]
	public partial class CopyColumnOption : CopyStatementOptionBase
	{


		private Identifier _columnName;

		/// <summary>
		/// Represents target table's column name
		/// </summary>
		public Identifier ColumnName
		{
			get { return _columnName; }
			set { UpdateTokenInfo(value); _columnName = value; }
		}
		private ScalarExpression _defaultValue;

		/// <summary>
		/// Represents default value of target table's column
		/// </summary>
		public ScalarExpression DefaultValue
		{
			get { return _defaultValue; }
			set { UpdateTokenInfo(value); _defaultValue = value; }
		}
		private IntegerLiteral _fieldNumber;

		/// <summary>
		/// Represents column number in the external file mapping to the corresponding column in the target table
		/// </summary>
		public IntegerLiteral FieldNumber
		{
			get { return _fieldNumber; }
			set { UpdateTokenInfo(value); _fieldNumber = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ColumnName != null)
			{
				this.ColumnName.Accept(visitor);
			}

			if (this.DefaultValue != null)
			{
				this.DefaultValue.Accept(visitor);
			}

			if (this.FieldNumber != null)
			{
				this.FieldNumber.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single data compression option.
	/// </summary>
	[System.Serializable]
	public partial class DataCompressionOption : IndexOption
	{


		private DataCompressionLevel _compressionLevel;

		/// <summary>
		/// Data compression level.
		/// </summary>
		public DataCompressionLevel CompressionLevel
		{
			get { return _compressionLevel; }
			set { _compressionLevel = value; }
		}
		private List<CompressionPartitionRange> _partitionRanges = new List<CompressionPartitionRange>();

		/// <summary>
		/// Partitions to which this option applies. Can be empty.
		/// </summary>
		public IList<CompressionPartitionRange> PartitionRanges
		{
			get { return _partitionRanges; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.PartitionRanges.Count; i < count; ++i)
			{
				this.PartitionRanges[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a single xml compression option.
	/// </summary>
	[System.Serializable]
	public partial class XmlCompressionOption : IndexOption
	{


		private XmlCompressionOptionState _isCompressed;

		/// <summary>
		/// Xml compression state.
		/// </summary>
		public XmlCompressionOptionState IsCompressed
		{
			get { return _isCompressed; }
			set { _isCompressed = value; }
		}
		private List<CompressionPartitionRange> _partitionRanges = new List<CompressionPartitionRange>();

		/// <summary>
		/// Partitions to which this option applies. Can be empty.
		/// </summary>
		public IList<CompressionPartitionRange> PartitionRanges
		{
			get { return _partitionRanges; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.PartitionRanges.Count; i < count; ++i)
			{
				this.PartitionRanges[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a single range in DATA_COMPRESSION option.
	/// </summary>
	[System.Serializable]
	public partial class CompressionPartitionRange : TSqlFragment
	{


		private ScalarExpression _from;

		/// <summary>
		/// First partition number expression.
		/// </summary>
		public ScalarExpression From
		{
			get { return _from; }
			set { UpdateTokenInfo(value); _from = value; }
		}
		private ScalarExpression _to;

		/// <summary>
		/// Optional second partition number expression.
		/// </summary>
		public ScalarExpression To
		{
			get { return _to; }
			set { UpdateTokenInfo(value); _to = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.From != null)
			{
				this.From.Accept(visitor);
			}

			if (this.To != null)
			{
				this.To.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the check constraint.
	/// </summary>
	[System.Serializable]
	public partial class CheckConstraintDefinition : ConstraintDefinition
	{


		private BooleanExpression _checkCondition;

		/// <summary>
		/// The check condition.
		/// </summary>
		public BooleanExpression CheckCondition
		{
			get { return _checkCondition; }
			set { UpdateTokenInfo(value); _checkCondition = value; }
		}
		private bool _notForReplication;

		/// <summary>
		/// Represents if Not For Replication is used.
		/// </summary>
		public bool NotForReplication
		{
			get { return _notForReplication; }
			set { _notForReplication = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.CheckCondition != null)
			{
				this.CheckCondition.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the default constraint.
	/// </summary>
	[System.Serializable]
	public partial class DefaultConstraintDefinition : ConstraintDefinition
	{


		private ScalarExpression _expression;

		/// <summary>
		/// The value of the constraint.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}
		private bool _withValues;

		/// <summary>
		/// Shows that WITH VALUES tokens were defined if true.
		/// </summary>
		public bool WithValues
		{
			get { return _withValues; }
			set { _withValues = value; }
		}
		private Identifier _column;

		/// <summary>
		/// The name column te constraint is on. Only valid at table level. Optional, may be null.
		/// </summary>
		public Identifier Column
		{
			get { return _column; }
			set { UpdateTokenInfo(value); _column = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			if (this.Column != null)
			{
				this.Column.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the foreign key constraint.
	/// </summary>
	[System.Serializable]
	public partial class ForeignKeyConstraintDefinition : ConstraintDefinition
	{


		private List<Identifier> _columns = new List<Identifier>();

		/// <summary>
		/// The columns for the constraint. May have zero elements.
		/// </summary>
		public IList<Identifier> Columns
		{
			get { return _columns; }
		}

		private SchemaObjectName _referenceTableName;

		/// <summary>
		/// The table that constraint references.
		/// </summary>
		public SchemaObjectName ReferenceTableName
		{
			get { return _referenceTableName; }
			set { UpdateTokenInfo(value); _referenceTableName = value; }
		}
		private List<Identifier> _referencedTableColumns = new List<Identifier>();

		/// <summary>
		/// The columns for the referenced table.
		/// </summary>
		public IList<Identifier> ReferencedTableColumns
		{
			get { return _referencedTableColumns; }
		}

		private DeleteUpdateAction _deleteAction;

		/// <summary>
		/// Represents the action to be taken at delete.
		/// </summary>
		public DeleteUpdateAction DeleteAction
		{
			get { return _deleteAction; }
			set { _deleteAction = value; }
		}
		private DeleteUpdateAction _updateAction;

		/// <summary>
		/// Represents the action to be taken at update.
		/// </summary>
		public DeleteUpdateAction UpdateAction
		{
			get { return _updateAction; }
			set { _updateAction = value; }
		}
		private bool _notForReplication;

		/// <summary>
		/// True if not for replication was defined.
		/// </summary>
		public bool NotForReplication
		{
			get { return _notForReplication; }
			set { _notForReplication = value; }
		}
		private bool? _isEnforced;

		/// <summary>
		/// Represents if the constraint is an enforced constraint.
		/// </summary>
		public bool? IsEnforced
		{
			get { return _isEnforced; }
			set { _isEnforced = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			if (this.ReferenceTableName != null)
			{
				this.ReferenceTableName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ReferencedTableColumns.Count; i < count; ++i)
			{
				this.ReferencedTableColumns[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the nullable constraint.
	/// </summary>
	[System.Serializable]
	public partial class NullableConstraintDefinition : ConstraintDefinition
	{


		private bool _nullable;

		/// <summary>
		/// True if the column can be null.
		/// </summary>
		public bool Nullable
		{
			get { return _nullable; }
			set { _nullable = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The abstract base class that represents the connection from one node table to other in graph tables.
	/// </summary>
	[System.Serializable]
	public partial class GraphConnectionBetweenNodes : TSqlFragment
	{


		private SchemaObjectName _fromNode;

		/// <summary>
		/// From Node Table.
		/// </summary>
		public SchemaObjectName FromNode
		{
			get { return _fromNode; }
			set { UpdateTokenInfo(value); _fromNode = value; }
		}
		private SchemaObjectName _toNode;

		/// <summary>
		/// To Node Table.
		/// </summary>
		public SchemaObjectName ToNode
		{
			get { return _toNode; }
			set { UpdateTokenInfo(value); _toNode = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.FromNode != null)
			{
				this.FromNode.Accept(visitor);
			}

			if (this.ToNode != null)
			{
				this.ToNode.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the connection constraint for graph tables.
	/// </summary>
	[System.Serializable]
	public partial class GraphConnectionConstraintDefinition : ConstraintDefinition
	{


		private List<GraphConnectionBetweenNodes> _fromNodeToNodeList = new List<GraphConnectionBetweenNodes>();

		/// <summary>
		/// List of connections between node tables.
		/// </summary>
		public IList<GraphConnectionBetweenNodes> FromNodeToNodeList
		{
			get { return _fromNodeToNodeList; }
		}

		private DeleteUpdateAction _deleteAction;

		/// <summary>
		/// Represents the action to be taken at delete.
		/// </summary>
		public DeleteUpdateAction DeleteAction
		{
			get { return _deleteAction; }
			set { _deleteAction = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.FromNodeToNodeList.Count; i < count; ++i)
			{
				this.FromNodeToNodeList[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the unique or primary key constraint. This class translates 80 syntax into 90 syntax, this should be reflected in the AST, if a differentiator is to be written.
	/// </summary>
	[System.Serializable]
	public partial class UniqueConstraintDefinition : ConstraintDefinition, IFileStreamSpecifier
	{


		private bool? _clustered;

		/// <summary>
		/// Represents if the constraint is clustered.
		/// </summary>
		public bool? Clustered
		{
			get { return _clustered; }
			set { _clustered = value; }
		}
		private bool _isPrimaryKey;

		/// <summary>
		/// Represents if the constraint is not just unique but also primary key.
		/// </summary>
		public bool IsPrimaryKey
		{
			get { return _isPrimaryKey; }
			set { _isPrimaryKey = value; }
		}
		private bool? _isEnforced;

		/// <summary>
		/// Represents if the constraint is an enforced constraint.
		/// </summary>
		public bool? IsEnforced
		{
			get { return _isEnforced; }
			set { _isEnforced = value; }
		}
		private List<ColumnWithSortOrder> _columns = new List<ColumnWithSortOrder>();

		/// <summary>
		/// Represents the constraint columns.
		/// </summary>
		public IList<ColumnWithSortOrder> Columns
		{
			get { return _columns; }
		}

		private List<IndexOption> _indexOptions = new List<IndexOption>();

		/// <summary>
		/// The index options. Optional may have zero elements.
		/// </summary>
		public IList<IndexOption> IndexOptions
		{
			get { return _indexOptions; }
		}

		private FileGroupOrPartitionScheme _onFileGroupOrPartitionScheme;

		/// <summary>
		/// The filegroup or partition scheme. Might be null.
		/// </summary>
		public FileGroupOrPartitionScheme OnFileGroupOrPartitionScheme
		{
			get { return _onFileGroupOrPartitionScheme; }
			set { UpdateTokenInfo(value); _onFileGroupOrPartitionScheme = value; }
		}
		private IndexType _indexType;

		/// <summary>
		/// The index type.
		/// </summary>
		public IndexType IndexType
		{
			get { return _indexType; }
			set { _indexType = value; }
		}
		private IdentifierOrValueExpression _fileStreamOn;

		/// <summary>
		/// Optional specification of the filestream. Can be either Identifier or String literal.
		/// </summary>
		public IdentifierOrValueExpression FileStreamOn
		{
			get { return _fileStreamOn; }
			set { UpdateTokenInfo(value); _fileStreamOn = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.IndexOptions.Count; i < count; ++i)
			{
				this.IndexOptions[i].Accept(visitor);
			}

			if (this.OnFileGroupOrPartitionScheme != null)
			{
				this.OnFileGroupOrPartitionScheme.Accept(visitor);
			}

			if (this.FileStreamOn != null)
			{
				this.FileStreamOn.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents BACKUP/DUMP statement
	/// </summary>
	[System.Serializable]
	public abstract partial class BackupStatement : TSqlStatement
	{


		private IdentifierOrValueExpression _databaseName;

		/// <summary>
		/// Database to backup (can be Identifier or variable Literal)
		/// </summary>
		public IdentifierOrValueExpression DatabaseName
		{
			get { return _databaseName; }
			set { UpdateTokenInfo(value); _databaseName = value; }
		}
		private List<BackupOption> _options = new List<BackupOption>();

		/// <summary>
		/// Backup statement options
		/// </summary>
		public IList<BackupOption> Options
		{
			get { return _options; }
		}

		private List<MirrorToClause> _mirrorToClauses = new List<MirrorToClause>();

		/// <summary>
		/// Where backup should be mirrored.
		/// </summary>
		public IList<MirrorToClause> MirrorToClauses
		{
			get { return _mirrorToClauses; }
		}

		private List<DeviceInfo> _devices = new List<DeviceInfo>();

		/// <summary>
		/// Where backup should put data
		/// </summary>
		public IList<DeviceInfo> Devices
		{
			get { return _devices; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.DatabaseName != null)
			{
				this.DatabaseName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.MirrorToClauses.Count; i < count; ++i)
			{
				this.MirrorToClauses[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.Devices.Count; i < count; ++i)
			{
				this.Devices[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents BACKUP DATABASE statement
	/// </summary>
	[System.Serializable]
	public partial class BackupDatabaseStatement : BackupStatement
	{


		private List<BackupRestoreFileInfo> _files = new List<BackupRestoreFileInfo>();

		/// <summary>
		/// Files/filegroups to backup
		/// </summary>
		public IList<BackupRestoreFileInfo> Files
		{
			get { return _files; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Files.Count; i < count; ++i)
			{
				this.Files[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents BACKUP TRANSACTION statement
	/// </summary>
	[System.Serializable]
	public partial class BackupTransactionLogStatement : BackupStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents RESTORE/LOAD statement
	/// </summary>
	[System.Serializable]
	public partial class RestoreStatement : TSqlStatement
	{


		private IdentifierOrValueExpression _databaseName;

		/// <summary>
		/// Database to restore (can be Identifier or variable Literal)
		/// </summary>
		public IdentifierOrValueExpression DatabaseName
		{
			get { return _databaseName; }
			set { UpdateTokenInfo(value); _databaseName = value; }
		}
		private List<DeviceInfo> _devices = new List<DeviceInfo>();

		/// <summary>
		/// From what devices we should restore
		/// </summary>
		public IList<DeviceInfo> Devices
		{
			get { return _devices; }
		}

		private List<BackupRestoreFileInfo> _files = new List<BackupRestoreFileInfo>();

		/// <summary>
		/// Files/filegroups/pages to restore
		/// </summary>
		public IList<BackupRestoreFileInfo> Files
		{
			get { return _files; }
		}

		private List<RestoreOption> _options = new List<RestoreOption>();

		/// <summary>
		/// Restore statement options
		/// </summary>
		public IList<RestoreOption> Options
		{
			get { return _options; }
		}

		private RestoreStatementKind _kind;

		/// <summary>
		/// Differentiates between restore database/transaction log and and (obsolete) HEADERONLY cases
		/// </summary>
		public RestoreStatementKind Kind
		{
			get { return _kind; }
			set { _kind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.DatabaseName != null)
			{
				this.DatabaseName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Devices.Count; i < count; ++i)
			{
				this.Devices[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.Files.Count; i < count; ++i)
			{
				this.Files[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single option in RESTORE statement
	/// </summary>
	[System.Serializable]
	public partial class RestoreOption : TSqlFragment
	{


		private RestoreOptionKind _optionKind;

		/// <summary>
		/// The restore option kind.
		/// </summary>
		public RestoreOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents single option with optional value
	/// </summary>
	[System.Serializable]
	public partial class ScalarExpressionRestoreOption : RestoreOption
	{


		private ScalarExpression _value;

		/// <summary>
		/// Option value
		/// </summary>
		public ScalarExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents MOVE restore option
	/// </summary>
	[System.Serializable]
	public partial class MoveRestoreOption : RestoreOption
	{


		private ValueExpression _logicalFileName;

		/// <summary>
		/// Logical file name in backup (string or variable)
		/// </summary>
		public ValueExpression LogicalFileName
		{
			get { return _logicalFileName; }
			set { UpdateTokenInfo(value); _logicalFileName = value; }
		}
		private ValueExpression _oSFileName;

		/// <summary>
		/// Operation system file name (string or variable)
		/// </summary>
		public ValueExpression OSFileName
		{
			get { return _oSFileName; }
			set { UpdateTokenInfo(value); _oSFileName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.LogicalFileName != null)
			{
				this.LogicalFileName.Accept(visitor);
			}

			if (this.OSFileName != null)
			{
				this.OSFileName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents StopAtMark/StopBeforeMark restore options
	/// </summary>
	[System.Serializable]
	public partial class StopRestoreOption : RestoreOption
	{


		private ValueExpression _mark;

		/// <summary>
		/// Mark to stop at/before
		/// </summary>
		public ValueExpression Mark
		{
			get { return _mark; }
			set { UpdateTokenInfo(value); _mark = value; }
		}
		private ValueExpression _after;

		/// <summary>
		/// Optional AFTER clause
		/// </summary>
		public ValueExpression After
		{
			get { return _after; }
			set { UpdateTokenInfo(value); _after = value; }
		}
		private bool _isStopAt;

		/// <summary>
		/// True in case of StopAtMark, false in case of StopBeforeMark
		/// </summary>
		public bool IsStopAt
		{
			get { return _isStopAt; }
			set { _isStopAt = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Mark != null)
			{
				this.Mark.Accept(visitor);
			}

			if (this.After != null)
			{
				this.After.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the FileStream option in a restore statement.
	/// </summary>
	[System.Serializable]
	public partial class FileStreamRestoreOption : RestoreOption
	{


		private FileStreamDatabaseOption _fileStreamOption;

		/// <summary>
		/// The FileStream option.
		/// </summary>
		public FileStreamDatabaseOption FileStreamOption
		{
			get { return _fileStreamOption; }
			set { UpdateTokenInfo(value); _fileStreamOption = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FileStreamOption != null)
			{
				this.FileStreamOption.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a single option in BACKUP statement
	/// </summary>
	[System.Serializable]
	public partial class BackupOption : TSqlFragment
	{


		private BackupOptionKind _optionKind;

		/// <summary>
		/// Actual option kind
		/// </summary>
		public BackupOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private ScalarExpression _value;

		/// <summary>
		/// Option value - can be null for certain options
		/// </summary>
		public ScalarExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the encryption option in a backup statement.
	/// </summary>
	[System.Serializable]
	public partial class BackupEncryptionOption : BackupOption
	{


		private EncryptionAlgorithm _algorithm;

		/// <summary>
		/// Encryption algorithm to use.
		/// </summary>
		public EncryptionAlgorithm Algorithm
		{
			get { return _algorithm; }
			set { _algorithm = value; }
		}
		private CryptoMechanism _encryptor;

		/// <summary>
		/// Encryptor. Only certificate and asymmetric key are allowed here, and crypto should not have password or signature.
		/// </summary>
		public CryptoMechanism Encryptor
		{
			get { return _encryptor; }
			set { _encryptor = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents information about device used for backup or restore
	/// </summary>
	[System.Serializable]
	public partial class DeviceInfo : TSqlFragment
	{


		private IdentifierOrValueExpression _logicalDevice;

		/// <summary>
		/// Logical device name. Mutually exclusive with physical device name. Can be either Identifier or variable Literal
		/// </summary>
		public IdentifierOrValueExpression LogicalDevice
		{
			get { return _logicalDevice; }
			set { UpdateTokenInfo(value); _logicalDevice = value; }
		}
		private ValueExpression _physicalDevice;

		/// <summary>
		/// Physical device name. Mutually exclusive with logical device name.
		/// </summary>
		public ValueExpression PhysicalDevice
		{
			get { return _physicalDevice; }
			set { UpdateTokenInfo(value); _physicalDevice = value; }
		}
		private DeviceType _deviceType;

		/// <summary>
		/// Device kind in case of physical device.
		/// </summary>
		public DeviceType DeviceType
		{
			get { return _deviceType; }
			set { _deviceType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.LogicalDevice != null)
			{
				this.LogicalDevice.Accept(visitor);
			}

			if (this.PhysicalDevice != null)
			{
				this.PhysicalDevice.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents MIRROR TO clause BACKUP statement
	/// </summary>
	[System.Serializable]
	public partial class MirrorToClause : TSqlFragment
	{


		private List<DeviceInfo> _devices = new List<DeviceInfo>();

		/// <summary>
		/// Devices to mirror to.
		/// </summary>
		public IList<DeviceInfo> Devices
		{
			get { return _devices; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Devices.Count; i < count; ++i)
			{
				this.Devices[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Information about files/filegroups being backed up/restored (READ_WRITE_FILEGROUPS - 2005 only)
	/// </summary>
	[System.Serializable]
	public partial class BackupRestoreFileInfo : TSqlFragment
	{


		private List<ValueExpression> _items = new List<ValueExpression>();

		/// <summary>
		/// Files or filegroup (if read_write_filegroups kind was not specified)
		/// </summary>
		public IList<ValueExpression> Items
		{
			get { return _items; }
		}

		private BackupRestoreItemKind _itemKind;

		/// <summary>
		/// Specifies, if items are files, filegroups, pages or read_write_filegroups
		/// </summary>
		public BackupRestoreItemKind ItemKind
		{
			get { return _itemKind; }
			set { _itemKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Items.Count; i < count; ++i)
			{
				this.Items[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents BULK INSERT statement
	/// </summary>
	[System.Serializable]
	public abstract partial class BulkInsertBase : TSqlStatement
	{


		private SchemaObjectName _to;

		/// <summary>
		/// Table to insert data into
		/// </summary>
		public SchemaObjectName To
		{
			get { return _to; }
			set { UpdateTokenInfo(value); _to = value; }
		}
		private List<BulkInsertOption> _options = new List<BulkInsertOption>();

		/// <summary>
		/// Possible options
		/// </summary>
		public IList<BulkInsertOption> Options
		{
			get { return _options; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.To != null)
			{
				this.To.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents BULK INSERT statement
	/// </summary>
	[System.Serializable]
	public partial class BulkInsertStatement : BulkInsertBase
	{


		private IdentifierOrValueExpression _from;

		/// <summary>
		/// Data source for BULK INSERT. Can be integer (Literal), string (Literal) or Identifier
		/// </summary>
		public IdentifierOrValueExpression From
		{
			get { return _from; }
			set { UpdateTokenInfo(value); _from = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((BulkInsertBase)this).To != null)
			{
				 ((BulkInsertBase)this).To.Accept(visitor);
			}

			if (this.From != null)
			{
				this.From.Accept(visitor);
			}

			for (Int32 i = 0, count = ((BulkInsertBase)this).Options.Count; i < count; ++i)
			{
				 ((BulkInsertBase)this).Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents INSERT BULK statement (BCP syntax)
	/// </summary>
	[System.Serializable]
	public partial class InsertBulkStatement : BulkInsertBase
	{


		private List<InsertBulkColumnDefinition> _columnDefinitions = new List<InsertBulkColumnDefinition>();

		/// <summary>
		/// Optional column definitions
		/// </summary>
		public IList<InsertBulkColumnDefinition> ColumnDefinitions
		{
			get { return _columnDefinitions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.ColumnDefinitions.Count; i < count; ++i)
			{
				this.ColumnDefinitions[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents single option in BULK INSERT statement
	/// </summary>
	[System.Serializable]
	public partial class BulkInsertOption : TSqlFragment
	{


		private BulkInsertOptionKind _optionKind;

		/// <summary>
		/// Actual option.
		/// </summary>
		public BulkInsertOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents single option in OPENROWSET (Provider='CosmosDb'...) statement
	/// </summary>
	[System.Serializable]
	public partial class OpenRowsetCosmosOption : TSqlFragment
	{


		private OpenRowsetCosmosOptionKind _optionKind;

		/// <summary>
		/// Actual option.
		/// </summary>
		public OpenRowsetCosmosOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents simple single option in BULK INSERT (Provider='CosmosDB' ...) statement.
	/// </summary>
	[System.Serializable]
	public partial class LiteralOpenRowsetCosmosOption : OpenRowsetCosmosOption
	{


		private Literal _value;

		/// <summary>
		/// Option value (integer or string literal)
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents simple single option in BULK INSERT statement.
	/// </summary>
	[System.Serializable]
	public partial class LiteralBulkInsertOption : BulkInsertOption
	{


		private Literal _value;

		/// <summary>
		/// Option value (integer or string literal)
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ORDER option in BULK INSERT statement.
	/// </summary>
	[System.Serializable]
	public partial class OrderBulkInsertOption : BulkInsertOption
	{


		private List<ColumnWithSortOrder> _columns = new List<ColumnWithSortOrder>();

		/// <summary>
		/// Represents columns to sort in case of ORDER option
		/// </summary>
		public IList<ColumnWithSortOrder> Columns
		{
			get { return _columns; }
		}

		private bool _isUnique;

		/// <summary>
		/// True if UNIQUE was specified, which can only happen in case of OPENROWSET (BULK ...).
		/// </summary>
		public bool IsUnique
		{
			get { return _isUnique; }
			set { _isUnique = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents most basic column definition
	/// </summary>
	[System.Serializable]
	public partial class ColumnDefinitionBase : TSqlFragment, ICollationSetter
	{


		private Identifier _columnIdentifier;

		/// <summary>
		/// The indentifier that represents the name of the column.
		/// </summary>
		public Identifier ColumnIdentifier
		{
			get { return _columnIdentifier; }
			set { UpdateTokenInfo(value); _columnIdentifier = value; }
		}
		private DataTypeReference _dataType;

		/// <summary>
		/// The data type of the column.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}
		private Identifier _collation;

		/// <summary>
		/// Collation identifier
		/// </summary>
		public Identifier Collation
		{
			get { return _collation; }
			set { UpdateTokenInfo(value); _collation = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ColumnIdentifier != null)
			{
				this.ColumnIdentifier.Accept(visitor);
			}

			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			if (this.Collation != null)
			{
				this.Collation.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents most basic column definition.
	/// </summary>
	[System.Serializable]
	public partial class ExternalTableColumnDefinition : TSqlFragment
	{


		private ColumnDefinitionBase _columnDefinition;

		/// <summary>
		/// The column definition.
		/// </summary>
		public ColumnDefinitionBase ColumnDefinition
		{
			get { return _columnDefinition; }
			set { UpdateTokenInfo(value); _columnDefinition = value; }
		}
		private NullableConstraintDefinition _nullableConstraint;

		/// <summary>
		/// The nullable constraint, optional can be null.
		/// </summary>
		public NullableConstraintDefinition NullableConstraint
		{
			get { return _nullableConstraint; }
			set { UpdateTokenInfo(value); _nullableConstraint = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ColumnDefinition != null)
			{
				this.ColumnDefinition.Accept(visitor);
			}

			if (this.NullableConstraint != null)
			{
				this.NullableConstraint.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents column definition in INSERT BULK statement (?)
	/// </summary>
	[System.Serializable]
	public partial class InsertBulkColumnDefinition : TSqlFragment
	{


		private ColumnDefinitionBase _column;

		/// <summary>
		/// Basic part of column definition
		/// </summary>
		public ColumnDefinitionBase Column
		{
			get { return _column; }
			set { UpdateTokenInfo(value); _column = value; }
		}
		private NullNotNull _nullNotNull;

		/// <summary>
		/// Optional NULL / NOT NULL constraint
		/// </summary>
		public NullNotNull NullNotNull
		{
			get { return _nullNotNull; }
			set { _nullNotNull = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Column != null)
			{
				this.Column.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DBCC statement (all variants)
	/// </summary>
	[System.Serializable]
	public partial class DbccStatement : TSqlStatement
	{


		private string _dllName;

		/// <summary>
		/// DLL name in case of FREE command. Note, that actual presence of FREE keyword is not checked by parser.
		/// </summary>
		public string DllName
		{
			get { return _dllName; }
			set { _dllName = value; }
		}
		private DbccCommand _command;

		/// <summary>
		/// DBCC statement type.
		/// </summary>
		public DbccCommand Command
		{
			get { return _command; }
			set { _command = value; }
		}
		private bool _parenthesisRequired;

		/// <summary>
		/// If true, means that empty parenthesis required even if there were no literals (weird - but used by tracestatus)
		/// </summary>
		public bool ParenthesisRequired
		{
			get { return _parenthesisRequired; }
			set { _parenthesisRequired = value; }
		}
		private List<DbccNamedLiteral> _literals = new List<DbccNamedLiteral>();

		/// <summary>
		/// Named literals
		/// </summary>
		public IList<DbccNamedLiteral> Literals
		{
			get { return _literals; }
		}

		private List<DbccOption> _options = new List<DbccOption>();

		/// <summary>
		/// DBCC statement options
		/// </summary>
		public IList<DbccOption> Options
		{
			get { return _options; }
		}

		private bool _optionsUseJoin;

		/// <summary>
		/// Indicates if the DBCC options are specified using JOIN
		/// </summary>
		public bool OptionsUseJoin
		{
			get { return _optionsUseJoin; }
			set { _optionsUseJoin = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Literals.Count; i < count; ++i)
			{
				this.Literals[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a dbcc option.
	/// </summary>
	[System.Serializable]
	public partial class DbccOption : TSqlFragment
	{


		private DbccOptionKind _optionKind;

		/// <summary>
		/// The dbcc option kind.
		/// </summary>
		public DbccOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents named literal in DBCC statement
	/// </summary>
	[System.Serializable]
	public partial class DbccNamedLiteral : TSqlFragment
	{


		private string _name;

		/// <summary>
		/// Optional literal name
		/// </summary>
		public string Name
		{
			get { return _name; }
			set { _name = value; }
		}
		private ScalarExpression _value;

		/// <summary>
		/// Literal value
		/// </summary>
		public ScalarExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE ASYMMETRIC KEY statement
	/// </summary>
	[System.Serializable]
	public partial class CreateAsymmetricKeyStatement : TSqlStatement, IAuthorization
	{


		private Identifier _name;

		/// <summary>
		/// Key name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private EncryptionSource _keySource;

		/// <summary>
		/// Encryption key source
		/// </summary>
		public EncryptionSource KeySource
		{
			get { return _keySource; }
			set { UpdateTokenInfo(value); _keySource = value; }
		}
		private EncryptionAlgorithm _encryptionAlgorithm;

		/// <summary>
		/// (Optional) Encryption algorithm to use
		/// </summary>
		public EncryptionAlgorithm EncryptionAlgorithm
		{
			get { return _encryptionAlgorithm; }
			set { _encryptionAlgorithm = value; }
		}
		private Literal _password;

		/// <summary>
		/// Optional password with which to encrypt the private key
		/// </summary>
		public Literal Password
		{
			get { return _password; }
			set { UpdateTokenInfo(value); _password = value; }
		}
		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.KeySource != null)
			{
				this.KeySource.Accept(visitor);
			}

			if (this.Password != null)
			{
				this.Password.Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE PARTITION FUNCTION statement
	/// </summary>
	[System.Serializable]
	public partial class CreatePartitionFunctionStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Function name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private PartitionParameterType _parameterType;

		/// <summary>
		/// Optional parameter type
		/// </summary>
		public PartitionParameterType ParameterType
		{
			get { return _parameterType; }
			set { UpdateTokenInfo(value); _parameterType = value; }
		}
		private PartitionFunctionRange _range;

		/// <summary>
		/// Boundary side for boundary values
		/// </summary>
		public PartitionFunctionRange Range
		{
			get { return _range; }
			set { _range = value; }
		}
		private List<ScalarExpression> _boundaryValues = new List<ScalarExpression>();

		/// <summary>
		/// Boundaty values for each partition
		/// </summary>
		public IList<ScalarExpression> BoundaryValues
		{
			get { return _boundaryValues; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.ParameterType != null)
			{
				this.ParameterType.Accept(visitor);
			}

			for (Int32 i = 0, count = this.BoundaryValues.Count; i < count; ++i)
			{
				this.BoundaryValues[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Parameter type in CREATE PARTITION FUNCTION statement
	/// </summary>
	[System.Serializable]
	public partial class PartitionParameterType : TSqlFragment, ICollationSetter
	{


		private DataTypeReference _dataType;

		/// <summary>
		/// Parameter type
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}
		private Identifier _collation;

		/// <summary>
		/// Collation identifier
		/// </summary>
		public Identifier Collation
		{
			get { return _collation; }
			set { UpdateTokenInfo(value); _collation = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			if (this.Collation != null)
			{
				this.Collation.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE PARTITION SCHEME statement
	/// </summary>
	[System.Serializable]
	public partial class CreatePartitionSchemeStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Partition scheme name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private Identifier _partitionFunction;

		/// <summary>
		/// Partition function name
		/// </summary>
		public Identifier PartitionFunction
		{
			get { return _partitionFunction; }
			set { UpdateTokenInfo(value); _partitionFunction = value; }
		}
		private bool _isAll;

		/// <summary>
		/// True, if ALL option was specified
		/// </summary>
		public bool IsAll
		{
			get { return _isAll; }
			set { _isAll = value; }
		}
		private List<IdentifierOrValueExpression> _fileGroups = new List<IdentifierOrValueExpression>();

		/// <summary>
		/// Filegroup names (can be string literal or identifier)
		/// </summary>
		public IList<IdentifierOrValueExpression> FileGroups
		{
			get { return _fileGroups; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.PartitionFunction != null)
			{
				this.PartitionFunction.Accept(visitor);
			}

			for (Int32 i = 0, count = this.FileGroups.Count; i < count; ++i)
			{
				this.FileGroups[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents common base for CREATE and ALTER REMOTE SERVICE BINDING statements
	/// </summary>
	[System.Serializable]
	public abstract partial class RemoteServiceBindingStatementBase : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Binding name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<RemoteServiceBindingOption> _options = new List<RemoteServiceBindingOption>();

		/// <summary>
		/// The collection of remote service binding options.
		/// </summary>
		public IList<RemoteServiceBindingOption> Options
		{
			get { return _options; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A remote service binding option.
	/// </summary>
	[System.Serializable]
	public abstract partial class RemoteServiceBindingOption : TSqlFragment
	{


		private RemoteServiceBindingOptionKind _optionKind;

		/// <summary>
		/// The option kind.
		/// </summary>
		public RemoteServiceBindingOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The remote service binding option for ON/OFF options.
	/// </summary>
	[System.Serializable]
	public partial class OnOffRemoteServiceBindingOption : RemoteServiceBindingOption
	{


		private OptionState _optionState;

		/// <summary>
		/// The option state.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The remote service binding option for USER.
	/// </summary>
	[System.Serializable]
	public partial class UserRemoteServiceBindingOption : RemoteServiceBindingOption
	{


		private Identifier _user;

		/// <summary>
		/// The user name.
		/// </summary>
		public Identifier User
		{
			get { return _user; }
			set { UpdateTokenInfo(value); _user = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.User != null)
			{
				this.User.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents CREATE REMOTE SERVICE BINDING statement
	/// </summary>
	[System.Serializable]
	public partial class CreateRemoteServiceBindingStatement : RemoteServiceBindingStatementBase, IAuthorization
	{


		private Literal _service;

		/// <summary>
		/// Serive name (string literal)
		/// </summary>
		public Literal Service
		{
			get { return _service; }
			set { UpdateTokenInfo(value); _service = value; }
		}
		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((RemoteServiceBindingStatementBase)this).Name != null)
			{
				 ((RemoteServiceBindingStatementBase)this).Name.Accept(visitor);
			}

			if (this.Service != null)
			{
				this.Service.Accept(visitor);
			}

			for (Int32 i = 0, count = ((RemoteServiceBindingStatementBase)this).Options.Count; i < count; ++i)
			{
				 ((RemoteServiceBindingStatementBase)this).Options[i].Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ALTER REMOTE SERVICE BINDING statement
	/// </summary>
	[System.Serializable]
	public partial class AlterRemoteServiceBindingStatement : RemoteServiceBindingStatementBase
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for different key/certificates sources
	/// </summary>
	[System.Serializable]
	public abstract partial class EncryptionSource : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents reference to an assembly containing key or certificate
	/// </summary>
	[System.Serializable]
	public partial class AssemblyEncryptionSource : EncryptionSource
	{


		private Identifier _assembly;

		/// <summary>
		/// Assembly name
		/// </summary>
		public Identifier Assembly
		{
			get { return _assembly; }
			set { UpdateTokenInfo(value); _assembly = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Assembly != null)
			{
				this.Assembly.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents reference to a (executable) file containing key or certificate
	/// </summary>
	[System.Serializable]
	public partial class FileEncryptionSource : EncryptionSource
	{


		private bool _isExecutable;

		/// <summary>
		/// True if file is EXECUTABLE
		/// </summary>
		public bool IsExecutable
		{
			get { return _isExecutable; }
			set { _isExecutable = value; }
		}
		private Literal _file;

		/// <summary>
		/// Path to the file
		/// </summary>
		public Literal File
		{
			get { return _file; }
			set { UpdateTokenInfo(value); _file = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.File != null)
			{
				this.File.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents reference to a EKM provider.
	/// </summary>
	[System.Serializable]
	public partial class ProviderEncryptionSource : EncryptionSource
	{


		private Identifier _name;

		/// <summary>
		/// Provider name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<KeyOption> _keyOptions = new List<KeyOption>();

		/// <summary>
		/// Options for this key.
		/// </summary>
		public IList<KeyOption> KeyOptions
		{
			get { return _keyOptions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.KeyOptions.Count; i < count; ++i)
			{
				this.KeyOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE CERTIFICATE statement
	/// </summary>
	[System.Serializable]
	public abstract partial class CertificateStatementBase : TSqlStatement, IPasswordChangeOption
	{


		private Identifier _name;

		/// <summary>
		/// Certificate name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private OptionState _activeForBeginDialog;

		/// <summary>
		/// ACTIVE FOR BEGIN_DIALOG optional option value
		/// </summary>
		public OptionState ActiveForBeginDialog
		{
			get { return _activeForBeginDialog; }
			set { _activeForBeginDialog = value; }
		}
		private Literal _privateKeyPath;

		/// <summary>
		/// Optional path to private key
		/// </summary>
		public Literal PrivateKeyPath
		{
			get { return _privateKeyPath; }
			set { UpdateTokenInfo(value); _privateKeyPath = value; }
		}
		private Literal _encryptionPassword;

		/// <summary>
		/// Optional private key encryption password
		/// </summary>
		public Literal EncryptionPassword
		{
			get { return _encryptionPassword; }
			set { UpdateTokenInfo(value); _encryptionPassword = value; }
		}
		private Literal _decryptionPassword;

		/// <summary>
		/// Optional private key decryption password
		/// </summary>
		public Literal DecryptionPassword
		{
			get { return _decryptionPassword; }
			set { UpdateTokenInfo(value); _decryptionPassword = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.PrivateKeyPath != null)
			{
				this.PrivateKeyPath.Accept(visitor);
			}

			if (this.EncryptionPassword != null)
			{
				this.EncryptionPassword.Accept(visitor);
			}

			if (this.DecryptionPassword != null)
			{
				this.DecryptionPassword.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER CERTIFICATE statement
	/// </summary>
	[System.Serializable]
	public partial class AlterCertificateStatement : CertificateStatementBase
	{


		private AlterCertificateStatementKind _kind;

		/// <summary>
		/// Specifies exectly how certificate was altered
		/// </summary>
		public AlterCertificateStatementKind Kind
		{
			get { return _kind; }
			set { _kind = value; }
		}
		private Literal _attestedBy;

		/// <summary>
		/// String literal in case of ATTESTED BY option
		/// </summary>
		public Literal AttestedBy
		{
			get { return _attestedBy; }
			set { UpdateTokenInfo(value); _attestedBy = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.AttestedBy != null)
			{
				this.AttestedBy.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents CREATE CERTIFICATE statement
	/// </summary>
	[System.Serializable]
	public partial class CreateCertificateStatement : CertificateStatementBase, IAuthorization
	{


		private EncryptionSource _certificateSource;

		/// <summary>
		/// Certificate source
		/// </summary>
		public EncryptionSource CertificateSource
		{
			get { return _certificateSource; }
			set { UpdateTokenInfo(value); _certificateSource = value; }
		}
		private List<CertificateOption> _certificateOptions = new List<CertificateOption>();

		/// <summary>
		/// Subject, start/expire date options in case of new keys generation
		/// </summary>
		public IList<CertificateOption> CertificateOptions
		{
			get { return _certificateOptions; }
		}

		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((CertificateStatementBase)this).Name != null)
			{
				 ((CertificateStatementBase)this).Name.Accept(visitor);
			}

			if (this.CertificateSource != null)
			{
				this.CertificateSource.Accept(visitor);
			}

			if (((CertificateStatementBase)this).PrivateKeyPath != null)
			{
				 ((CertificateStatementBase)this).PrivateKeyPath.Accept(visitor);
			}

			for (Int32 i = 0, count = this.CertificateOptions.Count; i < count; ++i)
			{
				this.CertificateOptions[i].Accept(visitor);
			}

			if (((CertificateStatementBase)this).EncryptionPassword != null)
			{
				 ((CertificateStatementBase)this).EncryptionPassword.Accept(visitor);
			}

			if (((CertificateStatementBase)this).DecryptionPassword != null)
			{
				 ((CertificateStatementBase)this).DecryptionPassword.Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents single SUBJECT or START_DATE or EXPIRE_DATE options in CREATE CERTIFICATE statement
	/// </summary>
	[System.Serializable]
	public partial class CertificateOption : TSqlFragment
	{


		private CertificateOptionKinds _kind;

		/// <summary>
		/// Option kind
		/// </summary>
		public CertificateOptionKinds Kind
		{
			get { return _kind; }
			set { _kind = value; }
		}
		private Literal _value;

		/// <summary>
		/// Option value
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE CONTRACT statement
	/// </summary>
	[System.Serializable]
	public partial class CreateContractStatement : TSqlStatement, IAuthorization
	{


		private Identifier _name;

		/// <summary>
		/// Contract name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<ContractMessage> _messages = new List<ContractMessage>();

		/// <summary>
		/// Information about messages in the contract
		/// </summary>
		public IList<ContractMessage> Messages
		{
			get { return _messages; }
		}

		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Messages.Count; i < count; ++i)
			{
				this.Messages[i].Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents information about single message in CREATE CONTRACT statement
	/// </summary>
	[System.Serializable]
	public partial class ContractMessage : TSqlFragment
	{


		private Identifier _name;

		/// <summary>
		/// Message name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private MessageSender _sentBy;

		/// <summary>
		/// Who sends this message
		/// </summary>
		public MessageSender SentBy
		{
			get { return _sentBy; }
			set { _sentBy = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents common parts of ALTER and CREATE CREDENTIAL statement
	/// </summary>
	[System.Serializable]
	public abstract partial class CredentialStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Credential name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private Literal _identity;

		/// <summary>
		/// Specifies the name of the account to be used when connecting outside the server.
		/// </summary>
		public Literal Identity
		{
			get { return _identity; }
			set { UpdateTokenInfo(value); _identity = value; }
		}
		private Literal _secret;

		/// <summary>
		/// Specifies the secret required for outgoing authentication. This clause is optional.
		/// </summary>
		public Literal Secret
		{
			get { return _secret; }
			set { UpdateTokenInfo(value); _secret = value; }
		}
		private bool _isDatabaseScoped;

		/// <summary>
		/// Whether the credential is database scoped or not.
		/// </summary>
		public bool IsDatabaseScoped
		{
			get { return _isDatabaseScoped; }
			set { _isDatabaseScoped = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Identity != null)
			{
				this.Identity.Accept(visitor);
			}

			if (this.Secret != null)
			{
				this.Secret.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE CREDENTIAL statement
	/// </summary>
	[System.Serializable]
	public partial class CreateCredentialStatement : CredentialStatement
	{


		private Identifier _cryptographicProviderName;

		/// <summary>
		/// Specifies the name of a Enterprise Key Management Provider (EKM).
		/// </summary>
		public Identifier CryptographicProviderName
		{
			get { return _cryptographicProviderName; }
			set { UpdateTokenInfo(value); _cryptographicProviderName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.CryptographicProviderName != null)
			{
				this.CryptographicProviderName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ALTER CREDENTIAL statement
	/// </summary>
	[System.Serializable]
	public partial class AlterCredentialStatement : CredentialStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents common parts of CREATE and ALTER MESSAGE TYPE statements
	/// </summary>
	[System.Serializable]
	public abstract partial class MessageTypeStatementBase : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Message type name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private MessageValidationMethod _validationMethod;

		/// <summary>
		/// Specifies how Service Broker validates the message body for messages of this type
		/// </summary>
		public MessageValidationMethod ValidationMethod
		{
			get { return _validationMethod; }
			set { _validationMethod = value; }
		}
		private SchemaObjectName _xmlSchemaCollectionName;

		/// <summary>
		/// Name of an existing XML schema collection
		/// </summary>
		public SchemaObjectName XmlSchemaCollectionName
		{
			get { return _xmlSchemaCollectionName; }
			set { UpdateTokenInfo(value); _xmlSchemaCollectionName = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.XmlSchemaCollectionName != null)
			{
				this.XmlSchemaCollectionName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE MESSAGE TYPE statement
	/// </summary>
	[System.Serializable]
	public partial class CreateMessageTypeStatement : MessageTypeStatementBase, IAuthorization
	{


		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((MessageTypeStatementBase)this).Name != null)
			{
				 ((MessageTypeStatementBase)this).Name.Accept(visitor);
			}

			if (((MessageTypeStatementBase)this).XmlSchemaCollectionName != null)
			{
				 ((MessageTypeStatementBase)this).XmlSchemaCollectionName.Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ALTER MESSAGE TYPE statement
	/// </summary>
	[System.Serializable]
	public partial class AlterMessageTypeStatement : MessageTypeStatementBase
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE AGGREGATE statement
	/// </summary>
	[System.Serializable]
	public partial class CreateAggregateStatement : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// Aggregate function name
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private AssemblyName _assemblyName;

		/// <summary>
		/// Specifies the assembly/class to bind with the user-defined aggregate function.
		/// </summary>
		public AssemblyName AssemblyName
		{
			get { return _assemblyName; }
			set { UpdateTokenInfo(value); _assemblyName = value; }
		}
		private List<ProcedureParameter> _parameters = new List<ProcedureParameter>();

		/// <summary>
		/// Aggregate parameters.
		/// </summary>
		public IList<ProcedureParameter> Parameters
		{
			get { return _parameters; }
		}

		private DataTypeReference _returnType;

		/// <summary>
		/// Aggregate function return type.
		/// </summary>
		public DataTypeReference ReturnType
		{
			get { return _returnType; }
			set { UpdateTokenInfo(value); _returnType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.AssemblyName != null)
			{
				this.AssemblyName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

			if (this.ReturnType != null)
			{
				this.ReturnType.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE ENDPOINT statement
	/// </summary>
	[System.Serializable]
	public partial class CreateEndpointStatement : AlterCreateEndpointStatementBase, IAuthorization
	{


		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterCreateEndpointStatementBase)this).Name != null)
			{
				 ((AlterCreateEndpointStatementBase)this).Name.Accept(visitor);
			}

			if (((AlterCreateEndpointStatementBase)this).Affinity != null)
			{
				 ((AlterCreateEndpointStatementBase)this).Affinity.Accept(visitor);
			}

			for (Int32 i = 0, count = ((AlterCreateEndpointStatementBase)this).ProtocolOptions.Count; i < count; ++i)
			{
				 ((AlterCreateEndpointStatementBase)this).ProtocolOptions[i].Accept(visitor);
			}

			for (Int32 i = 0, count = ((AlterCreateEndpointStatementBase)this).PayloadOptions.Count; i < count; ++i)
			{
				 ((AlterCreateEndpointStatementBase)this).PayloadOptions[i].Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ALTER ENDPOINT statement
	/// </summary>
	[System.Serializable]
	public partial class AlterEndpointStatement : AlterCreateEndpointStatementBase
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents common part of CREATE and ALTER ENDPOINT statements
	/// </summary>
	[System.Serializable]
	public abstract partial class AlterCreateEndpointStatementBase : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Endpoint name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private EndpointState _state;

		/// <summary>
		/// Endpoint state
		/// </summary>
		public EndpointState State
		{
			get { return _state; }
			set { _state = value; }
		}
		private EndpointAffinity _affinity;

		/// <summary>
		/// Optional affinity clause
		/// </summary>
		public EndpointAffinity Affinity
		{
			get { return _affinity; }
			set { UpdateTokenInfo(value); _affinity = value; }
		}
		private EndpointProtocol _protocol;

		/// <summary>
		/// Endpoint protocol
		/// </summary>
		public EndpointProtocol Protocol
		{
			get { return _protocol; }
			set { _protocol = value; }
		}
		private List<EndpointProtocolOption> _protocolOptions = new List<EndpointProtocolOption>();

		/// <summary>
		/// Protocol options for this endpoint
		/// </summary>
		public IList<EndpointProtocolOption> ProtocolOptions
		{
			get { return _protocolOptions; }
		}

		private EndpointType _endpointType;

		/// <summary>
		/// Endpoint type
		/// </summary>
		public EndpointType EndpointType
		{
			get { return _endpointType; }
			set { _endpointType = value; }
		}
		private List<PayloadOption> _payloadOptions = new List<PayloadOption>();

		/// <summary>
		/// Payload options for this endpoint
		/// </summary>
		public IList<PayloadOption> PayloadOptions
		{
			get { return _payloadOptions; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Affinity != null)
			{
				this.Affinity.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ProtocolOptions.Count; i < count; ++i)
			{
				this.ProtocolOptions[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.PayloadOptions.Count; i < count; ++i)
			{
				this.PayloadOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents AFFINITY option in CREATE/ALTER ENDPOINT statements
	/// </summary>
	[System.Serializable]
	public partial class EndpointAffinity : TSqlFragment
	{


		private AffinityKind _kind;

		/// <summary>
		/// Specified affinity
		/// </summary>
		public AffinityKind Kind
		{
			get { return _kind; }
			set { _kind = value; }
		}
		private Literal _value;

		/// <summary>
		/// Long integer affinity value (in case of Integer kind)
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents single protocol option in CREATE ENDPOINT statement
	/// </summary>
	[System.Serializable]
	public abstract partial class EndpointProtocolOption : TSqlFragment
	{


		private EndpointProtocolOptions _kind;

		/// <summary>
		/// Option kind
		/// </summary>
		public EndpointProtocolOptions Kind
		{
			get { return _kind; }
			set { _kind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an option which has single string or integer value
	/// </summary>
	[System.Serializable]
	public partial class LiteralEndpointProtocolOption : EndpointProtocolOption
	{


		private Literal _value;

		/// <summary>
		/// Option value (string or integer)
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents AUTHENTICATION HTTP endpoint protocol option
	/// </summary>
	[System.Serializable]
	public partial class AuthenticationEndpointProtocolOption : EndpointProtocolOption
	{


		private AuthenticationTypes _authenticationTypes;

		/// <summary>
		/// Authentication types
		/// </summary>
		public AuthenticationTypes AuthenticationTypes
		{
			get { return _authenticationTypes; }
			set { _authenticationTypes = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents PORTS HTTP endpoint protocol option
	/// </summary>
	[System.Serializable]
	public partial class PortsEndpointProtocolOption : EndpointProtocolOption
	{


		private PortTypes _portTypes;

		/// <summary>
		/// Port types
		/// </summary>
		public PortTypes PortTypes
		{
			get { return _portTypes; }
			set { _portTypes = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents PORTS HTTP endpoint protocol option
	/// </summary>
	[System.Serializable]
	public partial class CompressionEndpointProtocolOption : EndpointProtocolOption
	{


		private bool _isEnabled;

		/// <summary>
		/// True if compression set to ENABLED, false if to DISABLED
		/// </summary>
		public bool IsEnabled
		{
			get { return _isEnabled; }
			set { _isEnabled = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents LISTENER_IP TCP endpoint protocol option
	/// </summary>
	[System.Serializable]
	public partial class ListenerIPEndpointProtocolOption : EndpointProtocolOption
	{


		private bool _isAll;

		/// <summary>
		/// True if ALL was specified, false otherwise
		/// </summary>
		public bool IsAll
		{
			get { return _isAll; }
			set { _isAll = value; }
		}
		private Literal _iPv6;

		/// <summary>
		/// IPv6 address (optional)
		/// </summary>
		public Literal IPv6
		{
			get { return _iPv6; }
			set { UpdateTokenInfo(value); _iPv6 = value; }
		}
		private IPv4 _iPv4PartOne;

		/// <summary>
		/// Four-part IP address, part before colon (optional)
		/// </summary>
		public IPv4 IPv4PartOne
		{
			get { return _iPv4PartOne; }
			set { UpdateTokenInfo(value); _iPv4PartOne = value; }
		}
		private IPv4 _iPv4PartTwo;

		/// <summary>
		/// Four-part IP address, part after colon (optional)
		/// </summary>
		public IPv4 IPv4PartTwo
		{
			get { return _iPv4PartTwo; }
			set { UpdateTokenInfo(value); _iPv4PartTwo = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.IPv6 != null)
			{
				this.IPv6.Accept(visitor);
			}

			if (this.IPv4PartOne != null)
			{
				this.IPv4PartOne.Accept(visitor);
			}

			if (this.IPv4PartTwo != null)
			{
				this.IPv4PartTwo.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents IP address (x.x.x.x)
	/// </summary>
	[System.Serializable]
	public partial class IPv4 : TSqlFragment
	{


		private Literal _octetOne;

		/// <summary>
		/// First octet
		/// </summary>
		public Literal OctetOne
		{
			get { return _octetOne; }
			set { UpdateTokenInfo(value); _octetOne = value; }
		}
		private Literal _octetTwo;

		/// <summary>
		/// Second octet
		/// </summary>
		public Literal OctetTwo
		{
			get { return _octetTwo; }
			set { UpdateTokenInfo(value); _octetTwo = value; }
		}
		private Literal _octetThree;

		/// <summary>
		/// Third octet
		/// </summary>
		public Literal OctetThree
		{
			get { return _octetThree; }
			set { UpdateTokenInfo(value); _octetThree = value; }
		}
		private Literal _octetFour;

		/// <summary>
		/// Fourth octet
		/// </summary>
		public Literal OctetFour
		{
			get { return _octetFour; }
			set { UpdateTokenInfo(value); _octetFour = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OctetOne != null)
			{
				this.OctetOne.Accept(visitor);
			}

			if (this.OctetTwo != null)
			{
				this.OctetTwo.Accept(visitor);
			}

			if (this.OctetThree != null)
			{
				this.OctetThree.Accept(visitor);
			}

			if (this.OctetFour != null)
			{
				this.OctetFour.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SOAP method in payload part of CREATE ENDPOINT statement
	/// </summary>
	[System.Serializable]
	public partial class SoapMethod : PayloadOption
	{


		private Literal _alias;

		/// <summary>
		/// Method alias
		/// </summary>
		public Literal Alias
		{
			get { return _alias; }
			set { UpdateTokenInfo(value); _alias = value; }
		}
		private Literal _namespace;

		/// <summary>
		/// Optional method namespace
		/// </summary>
		public Literal Namespace
		{
			get { return _namespace; }
			set { UpdateTokenInfo(value); _namespace = value; }
		}
		private SoapMethodAction _action;

		/// <summary>
		/// Optional ADD/ALTER/DROP prefix (in case of ALTER ENDPOINT)
		/// </summary>
		public SoapMethodAction Action
		{
			get { return _action; }
			set { _action = value; }
		}
		private Literal _name;

		/// <summary>
		/// Specifies the name of a stored procedure or user-defined function that corresponds to the SOAP method
		/// </summary>
		public Literal Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private SoapMethodFormat _format;

		/// <summary>
		/// Specifies whether a row count, error messages and warnings are returned with the result set
		/// </summary>
		public SoapMethodFormat Format
		{
			get { return _format; }
			set { _format = value; }
		}
		private SoapMethodSchemas _schema;

		/// <summary>
		/// Determines whether inline XSD schema will be returned
		/// </summary>
		public SoapMethodSchemas Schema
		{
			get { return _schema; }
			set { _schema = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Alias != null)
			{
				this.Alias.Accept(visitor);
			}

			if (this.Namespace != null)
			{
				this.Namespace.Accept(visitor);
			}

			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a single payload option in CREATE / ALTER ENDPOINT statement
	/// </summary>
	[System.Serializable]
	public abstract partial class PayloadOption : TSqlFragment
	{


		private PayloadOptionKinds _kind;

		/// <summary>
		/// Option kind (for duplicate checking)
		/// </summary>
		public PayloadOptionKinds Kind
		{
			get { return _kind; }
			set { _kind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an option which can be either ENABLED or DISABLED
	/// </summary>
	[System.Serializable]
	public partial class EnabledDisabledPayloadOption : PayloadOption
	{


		private bool _isEnabled;

		/// <summary>
		/// Option state
		/// </summary>
		public bool IsEnabled
		{
			get { return _isEnabled; }
			set { _isEnabled = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents WSDL payload option
	/// </summary>
	[System.Serializable]
	public partial class WsdlPayloadOption : PayloadOption
	{


		private bool _isNone;

		/// <summary>
		/// If NONE specified as option value
		/// </summary>
		public bool IsNone
		{
			get { return _isNone; }
			set { _isNone = value; }
		}
		private Literal _value;

		/// <summary>
		/// Option value - string or DEFAULT
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents LOGIN_TYPE payload option
	/// </summary>
	[System.Serializable]
	public partial class LoginTypePayloadOption : PayloadOption
	{


		private bool _isWindows;

		/// <summary>
		/// True in case of WINDOWS, false in case of MIXED login type
		/// </summary>
		public bool IsWindows
		{
			get { return _isWindows; }
			set { _isWindows = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents payload option with a single literal value
	/// </summary>
	[System.Serializable]
	public partial class LiteralPayloadOption : PayloadOption
	{


		private Literal _value;

		/// <summary>
		/// Option value
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents SESSION_TIMEOUT payload option
	/// </summary>
	[System.Serializable]
	public partial class SessionTimeoutPayloadOption : PayloadOption
	{


		private bool _isNever;

		/// <summary>
		/// If session never times out
		/// </summary>
		public bool IsNever
		{
			get { return _isNever; }
			set { _isNever = value; }
		}
		private Literal _timeout;

		/// <summary>
		/// Session timeout
		/// </summary>
		public Literal Timeout
		{
			get { return _timeout; }
			set { UpdateTokenInfo(value); _timeout = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Timeout != null)
			{
				this.Timeout.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents SCHEMA payload option
	/// </summary>
	[System.Serializable]
	public partial class SchemaPayloadOption : PayloadOption
	{


		private bool _isStandard;

		/// <summary>
		/// True in case of STANDARD, false in case of NONE schema
		/// </summary>
		public bool IsStandard
		{
			get { return _isStandard; }
			set { _isStandard = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CHARACTER_SET payload option
	/// </summary>
	[System.Serializable]
	public partial class CharacterSetPayloadOption : PayloadOption
	{


		private bool _isSql;

		/// <summary>
		/// True in case of SQL, false in case of XML character set
		/// </summary>
		public bool IsSql
		{
			get { return _isSql; }
			set { _isSql = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ROLE payload option
	/// </summary>
	[System.Serializable]
	public partial class RolePayloadOption : PayloadOption
	{


		private DatabaseMirroringEndpointRole _role;

		/// <summary>
		/// Specifies the database mirroring role or roles that the endpoint supports.
		/// </summary>
		public DatabaseMirroringEndpointRole Role
		{
			get { return _role; }
			set { _role = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents AUTHENTICATION payload option
	/// </summary>
	[System.Serializable]
	public partial class AuthenticationPayloadOption : PayloadOption
	{


		private AuthenticationProtocol _protocol;

		/// <summary>
		/// Specifies encryption protocol to use
		/// </summary>
		public AuthenticationProtocol Protocol
		{
			get { return _protocol; }
			set { _protocol = value; }
		}
		private Identifier _certificate;

		/// <summary>
		/// (Optional) Certificate to use.
		/// </summary>
		public Identifier Certificate
		{
			get { return _certificate; }
			set { UpdateTokenInfo(value); _certificate = value; }
		}
		private bool _tryCertificateFirst;

		/// <summary>
		/// True if connect should first try certificate and then Windows Authentication.
		/// </summary>
		public bool TryCertificateFirst
		{
			get { return _tryCertificateFirst; }
			set { _tryCertificateFirst = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Certificate != null)
			{
				this.Certificate.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ENCRYPTION payload option
	/// </summary>
	[System.Serializable]
	public partial class EncryptionPayloadOption : PayloadOption
	{


		private EndpointEncryptionSupport _encryptionSupport;

		/// <summary>
		/// Specifies whether encryption is used in the process
		/// </summary>
		public EndpointEncryptionSupport EncryptionSupport
		{
			get { return _encryptionSupport; }
			set { _encryptionSupport = value; }
		}
		private EncryptionAlgorithmPreference _algorithmPartOne;

		/// <summary>
		/// First (preferred) algorithm (if specified)
		/// </summary>
		public EncryptionAlgorithmPreference AlgorithmPartOne
		{
			get { return _algorithmPartOne; }
			set { _algorithmPartOne = value; }
		}
		private EncryptionAlgorithmPreference _algorithmPartTwo;

		/// <summary>
		/// Second algorithm (if specified)
		/// </summary>
		public EncryptionAlgorithmPreference AlgorithmPartTwo
		{
			get { return _algorithmPartTwo; }
			set { _algorithmPartTwo = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents common properties for ALTER and CREATE SYMMETRIC KEY statements
	/// </summary>
	[System.Serializable]
	public abstract partial class SymmetricKeyStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Key name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<CryptoMechanism> _encryptingMechanisms = new List<CryptoMechanism>();

		/// <summary>
		/// Key encryption mechanisms
		/// </summary>
		public IList<CryptoMechanism> EncryptingMechanisms
		{
			get { return _encryptingMechanisms; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.EncryptingMechanisms.Count; i < count; ++i)
			{
				this.EncryptingMechanisms[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE SYMMETRIC KEY statement
	/// </summary>
	[System.Serializable]
	public partial class CreateSymmetricKeyStatement : SymmetricKeyStatement, IAuthorization
	{


		private List<KeyOption> _keyOptions = new List<KeyOption>();

		/// <summary>
		/// Options for this key.
		/// </summary>
		public IList<KeyOption> KeyOptions
		{
			get { return _keyOptions; }
		}

		private Identifier _provider;

		/// <summary>
		/// Optional Extensible Key Management provider name.
		/// </summary>
		public Identifier Provider
		{
			get { return _provider; }
			set { UpdateTokenInfo(value); _provider = value; }
		}
		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((SymmetricKeyStatement)this).Name != null)
			{
				 ((SymmetricKeyStatement)this).Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.KeyOptions.Count; i < count; ++i)
			{
				this.KeyOptions[i].Accept(visitor);
			}

			if (this.Provider != null)
			{
				this.Provider.Accept(visitor);
			}

			for (Int32 i = 0, count = ((SymmetricKeyStatement)this).EncryptingMechanisms.Count; i < count; ++i)
			{
				 ((SymmetricKeyStatement)this).EncryptingMechanisms[i].Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents key option in CREATE SYMMETRIC KEY statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class KeyOption : TSqlFragment
	{


		private KeyOptionKind _optionKind;

		/// <summary>
		/// The option kind.
		/// </summary>
		public KeyOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents KEY_SOURCE option.
	/// </summary>
	[System.Serializable]
	public partial class KeySourceKeyOption : KeyOption
	{


		private Literal _passPhrase;

		/// <summary>
		/// Specifies a pass phrase from which to derive the key.
		/// </summary>
		public Literal PassPhrase
		{
			get { return _passPhrase; }
			set { UpdateTokenInfo(value); _passPhrase = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.PassPhrase != null)
			{
				this.PassPhrase.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ALGORITHM option.
	/// </summary>
	[System.Serializable]
	public partial class AlgorithmKeyOption : KeyOption
	{


		private EncryptionAlgorithm _algorithm;

		/// <summary>
		/// Encryption algorithm to use.
		/// </summary>
		public EncryptionAlgorithm Algorithm
		{
			get { return _algorithm; }
			set { _algorithm = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents IDENTITY_VALUE option.
	/// </summary>
	[System.Serializable]
	public partial class IdentityValueKeyOption : KeyOption
	{


		private Literal _identityPhrase;

		/// <summary>
		/// Specifies an identity phrase from which to generate a GUID for tagging data that is encrypted with a temporary key.
		/// </summary>
		public Literal IdentityPhrase
		{
			get { return _identityPhrase; }
			set { UpdateTokenInfo(value); _identityPhrase = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.IdentityPhrase != null)
			{
				this.IdentityPhrase.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents PROVIDER_KEY_NAME option.
	/// </summary>
	[System.Serializable]
	public partial class ProviderKeyNameKeyOption : KeyOption
	{


		private Literal _keyName;

		/// <summary>
		/// Specifies the name referenced in the Extensible Key Management provider.
		/// </summary>
		public Literal KeyName
		{
			get { return _keyName; }
			set { UpdateTokenInfo(value); _keyName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.KeyName != null)
			{
				this.KeyName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents CREATION_DISPOSITION option.
	/// </summary>
	[System.Serializable]
	public partial class CreationDispositionKeyOption : KeyOption
	{


		private bool _isCreateNew;

		/// <summary>
		/// True if CREATE_NEW was specified, false in case of OPEN_EXISTING.
		/// </summary>
		public bool IsCreateNew
		{
			get { return _isCreateNew; }
			set { _isCreateNew = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER SYMMETRIC KEY statement
	/// </summary>
	[System.Serializable]
	public partial class AlterSymmetricKeyStatement : SymmetricKeyStatement
	{


		private bool _isAdd;

		/// <summary>
		/// True if adding encryption mechanisms, false if dropping
		/// </summary>
		public bool IsAdd
		{
			get { return _isAdd; }
			set { _isAdd = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((SymmetricKeyStatement)this).Name != null)
			{
				 ((SymmetricKeyStatement)this).Name.Accept(visitor);
			}

			for (Int32 i = 0, count = ((SymmetricKeyStatement)this).EncryptingMechanisms.Count; i < count; ++i)
			{
				 ((SymmetricKeyStatement)this).EncryptingMechanisms[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents CREATE FULLTEXT CATALOG statement
	/// </summary>
	[System.Serializable]
	public abstract partial class FullTextCatalogStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Catalog name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<FullTextCatalogOption> _options = new List<FullTextCatalogOption>();

		/// <summary>
		/// The collection of fulltext catalog options.
		/// </summary>
		public IList<FullTextCatalogOption> Options
		{
			get { return _options; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for fulltext catalog options.
	/// </summary>
	[System.Serializable]
	public abstract partial class FullTextCatalogOption : TSqlFragment
	{


		private FullTextCatalogOptionKind _optionKind;

		/// <summary>
		/// The fulltext catalog option kind.
		/// </summary>
		public FullTextCatalogOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ON/OFF fulltext catalog options.
	/// </summary>
	[System.Serializable]
	public partial class OnOffFullTextCatalogOption : FullTextCatalogOption
	{


		private OptionState _optionState;

		/// <summary>
		/// The option state.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE FULLTEXT CATALOG statement
	/// </summary>
	[System.Serializable]
	public partial class CreateFullTextCatalogStatement : FullTextCatalogStatement, IAuthorization
	{


		private Identifier _fileGroup;

		/// <summary>
		/// Optional filegroup which the new catalog with be part
		/// </summary>
		public Identifier FileGroup
		{
			get { return _fileGroup; }
			set { UpdateTokenInfo(value); _fileGroup = value; }
		}
		private Literal _path;

		/// <summary>
		/// Optional root directory for the catalog
		/// </summary>
		public Literal Path
		{
			get { return _path; }
			set { UpdateTokenInfo(value); _path = value; }
		}
		private bool _isDefault;

		/// <summary>
		/// True if AS DEFAULT was specified
		/// </summary>
		public bool IsDefault
		{
			get { return _isDefault; }
			set { _isDefault = value; }
		}
		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((FullTextCatalogStatement)this).Name != null)
			{
				 ((FullTextCatalogStatement)this).Name.Accept(visitor);
			}

			if (this.FileGroup != null)
			{
				this.FileGroup.Accept(visitor);
			}

			if (this.Path != null)
			{
				this.Path.Accept(visitor);
			}

			for (Int32 i = 0, count = ((FullTextCatalogStatement)this).Options.Count; i < count; ++i)
			{
				 ((FullTextCatalogStatement)this).Options[i].Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ALTER FULLTEXT CATALOG statement
	/// </summary>
	[System.Serializable]
	public partial class AlterFullTextCatalogStatement : FullTextCatalogStatement
	{


		private AlterFullTextCatalogAction _action;

		/// <summary>
		/// How statement alters catalog
		/// </summary>
		public AlterFullTextCatalogAction Action
		{
			get { return _action; }
			set { _action = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((FullTextCatalogStatement)this).Name != null)
			{
				 ((FullTextCatalogStatement)this).Name.Accept(visitor);
			}

			for (Int32 i = 0, count = ((FullTextCatalogStatement)this).Options.Count; i < count; ++i)
			{
				 ((FullTextCatalogStatement)this).Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents CREATE SERVICE statement
	/// </summary>
	[System.Serializable]
	public abstract partial class AlterCreateServiceStatementBase : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Service name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private SchemaObjectName _queueName;

		/// <summary>
		/// Queue name (with optional schema name)
		/// </summary>
		public SchemaObjectName QueueName
		{
			get { return _queueName; }
			set { UpdateTokenInfo(value); _queueName = value; }
		}
		private List<ServiceContract> _serviceContracts = new List<ServiceContract>();

		/// <summary>
		/// Optional service contract references
		/// </summary>
		public IList<ServiceContract> ServiceContracts
		{
			get { return _serviceContracts; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.QueueName != null)
			{
				this.QueueName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ServiceContracts.Count; i < count; ++i)
			{
				this.ServiceContracts[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE SERVICE statement
	/// </summary>
	[System.Serializable]
	public partial class CreateServiceStatement : AlterCreateServiceStatementBase, IAuthorization
	{


		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((AlterCreateServiceStatementBase)this).Name != null)
			{
				 ((AlterCreateServiceStatementBase)this).Name.Accept(visitor);
			}

			if (((AlterCreateServiceStatementBase)this).QueueName != null)
			{
				 ((AlterCreateServiceStatementBase)this).QueueName.Accept(visitor);
			}

			for (Int32 i = 0, count = ((AlterCreateServiceStatementBase)this).ServiceContracts.Count; i < count; ++i)
			{
				 ((AlterCreateServiceStatementBase)this).ServiceContracts[i].Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ALTER SERVICE statement
	/// </summary>
	[System.Serializable]
	public partial class AlterServiceStatement : AlterCreateServiceStatementBase
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents service contract reference (with optional action)
	/// </summary>
	[System.Serializable]
	public partial class ServiceContract : TSqlFragment
	{


		private Identifier _name;

		/// <summary>
		/// Contract name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private AlterAction _action;

		/// <summary>
		/// What we should do with contract
		/// </summary>
		public AlterAction Action
		{
			get { return _action; }
			set { _action = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// An expression that has two expressions as children.
	/// </summary>
	[System.Serializable]
	public partial class BinaryExpression : ScalarExpression
	{


		private BinaryExpressionType _binaryExpressionType;

		/// <summary>
		/// The type of the expression.
		/// </summary>
		public BinaryExpressionType BinaryExpressionType
		{
			get { return _binaryExpressionType; }
			set { _binaryExpressionType = value; }
		}
		private ScalarExpression _firstExpression;

		/// <summary>
		/// The first child expression.
		/// </summary>
		public ScalarExpression FirstExpression
		{
			get { return _firstExpression; }
			set { UpdateTokenInfo(value); _firstExpression = value; }
		}
		private ScalarExpression _secondExpression;

		/// <summary>
		/// The second child expression.
		/// </summary>
		public ScalarExpression SecondExpression
		{
			get { return _secondExpression; }
			set { UpdateTokenInfo(value); _secondExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.FirstExpression != null)
			{
				this.FirstExpression.Accept(visitor);
			}

			if (this.SecondExpression != null)
			{
				this.SecondExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class represents the built in functions as a simple table reference.
	/// </summary>
	[System.Serializable]
	public partial class BuiltInFunctionTableReference : TableReferenceWithAlias
	{


		private Identifier _name;

		/// <summary>
		/// The name of the built-in function. Important: The interpreter has to check if this is a proper built-in function.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<ScalarExpression> _parameters = new List<ScalarExpression>();

		/// <summary>
		/// Parameters for the function.
		/// </summary>
		public IList<ScalarExpression> Parameters
		{
			get { return _parameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// This class represents the set of global built in functions which do not belong to a schema.
	/// </summary>
	[System.Serializable]
	public partial class GlobalFunctionTableReference : TableReferenceWithAlias
	{


		private Identifier _name;

		/// <summary>
		/// The name of the built-in function. Important: The interpreter has to check if this is a proper built-in function.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<ScalarExpression> _parameters = new List<ScalarExpression>();

		/// <summary>
		/// Parameters for the function.
		/// </summary>
		public IList<ScalarExpression> Parameters
		{
			get { return _parameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the compute by clause that can be used in statements like select.
	/// </summary>
	[System.Serializable]
	public partial class ComputeClause : TSqlFragment
	{


		private List<ComputeFunction> _computeFunctions = new List<ComputeFunction>();

		/// <summary>
		/// The compute functions.  At least one is required.
		/// </summary>
		public IList<ComputeFunction> ComputeFunctions
		{
			get { return _computeFunctions; }
		}

		private List<ScalarExpression> _byExpressions = new List<ScalarExpression>();

		/// <summary>
		/// The expressions that come after by. Optional, may have zero elements.
		/// </summary>
		public IList<ScalarExpression> ByExpressions
		{
			get { return _byExpressions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.ComputeFunctions.Count; i < count; ++i)
			{
				this.ComputeFunctions[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.ByExpressions.Count; i < count; ++i)
			{
				this.ByExpressions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents compute function that can be used in compute clause.
	/// </summary>
	[System.Serializable]
	public partial class ComputeFunction : TSqlFragment
	{


		private ComputeFunctionType _computeFunctionType;

		/// <summary>
		/// The type of the function.
		/// </summary>
		public ComputeFunctionType ComputeFunctionType
		{
			get { return _computeFunctionType; }
			set { _computeFunctionType = value; }
		}
		private ScalarExpression _expression;

		/// <summary>
		/// The expression is the only parameter.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the pivoted table reference in a from clause.
	/// </summary>
	[System.Serializable]
	public partial class PivotedTableReference : TableReferenceWithAlias
	{


		private TableReference _tableReference;

		/// <summary>
		/// The table reference.
		/// </summary>
		public TableReference TableReference
		{
			get { return _tableReference; }
			set { UpdateTokenInfo(value); _tableReference = value; }
		}
		private List<Identifier> _inColumns = new List<Identifier>();

		/// <summary>
		/// The in columns.
		/// </summary>
		public IList<Identifier> InColumns
		{
			get { return _inColumns; }
		}

		private ColumnReferenceExpression _pivotColumn;

		/// <summary>
		/// The pivot column.
		/// </summary>
		public ColumnReferenceExpression PivotColumn
		{
			get { return _pivotColumn; }
			set { UpdateTokenInfo(value); _pivotColumn = value; }
		}
		private List<ColumnReferenceExpression> _valueColumns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// The value columns.
		/// </summary>
		public IList<ColumnReferenceExpression> ValueColumns
		{
			get { return _valueColumns; }
		}

		private MultiPartIdentifier _aggregateFunctionIdentifier;

		/// <summary>
		/// The multi-part identifier that represents the aggregate function.
		/// </summary>
		public MultiPartIdentifier AggregateFunctionIdentifier
		{
			get { return _aggregateFunctionIdentifier; }
			set { UpdateTokenInfo(value); _aggregateFunctionIdentifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.TableReference != null)
			{
				this.TableReference.Accept(visitor);
			}

			for (Int32 i = 0, count = this.InColumns.Count; i < count; ++i)
			{
				this.InColumns[i].Accept(visitor);
			}

			if (this.PivotColumn != null)
			{
				this.PivotColumn.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ValueColumns.Count; i < count; ++i)
			{
				this.ValueColumns[i].Accept(visitor);
			}

			if (this.AggregateFunctionIdentifier != null)
			{
				this.AggregateFunctionIdentifier.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the unpivoted table reference in a from clause.
	/// </summary>
	[System.Serializable]
	public partial class UnpivotedTableReference : TableReferenceWithAlias
	{


		private TableReference _tableReference;

		/// <summary>
		/// The table reference.
		/// </summary>
		public TableReference TableReference
		{
			get { return _tableReference; }
			set { UpdateTokenInfo(value); _tableReference = value; }
		}
		private List<ColumnReferenceExpression> _inColumns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// The in columns.
		/// </summary>
		public IList<ColumnReferenceExpression> InColumns
		{
			get { return _inColumns; }
		}

		private Identifier _pivotColumn;

		/// <summary>
		/// The pivot column.
		/// </summary>
		public Identifier PivotColumn
		{
			get { return _pivotColumn; }
			set { UpdateTokenInfo(value); _pivotColumn = value; }
		}
		private Identifier _valueColumn;

		/// <summary>
		/// The value column.
		/// </summary>
		public Identifier ValueColumn
		{
			get { return _valueColumn; }
			set { UpdateTokenInfo(value); _valueColumn = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.TableReference != null)
			{
				this.TableReference.Accept(visitor);
			}

			for (Int32 i = 0, count = this.InColumns.Count; i < count; ++i)
			{
				this.InColumns[i].Accept(visitor);
			}

			if (this.PivotColumn != null)
			{
				this.PivotColumn.Accept(visitor);
			}

			if (this.ValueColumn != null)
			{
				this.ValueColumn.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the unqualified join in a from clause.
	/// </summary>
	[System.Serializable]
	public partial class UnqualifiedJoin : JoinTableReference
	{


		private UnqualifiedJoinType _unqualifiedJoinType;

		/// <summary>
		/// The join type.
		/// </summary>
		public UnqualifiedJoinType UnqualifiedJoinType
		{
			get { return _unqualifiedJoinType; }
			set { _unqualifiedJoinType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the TABLESAMPLE clause.
	/// </summary>
	[System.Serializable]
	public partial class TableSampleClause : TSqlFragment
	{


		private bool _system;

		/// <summary>
		/// True if system is used.
		/// </summary>
		public bool System
		{
			get { return _system; }
			set { _system = value; }
		}
		private ScalarExpression _sampleNumber;

		/// <summary>
		/// The sample number.
		/// </summary>
		public ScalarExpression SampleNumber
		{
			get { return _sampleNumber; }
			set { UpdateTokenInfo(value); _sampleNumber = value; }
		}
		private TableSampleClauseOption _tableSampleClauseOption;

		/// <summary>
		/// The option.
		/// </summary>
		public TableSampleClauseOption TableSampleClauseOption
		{
			get { return _tableSampleClauseOption; }
			set { _tableSampleClauseOption = value; }
		}
		private ScalarExpression _repeatSeed;

		/// <summary>
		/// The repeat seed. Optional, may be null.
		/// </summary>
		public ScalarExpression RepeatSeed
		{
			get { return _repeatSeed; }
			set { UpdateTokenInfo(value); _repeatSeed = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SampleNumber != null)
			{
				this.SampleNumber.Accept(visitor);
			}

			if (this.RepeatSeed != null)
			{
				this.RepeatSeed.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The abstract base class that represents scalar expressions.
	/// </summary>
	[System.Serializable]
	public abstract partial class ScalarExpression : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The abstract base class that represents boolean expressions
	/// </summary>
	[System.Serializable]
	public abstract partial class BooleanExpression : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a NOT boolean expression
	/// </summary>
	[System.Serializable]
	public partial class BooleanNotExpression : BooleanExpression
	{


		private BooleanExpression _expression;

		/// <summary>
		/// The child expression
		/// </summary>
		public BooleanExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a boolean expression enclosed in parentheses.
	/// </summary>
	[System.Serializable]
	public partial class BooleanParenthesisExpression : BooleanExpression
	{


		private BooleanExpression _expression;

		/// <summary>
		/// Represents the inner boolean expression
		/// </summary>
		public BooleanExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A boolean expression that does a comparison between two scalar expressions
	/// </summary>
	[System.Serializable]
	public partial class BooleanComparisonExpression : BooleanExpression
	{


		private BooleanComparisonType _comparisonType;

		/// <summary>
		/// The type of the comparison expression.
		/// </summary>
		public BooleanComparisonType ComparisonType
		{
			get { return _comparisonType; }
			set { _comparisonType = value; }
		}
		private ScalarExpression _firstExpression;

		/// <summary>
		/// The first child expression.
		/// </summary>
		public ScalarExpression FirstExpression
		{
			get { return _firstExpression; }
			set { UpdateTokenInfo(value); _firstExpression = value; }
		}
		private ScalarExpression _secondExpression;

		/// <summary>
		/// The second child expression.
		/// </summary>
		public ScalarExpression SecondExpression
		{
			get { return _secondExpression; }
			set { UpdateTokenInfo(value); _secondExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.FirstExpression != null)
			{
				this.FirstExpression.Accept(visitor);
			}

			if (this.SecondExpression != null)
			{
				this.SecondExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A boolean expression that has two boolean expressions as children
	/// </summary>
	[System.Serializable]
	public partial class BooleanBinaryExpression : BooleanExpression
	{


		private BooleanBinaryExpressionType _binaryExpressionType;

		/// <summary>
		/// The type of the boolean expression.
		/// </summary>
		public BooleanBinaryExpressionType BinaryExpressionType
		{
			get { return _binaryExpressionType; }
			set { _binaryExpressionType = value; }
		}
		private BooleanExpression _firstExpression;

		/// <summary>
		/// The first child expression.
		/// </summary>
		public BooleanExpression FirstExpression
		{
			get { return _firstExpression; }
			set { UpdateTokenInfo(value); _firstExpression = value; }
		}
		private BooleanExpression _secondExpression;

		/// <summary>
		/// The second child expression.
		/// </summary>
		public BooleanExpression SecondExpression
		{
			get { return _secondExpression; }
			set { UpdateTokenInfo(value); _secondExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.FirstExpression != null)
			{
				this.FirstExpression.Accept(visitor);
			}

			if (this.SecondExpression != null)
			{
				this.SecondExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A boolean expression for IS [NOT] NULL
	/// </summary>
	[System.Serializable]
	public partial class BooleanIsNullExpression : BooleanExpression
	{


		private bool _isNot;

		/// <summary>
		/// Whether the expression includes NOT
		/// </summary>
		public bool IsNot
		{
			get { return _isNot; }
			set { _isNot = value; }
		}
		private ScalarExpression _expression;

		/// <summary>
		/// The child expression
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A boolean expression for MATCH
	/// </summary>
	[System.Serializable]
	public partial class GraphMatchPredicate : BooleanExpression
	{


		private BooleanExpression _expression;

		/// <summary>
		/// The child expression
		/// </summary>
		public BooleanExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A boolean expression for LastNode
	/// </summary>
	[System.Serializable]
	public partial class GraphMatchLastNodePredicate : BooleanExpression
	{


		private GraphMatchNodeExpression _leftExpression;

		/// <summary>
		/// The left expression
		/// </summary>
		public GraphMatchNodeExpression LeftExpression
		{
			get { return _leftExpression; }
			set { UpdateTokenInfo(value); _leftExpression = value; }
		}
		private GraphMatchNodeExpression _rightExpression;

		/// <summary>
		/// The right expression
		/// </summary>
		public GraphMatchNodeExpression RightExpression
		{
			get { return _rightExpression; }
			set { UpdateTokenInfo(value); _rightExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.LeftExpression != null)
			{
				this.LeftExpression.Accept(visitor);
			}

			if (this.RightExpression != null)
			{
				this.RightExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A boolean expression for MATCH
	/// </summary>
	[System.Serializable]
	public partial class GraphMatchNodeExpression : BooleanExpression
	{


		private Identifier _node;

		/// <summary>
		/// The referenced node
		/// </summary>
		public Identifier Node
		{
			get { return _node; }
			set { UpdateTokenInfo(value); _node = value; }
		}
		private bool _usesLastNode;

		/// <summary>
		/// True if the expression uses LAST_NODE for node.
		/// </summary>
		public bool UsesLastNode
		{
			get { return _usesLastNode; }
			set { _usesLastNode = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Node != null)
			{
				this.Node.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A boolean expression for Shortest Path expression
	/// </summary>
	[System.Serializable]
	public partial class GraphMatchRecursivePredicate : BooleanExpression
	{


		private GraphMatchRecursivePredicateKind _function;

		/// <summary>
		/// The recursive function to use
		/// </summary>
		public GraphMatchRecursivePredicateKind Function
		{
			get { return _function; }
			set { _function = value; }
		}
		private GraphMatchNodeExpression _outerNodeExpression;

		/// <summary>
		/// The referenced node
		/// </summary>
		public GraphMatchNodeExpression OuterNodeExpression
		{
			get { return _outerNodeExpression; }
			set { UpdateTokenInfo(value); _outerNodeExpression = value; }
		}
		private List<BooleanExpression> _expression = new List<BooleanExpression>();

		/// <summary>
		/// The resursive expressions in the ShortestPath clause
		/// </summary>
		public IList<BooleanExpression> Expression
		{
			get { return _expression; }
		}

		private GraphRecursiveMatchQuantifier _recursiveQuantifier;

		/// <summary>
		/// Literal Expression for Shortest Path
		/// </summary>
		public GraphRecursiveMatchQuantifier RecursiveQuantifier
		{
			get { return _recursiveQuantifier; }
			set { UpdateTokenInfo(value); _recursiveQuantifier = value; }
		}
		private bool _anchorOnLeft;

		/// <summary>
		/// True if the outer node is on the left side of the recursive expression, False if the outer node is on the right side of the recursive expression.
		/// </summary>
		public bool AnchorOnLeft
		{
			get { return _anchorOnLeft; }
			set { _anchorOnLeft = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OuterNodeExpression != null)
			{
				this.OuterNodeExpression.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Expression.Count; i < count; ++i)
			{
				this.Expression[i].Accept(visitor);
			}

			if (this.RecursiveQuantifier != null)
			{
				this.RecursiveQuantifier.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A boolean expression for a MATCH expression
	/// </summary>
	[System.Serializable]
	public partial class GraphMatchExpression : BooleanExpression
	{


		private Identifier _leftNode;

		/// <summary>
		/// The left node reference
		/// </summary>
		public Identifier LeftNode
		{
			get { return _leftNode; }
			set { UpdateTokenInfo(value); _leftNode = value; }
		}
		private Identifier _edge;

		/// <summary>
		/// The connecting edge
		/// </summary>
		public Identifier Edge
		{
			get { return _edge; }
			set { UpdateTokenInfo(value); _edge = value; }
		}
		private Identifier _rightNode;

		/// <summary>
		/// The right node reference
		/// </summary>
		public Identifier RightNode
		{
			get { return _rightNode; }
			set { UpdateTokenInfo(value); _rightNode = value; }
		}
		private bool _arrowOnRight;

		/// <summary>
		/// True if arrow points to right side, false if arrow points to the left
		/// </summary>
		public bool ArrowOnRight
		{
			get { return _arrowOnRight; }
			set { _arrowOnRight = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.LeftNode != null)
			{
				this.LeftNode.Accept(visitor);
			}

			if (this.Edge != null)
			{
				this.Edge.Accept(visitor);
			}

			if (this.RightNode != null)
			{
				this.RightNode.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A boolean expression for a MATCH expression
	/// </summary>
	[System.Serializable]
	public partial class GraphMatchCompositeExpression : BooleanExpression
	{


		private GraphMatchNodeExpression _leftNode;

		/// <summary>
		/// The left node reference
		/// </summary>
		public GraphMatchNodeExpression LeftNode
		{
			get { return _leftNode; }
			set { UpdateTokenInfo(value); _leftNode = value; }
		}
		private Identifier _edge;

		/// <summary>
		/// The connecting edge
		/// </summary>
		public Identifier Edge
		{
			get { return _edge; }
			set { UpdateTokenInfo(value); _edge = value; }
		}
		private GraphMatchNodeExpression _rightNode;

		/// <summary>
		/// The right node reference
		/// </summary>
		public GraphMatchNodeExpression RightNode
		{
			get { return _rightNode; }
			set { UpdateTokenInfo(value); _rightNode = value; }
		}
		private bool _arrowOnRight;

		/// <summary>
		/// True if arrow points to right side, false if arrow points to the left
		/// </summary>
		public bool ArrowOnRight
		{
			get { return _arrowOnRight; }
			set { _arrowOnRight = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.LeftNode != null)
			{
				this.LeftNode.Accept(visitor);
			}

			if (this.Edge != null)
			{
				this.Edge.Accept(visitor);
			}

			if (this.RightNode != null)
			{
				this.RightNode.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A boolean expression for MATCH
	/// </summary>
	[System.Serializable]
	public partial class GraphRecursiveMatchQuantifier : BooleanExpression
	{


		private bool _isPlusSign;

		/// <summary>
		/// True if there is a plus sign, False if there is range of literals.
		/// </summary>
		public bool IsPlusSign
		{
			get { return _isPlusSign; }
			set { _isPlusSign = value; }
		}
		private Literal _lowerLimit;

		/// <summary>
		/// Lower limit for shortest path search.
		/// </summary>
		public Literal LowerLimit
		{
			get { return _lowerLimit; }
			set { UpdateTokenInfo(value); _lowerLimit = value; }
		}
		private Literal _upperLimit;

		/// <summary>
		/// Upper limit for shortest path search..
		/// </summary>
		public Literal UpperLimit
		{
			get { return _upperLimit; }
			set { UpdateTokenInfo(value); _upperLimit = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.LowerLimit != null)
			{
				this.LowerLimit.Accept(visitor);
			}

			if (this.UpperLimit != null)
			{
				this.UpperLimit.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class represents an expression with a sort order.
	/// </summary>
	[System.Serializable]
	public partial class ExpressionWithSortOrder : TSqlFragment
	{


		private SortOrder _sortOrder;

		/// <summary>
		/// The sort order.
		/// </summary>
		public SortOrder SortOrder
		{
			get { return _sortOrder; }
			set { _sortOrder = value; }
		}
		private ScalarExpression _expression;

		/// <summary>
		/// The expression.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the group by clause that can be used in statements like select, update.
	/// </summary>
	[System.Serializable]
	public partial class GroupByClause : TSqlFragment
	{


		private GroupByOption _groupByOption;

		/// <summary>
		/// The group by option.
		/// </summary>
		public GroupByOption GroupByOption
		{
			get { return _groupByOption; }
			set { _groupByOption = value; }
		}
		private bool _all;

		/// <summary>
		/// True if ALL keyword is used.
		/// </summary>
		public bool All
		{
			get { return _all; }
			set { _all = value; }
		}
		private List<GroupingSpecification> _groupingSpecifications = new List<GroupingSpecification>();

		/// <summary>
		/// Grouping specifications.
		/// </summary>
		public IList<GroupingSpecification> GroupingSpecifications
		{
			get { return _groupingSpecifications; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.GroupingSpecifications.Count; i < count; ++i)
			{
				this.GroupingSpecifications[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single grouping specification in GROUP BY clause.
	/// </summary>
	[System.Serializable]
	public abstract partial class GroupingSpecification : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// An expression on which the grouping operation is performed.
	/// </summary>
	[System.Serializable]
	public partial class ExpressionGroupingSpecification : GroupingSpecification
	{


		private ScalarExpression _expression;

		/// <summary>
		/// Expression itself.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}
		private bool _distributedAggregation;

		/// <summary>
		/// Specifies if we have a \'distributed aggregation\' option on this grouping column.
		/// </summary>
		public bool DistributedAggregation
		{
			get { return _distributedAggregation; }
			set { _distributedAggregation = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Composes a list of sub-specifications.
	/// </summary>
	[System.Serializable]
	public partial class CompositeGroupingSpecification : GroupingSpecification
	{


		private List<GroupingSpecification> _items = new List<GroupingSpecification>();

		/// <summary>
		/// Composed sub-specifications.
		/// </summary>
		public IList<GroupingSpecification> Items
		{
			get { return _items; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Items.Count; i < count; ++i)
			{
				this.Items[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CUBE grouping specification.
	/// </summary>
	[System.Serializable]
	public partial class CubeGroupingSpecification : GroupingSpecification
	{


		private List<GroupingSpecification> _arguments = new List<GroupingSpecification>();

		/// <summary>
		/// Sub-specifications.
		/// </summary>
		public IList<GroupingSpecification> Arguments
		{
			get { return _arguments; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Arguments.Count; i < count; ++i)
			{
				this.Arguments[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ROLLUP grouping specification.
	/// </summary>
	[System.Serializable]
	public partial class RollupGroupingSpecification : GroupingSpecification
	{


		private List<GroupingSpecification> _arguments = new List<GroupingSpecification>();

		/// <summary>
		/// Sub-specifications.
		/// </summary>
		public IList<GroupingSpecification> Arguments
		{
			get { return _arguments; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Arguments.Count; i < count; ++i)
			{
				this.Arguments[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ( ) (grand total) grouping specification.
	/// </summary>
	[System.Serializable]
	public partial class GrandTotalGroupingSpecification : GroupingSpecification
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents GROUPING SETS grouping specification.
	/// </summary>
	[System.Serializable]
	public partial class GroupingSetsGroupingSpecification : GroupingSpecification
	{


		private List<GroupingSpecification> _sets = new List<GroupingSpecification>();

		/// <summary>
		/// Included grouping sets.
		/// </summary>
		public IList<GroupingSpecification> Sets
		{
			get { return _sets; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Sets.Count; i < count; ++i)
			{
				this.Sets[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the output clause.
	/// </summary>
	[System.Serializable]
	public partial class OutputClause : TSqlFragment
	{


		private List<SelectElement> _selectColumns = new List<SelectElement>();

		/// <summary>
		/// The first list of select columns.
		/// </summary>
		public IList<SelectElement> SelectColumns
		{
			get { return _selectColumns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.SelectColumns.Count; i < count; ++i)
			{
				this.SelectColumns[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the OutputInto Clause
	/// </summary>
	[System.Serializable]
	public partial class OutputIntoClause : TSqlFragment
	{


		private List<SelectElement> _selectColumns = new List<SelectElement>();

		/// <summary>
		/// The first list of select columns.
		/// </summary>
		public IList<SelectElement> SelectColumns
		{
			get { return _selectColumns; }
		}

		private TableReference _intoTable;

		/// <summary>
		/// Represents the table, can be SchemaObjectTableReference or VariableTableReference. Optional may be null.
		/// </summary>
		public TableReference IntoTable
		{
			get { return _intoTable; }
			set { UpdateTokenInfo(value); _intoTable = value; }
		}
		private List<ColumnReferenceExpression> _intoTableColumns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// The columns for the table. Optional, may have zero elements.
		/// </summary>
		public IList<ColumnReferenceExpression> IntoTableColumns
		{
			get { return _intoTableColumns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.SelectColumns.Count; i < count; ++i)
			{
				this.SelectColumns[i].Accept(visitor);
			}

			if (this.IntoTable != null)
			{
				this.IntoTable.Accept(visitor);
			}

			for (Int32 i = 0, count = this.IntoTableColumns.Count; i < count; ++i)
			{
				this.IntoTableColumns[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the having clause that can be used in statements like select.
	/// </summary>
	[System.Serializable]
	public partial class HavingClause : TSqlFragment
	{


		private BooleanExpression _searchCondition;

		/// <summary>
		/// Represents the having clause that can be used in statements like select.
		/// </summary>
		public BooleanExpression SearchCondition
		{
			get { return _searchCondition; }
			set { UpdateTokenInfo(value); _searchCondition = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SearchCondition != null)
			{
				this.SearchCondition.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class represents the identity function that can be used in a SelectColumn.
	/// </summary>
	[System.Serializable]
	public partial class IdentityFunctionCall : ScalarExpression
	{


		private DataTypeReference _dataType;

		/// <summary>
		/// DataType for the column.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}
		private ScalarExpression _seed;

		/// <summary>
		/// The seed for the identity. Optional, may be null.
		/// </summary>
		public ScalarExpression Seed
		{
			get { return _seed; }
			set { UpdateTokenInfo(value); _seed = value; }
		}
		private ScalarExpression _increment;

		/// <summary>
		/// The increment for the identity. Optional, may be null.
		/// </summary>
		public ScalarExpression Increment
		{
			get { return _increment; }
			set { UpdateTokenInfo(value); _increment = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			if (this.Seed != null)
			{
				this.Seed.Accept(visitor);
			}

			if (this.Increment != null)
			{
				this.Increment.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the parenthesis that can encapsulate a join.
	/// </summary>
	[System.Serializable]
	public partial class JoinParenthesisTableReference : TableReference
	{


		private TableReference _join;

		/// <summary>
		/// The element inside the parenthesis.
		/// </summary>
		public TableReference Join
		{
			get { return _join; }
			set { UpdateTokenInfo(value); _join = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Join != null)
			{
				this.Join.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the order by clause that can be used in statements like select.
	/// </summary>
	[System.Serializable]
	public partial class OrderByClause : TSqlFragment
	{


		private List<ExpressionWithSortOrder> _orderByElements = new List<ExpressionWithSortOrder>();

		/// <summary>
		/// The items.
		/// </summary>
		public IList<ExpressionWithSortOrder> OrderByElements
		{
			get { return _orderByElements; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.OrderByElements.Count; i < count; ++i)
			{
				this.OrderByElements[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for JOIN table references
	/// </summary>
	[System.Serializable]
	public abstract partial class JoinTableReference : TableReference
	{


		private TableReference _firstTableReference;

		/// <summary>
		/// The first table reference.
		/// </summary>
		public TableReference FirstTableReference
		{
			get { return _firstTableReference; }
			set { UpdateTokenInfo(value); _firstTableReference = value; }
		}
		private TableReference _secondTableReference;

		/// <summary>
		/// The second table reference.
		/// </summary>
		public TableReference SecondTableReference
		{
			get { return _secondTableReference; }
			set { UpdateTokenInfo(value); _secondTableReference = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.FirstTableReference != null)
			{
				this.FirstTableReference.Accept(visitor);
			}

			if (this.SecondTableReference != null)
			{
				this.SecondTableReference.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the qualified join in a from clause.
	/// </summary>
	[System.Serializable]
	public partial class QualifiedJoin : JoinTableReference
	{


		private BooleanExpression _searchCondition;

		/// <summary>
		/// The search condition.
		/// </summary>
		public BooleanExpression SearchCondition
		{
			get { return _searchCondition; }
			set { UpdateTokenInfo(value); _searchCondition = value; }
		}
		private QualifiedJoinType _qualifiedJoinType;

		/// <summary>
		/// The join type.
		/// </summary>
		public QualifiedJoinType QualifiedJoinType
		{
			get { return _qualifiedJoinType; }
			set { _qualifiedJoinType = value; }
		}
		private JoinHint _joinHint;

		/// <summary>
		/// The join hint.
		/// </summary>
		public JoinHint JoinHint
		{
			get { return _joinHint; }
			set { _joinHint = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.SearchCondition != null)
			{
				this.SearchCondition.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the odbc qualified join in a from clause.
	/// </summary>
	[System.Serializable]
	public partial class OdbcQualifiedJoinTableReference : TableReference
	{


		private TableReference _tableReference;

		/// <summary>
		/// The table reference.
		/// </summary>
		public TableReference TableReference
		{
			get { return _tableReference; }
			set { UpdateTokenInfo(value); _tableReference = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.TableReference != null)
			{
				this.TableReference.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class is an abstract base class for the query expression hierarchy in select statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class QueryExpression : TSqlFragment
	{


		private OrderByClause _orderByClause;

		/// <summary>
		/// Optional order by clause.
		/// </summary>
		public OrderByClause OrderByClause
		{
			get { return _orderByClause; }
			set { UpdateTokenInfo(value); _orderByClause = value; }
		}
		private OffsetClause _offsetClause;

		/// <summary>
		/// Optional offset/fetch clause.
		/// </summary>
		public OffsetClause OffsetClause
		{
			get { return _offsetClause; }
			set { UpdateTokenInfo(value); _offsetClause = value; }
		}
		private ForClause _forClause;

		/// <summary>
		/// Optional for clause
		/// </summary>
		public ForClause ForClause
		{
			get { return _forClause; }
			set { UpdateTokenInfo(value); _forClause = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OrderByClause != null)
			{
				this.OrderByClause.Accept(visitor);
			}

			if (this.OffsetClause != null)
			{
				this.OffsetClause.Accept(visitor);
			}

			if (this.ForClause != null)
			{
				this.ForClause.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class represents the parenthesis expression that wraps a QueryExpression.
	/// </summary>
	[System.Serializable]
	public partial class QueryParenthesisExpression : QueryExpression
	{


		private QueryExpression _queryExpression;

		/// <summary>
		/// Shows the usage of unique row filter.
		/// </summary>
		public QueryExpression QueryExpression
		{
			get { return _queryExpression; }
			set { UpdateTokenInfo(value); _queryExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.QueryExpression != null)
			{
				this.QueryExpression.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// This class represents the major part of the select statement.
	/// </summary>
	[System.Serializable]
	public partial class QuerySpecification : QueryExpression
	{


		private UniqueRowFilter _uniqueRowFilter;

		/// <summary>
		/// Shows the usage of unique row filter.
		/// </summary>
		public UniqueRowFilter UniqueRowFilter
		{
			get { return _uniqueRowFilter; }
			set { _uniqueRowFilter = value; }
		}
		private TopRowFilter _topRowFilter;

		/// <summary>
		/// Shows the usage of top row filter. Optional may be null.
		/// </summary>
		public TopRowFilter TopRowFilter
		{
			get { return _topRowFilter; }
			set { UpdateTokenInfo(value); _topRowFilter = value; }
		}
		private List<SelectElement> _selectElements = new List<SelectElement>();

		/// <summary>
		/// These are the selected columns, or set variables, the strong types of objects that can be here are SelectColumn, SelectSetVariable.
		/// </summary>
		public IList<SelectElement> SelectElements
		{
			get { return _selectElements; }
		}

		private FromClause _fromClause;

		/// <summary>
		/// Optional may be null.
		/// </summary>
		public FromClause FromClause
		{
			get { return _fromClause; }
			set { UpdateTokenInfo(value); _fromClause = value; }
		}
		private WhereClause _whereClause;

		/// <summary>
		/// Where clause. Optional, may be null.
		/// </summary>
		public WhereClause WhereClause
		{
			get { return _whereClause; }
			set { UpdateTokenInfo(value); _whereClause = value; }
		}
		private GroupByClause _groupByClause;

		/// <summary>
		/// Group by clause. Optional, may be null.
		/// </summary>
		public GroupByClause GroupByClause
		{
			get { return _groupByClause; }
			set { UpdateTokenInfo(value); _groupByClause = value; }
		}
		private HavingClause _havingClause;

		/// <summary>
		/// Having clause. Optional, may be null.
		/// </summary>
		public HavingClause HavingClause
		{
			get { return _havingClause; }
			set { UpdateTokenInfo(value); _havingClause = value; }
		}
		private WindowClause _windowClause;

		/// <summary>
		/// Window clause. Optional, may be null.
		/// </summary>
		public WindowClause WindowClause
		{
			get { return _windowClause; }
			set { UpdateTokenInfo(value); _windowClause = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.TopRowFilter != null)
			{
				this.TopRowFilter.Accept(visitor);
			}

			for (Int32 i = 0, count = this.SelectElements.Count; i < count; ++i)
			{
				this.SelectElements[i].Accept(visitor);
			}

			if (this.FromClause != null)
			{
				this.FromClause.Accept(visitor);
			}

			if (this.WhereClause != null)
			{
				this.WhereClause.Accept(visitor);
			}

			if (this.GroupByClause != null)
			{
				this.GroupByClause.Accept(visitor);
			}

			if (this.HavingClause != null)
			{
				this.HavingClause.Accept(visitor);
			}

			if (this.WindowClause != null)
			{
				this.WindowClause.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the From clause in a QuerySpecification
	/// </summary>
	[System.Serializable]
	public partial class FromClause : TSqlFragment
	{


		private List<TableReference> _tableReferences = new List<TableReference>();

		/// <summary>
		/// Optional may be null.
		/// </summary>
		public IList<TableReference> TableReferences
		{
			get { return _tableReferences; }
		}

		private List<PredictTableReference> _predictTableReference = new List<PredictTableReference>();

		/// <summary>
		/// Predict clause, may be null.
		/// </summary>
		public IList<PredictTableReference> PredictTableReference
		{
			get { return _predictTableReference; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.TableReferences.Count; i < count; ++i)
			{
				this.TableReferences[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.PredictTableReference.Count; i < count; ++i)
			{
				this.PredictTableReference[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents PREDICT table reference
	/// </summary>
	[System.Serializable]
	public partial class PredictTableReference : TableReferenceWithAlias
	{


		private ScalarExpression _modelVariable;

		/// <summary>
		/// Model used to predict, if supplied as a literal or variable.
		/// </summary>
		public ScalarExpression ModelVariable
		{
			get { return _modelVariable; }
			set { UpdateTokenInfo(value); _modelVariable = value; }
		}
		private ScalarSubquery _modelSubquery;

		/// <summary>
		/// Model used to predict, if supplied as a scalar subquery.
		/// </summary>
		public ScalarSubquery ModelSubquery
		{
			get { return _modelSubquery; }
			set { UpdateTokenInfo(value); _modelSubquery = value; }
		}
		private TableReferenceWithAlias _dataSource;

		/// <summary>
		/// Data to predict on.
		/// </summary>
		public TableReferenceWithAlias DataSource
		{
			get { return _dataSource; }
			set { UpdateTokenInfo(value); _dataSource = value; }
		}
		private Identifier _runTime;

		/// <summary>
		/// Runtime ONNX for DW
		/// </summary>
		public Identifier RunTime
		{
			get { return _runTime; }
			set { _runTime = value; }
		}
		private List<SchemaDeclarationItem> _schemaDeclarationItems = new List<SchemaDeclarationItem>();

		/// <summary>
		/// 
		/// Rowset format - using schema declaration for Predict.
		/// 
		/// </summary>
		public IList<SchemaDeclarationItem> SchemaDeclarationItems
		{
			get { return _schemaDeclarationItems; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ModelVariable != null)
			{
				this.ModelVariable.Accept(visitor);
			}

			if (this.ModelSubquery != null)
			{
				this.ModelSubquery.Accept(visitor);
			}

			if (this.DataSource != null)
			{
				this.DataSource.Accept(visitor);
			}

			for (Int32 i = 0, count = this.SchemaDeclarationItems.Count; i < count; ++i)
			{
				this.SchemaDeclarationItems[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an element in the SELECT clause.
	/// </summary>
	[System.Serializable]
	public abstract partial class SelectElement : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The column element that is used right after the select keyword.
	/// </summary>
	[System.Serializable]
	public partial class SelectScalarExpression : SelectElement
	{


		private ScalarExpression _expression;

		/// <summary>
		/// 
		/// A select expression can be any expression, if this is non-null then this select expression is a regular expression
		/// At present this AST class expresses either an expression or a wildcard. Because a SelectExpressions
		/// can do so much more, we may want to go to a derivation approach, where this class would be a base -- or there
		/// may be another more elegant approach. For now, this is a basic design to support SELECT * FROM foo.
		/// 
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}
		private IdentifierOrValueExpression _columnName;

		/// <summary>
		/// This can be an Identifier or a literal of type AsciiStringLiteral or UnicodeStringLiteral. Optional, may be null.
		/// </summary>
		public IdentifierOrValueExpression ColumnName
		{
			get { return _columnName; }
			set { UpdateTokenInfo(value); _columnName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			if (this.ColumnName != null)
			{
				this.ColumnName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This represents a select * expression
	/// </summary>
	[System.Serializable]
	public partial class SelectStarExpression : SelectElement
	{


		private MultiPartIdentifier _qualifier;

		/// <summary>
		/// Table qualifier for the select *
		/// </summary>
		public MultiPartIdentifier Qualifier
		{
			get { return _qualifier; }
			set { UpdateTokenInfo(value); _qualifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Qualifier != null)
			{
				this.Qualifier.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class represents the setting a variable inside a select statement.
	/// </summary>
	[System.Serializable]
	public partial class SelectSetVariable : SelectElement
	{


		private VariableReference _variable;

		/// <summary>
		/// The variable that will be set.
		/// </summary>
		public VariableReference Variable
		{
			get { return _variable; }
			set { UpdateTokenInfo(value); _variable = value; }
		}
		private ScalarExpression _expression;

		/// <summary>
		/// Expression that is going to be used to set the variable.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}
		private AssignmentKind _assignmentKind;

		/// <summary>
		/// Assignment operator used.
		/// </summary>
		public AssignmentKind AssignmentKind
		{
			get { return _assignmentKind; }
			set { _assignmentKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Variable != null)
			{
				this.Variable.Accept(visitor);
			}

			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This is an abstract base class that represents table reference.
	/// </summary>
	[System.Serializable]
	public abstract partial class TableReference : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This represents a table reference that can have an alias.
	/// </summary>
	[System.Serializable]
	public abstract partial class TableReferenceWithAlias : TableReference
	{


		private Identifier _alias;

		/// <summary>
		/// Optional table alias. May be null.
		/// </summary>
		public Identifier Alias
		{
			get { return _alias; }
			set { UpdateTokenInfo(value); _alias = value; }
		}
		private bool _forPath;

		/// <summary>
		/// Whether this table reference is marked as graph FOR PATH.
		/// </summary>
		public bool ForPath
		{
			get { return _forPath; }
			set { _forPath = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Alias != null)
			{
				this.Alias.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a table reference that can specify column aliases.
	/// </summary>
	[System.Serializable]
	public abstract partial class TableReferenceWithAliasAndColumns : TableReferenceWithAlias
	{


		private List<Identifier> _columns = new List<Identifier>();

		/// <summary>
		/// Optional column aliases, may have zero elements.
		/// </summary>
		public IList<Identifier> Columns
		{
			get { return _columns; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents sub-dml with output clause which serves as table reference.
	/// </summary>
	[System.Serializable]
	public partial class DataModificationTableReference : TableReferenceWithAliasAndColumns
	{


		private DataModificationSpecification _dataModificationSpecification;

		/// <summary>
		/// Sub-DML specification
		/// </summary>
		public DataModificationSpecification DataModificationSpecification
		{
			get { return _dataModificationSpecification; }
			set { UpdateTokenInfo(value); _dataModificationSpecification = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.DataModificationSpecification != null)
			{
				this.DataModificationSpecification.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// CHANGETABLE clause with CHANGES option.
	/// </summary>
	[System.Serializable]
	public partial class ChangeTableChangesTableReference : TableReferenceWithAliasAndColumns
	{


		private SchemaObjectName _target;

		/// <summary>
		/// Table on which to obtain tracked changes.
		/// </summary>
		public SchemaObjectName Target
		{
			get { return _target; }
			set { UpdateTokenInfo(value); _target = value; }
		}
		private ValueExpression _sinceVersion;

		/// <summary>
		/// Specifies the point from which changes are required.
		/// </summary>
		public ValueExpression SinceVersion
		{
			get { return _sinceVersion; }
			set { UpdateTokenInfo(value); _sinceVersion = value; }
		}
		private bool _forceSeek;

		/// <summary>
		/// Optional parameter that forces a seek operation to be used to access the table_name
		/// </summary>
		public bool ForceSeek
		{
			get { return _forceSeek; }
			set { _forceSeek = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Target != null)
			{
				this.Target.Accept(visitor);
			}

			if (this.SinceVersion != null)
			{
				this.SinceVersion.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// CHANGETABLE clause with VERSION option.
	/// </summary>
	[System.Serializable]
	public partial class ChangeTableVersionTableReference : TableReferenceWithAliasAndColumns
	{


		private SchemaObjectName _target;

		/// <summary>
		/// Table on which to obtain tracked changes.
		/// </summary>
		public SchemaObjectName Target
		{
			get { return _target; }
			set { UpdateTokenInfo(value); _target = value; }
		}
		private List<Identifier> _primaryKeyColumns = new List<Identifier>();

		/// <summary>
		/// Primary key column names.
		/// </summary>
		public IList<Identifier> PrimaryKeyColumns
		{
			get { return _primaryKeyColumns; }
		}

		private List<ScalarExpression> _primaryKeyValues = new List<ScalarExpression>();

		/// <summary>
		/// Values for primary key columns.
		/// </summary>
		public IList<ScalarExpression> PrimaryKeyValues
		{
			get { return _primaryKeyValues; }
		}

		private bool _forceSeek;

		/// <summary>
		/// Optional parameter that forces a seek operation to be used to access the table_name
		/// </summary>
		public bool ForceSeek
		{
			get { return _forceSeek; }
			set { _forceSeek = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Target != null)
			{
				this.Target.Accept(visitor);
			}

			for (Int32 i = 0, count = this.PrimaryKeyColumns.Count; i < count; ++i)
			{
				this.PrimaryKeyColumns[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.PrimaryKeyValues.Count; i < count; ++i)
			{
				this.PrimaryKeyValues[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// A boolean expression that has three expressions as children.
	/// </summary>
	[System.Serializable]
	public partial class BooleanTernaryExpression : BooleanExpression
	{


		private BooleanTernaryExpressionType _ternaryExpressionType;

		/// <summary>
		/// The type of the expression.
		/// </summary>
		public BooleanTernaryExpressionType TernaryExpressionType
		{
			get { return _ternaryExpressionType; }
			set { _ternaryExpressionType = value; }
		}
		private ScalarExpression _firstExpression;

		/// <summary>
		/// The first child expression.
		/// </summary>
		public ScalarExpression FirstExpression
		{
			get { return _firstExpression; }
			set { UpdateTokenInfo(value); _firstExpression = value; }
		}
		private ScalarExpression _secondExpression;

		/// <summary>
		/// The second child expression.
		/// </summary>
		public ScalarExpression SecondExpression
		{
			get { return _secondExpression; }
			set { UpdateTokenInfo(value); _secondExpression = value; }
		}
		private ScalarExpression _thirdExpression;

		/// <summary>
		/// The third child expression.
		/// </summary>
		public ScalarExpression ThirdExpression
		{
			get { return _thirdExpression; }
			set { UpdateTokenInfo(value); _thirdExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.FirstExpression != null)
			{
				this.FirstExpression.Accept(visitor);
			}

			if (this.SecondExpression != null)
			{
				this.SecondExpression.Accept(visitor);
			}

			if (this.ThirdExpression != null)
			{
				this.ThirdExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class represents the top row filter, that can be used in select statement.
	/// </summary>
	[System.Serializable]
	public partial class TopRowFilter : TSqlFragment
	{


		private ScalarExpression _expression;

		/// <summary>
		/// The expression.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}
		private bool _percent;

		/// <summary>
		/// True if PERCENT keyword was used.
		/// </summary>
		public bool Percent
		{
			get { return _percent; }
			set { _percent = value; }
		}
		private bool _withTies;

		/// <summary>
		/// True is WITH TIES keywords were used. Important: The interpreter has to check there is an order by clause.
		/// </summary>
		public bool WithTies
		{
			get { return _withTies; }
			set { _withTies = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class represents an offset/fetch filter, that can be used in select statements for paging the result set.
	/// </summary>
	[System.Serializable]
	public partial class OffsetClause : TSqlFragment
	{


		private ScalarExpression _offsetExpression;

		/// <summary>
		/// Expression for number fo rows to skip.
		/// </summary>
		public ScalarExpression OffsetExpression
		{
			get { return _offsetExpression; }
			set { UpdateTokenInfo(value); _offsetExpression = value; }
		}
		private ScalarExpression _fetchExpression;

		/// <summary>
		/// Expression for number fo rows to return.
		/// </summary>
		public ScalarExpression FetchExpression
		{
			get { return _fetchExpression; }
			set { UpdateTokenInfo(value); _fetchExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OffsetExpression != null)
			{
				this.OffsetExpression.Accept(visitor);
			}

			if (this.FetchExpression != null)
			{
				this.FetchExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// An expression that has a single expression as child.
	/// </summary>
	[System.Serializable]
	public partial class UnaryExpression : ScalarExpression
	{


		private UnaryExpressionType _unaryExpressionType;

		/// <summary>
		/// The type of the expression.
		/// </summary>
		public UnaryExpressionType UnaryExpressionType
		{
			get { return _unaryExpressionType; }
			set { _unaryExpressionType = value; }
		}
		private ScalarExpression _expression;

		/// <summary>
		/// The child expression.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// This class represents the union that is used in a select statement.
	/// </summary>
	[System.Serializable]
	public partial class BinaryQueryExpression : QueryExpression
	{


		private BinaryQueryExpressionType _binaryQueryExpressionType;

		/// <summary>
		/// The type of the expression.
		/// </summary>
		public BinaryQueryExpressionType BinaryQueryExpressionType
		{
			get { return _binaryQueryExpressionType; }
			set { _binaryQueryExpressionType = value; }
		}
		private bool _all;

		/// <summary>
		/// True if ALL keyword is used.
		/// </summary>
		public bool All
		{
			get { return _all; }
			set { _all = value; }
		}
		private QueryExpression _firstQueryExpression;

		/// <summary>
		/// First query expression.
		/// </summary>
		public QueryExpression FirstQueryExpression
		{
			get { return _firstQueryExpression; }
			set { UpdateTokenInfo(value); _firstQueryExpression = value; }
		}
		private QueryExpression _secondQueryExpression;

		/// <summary>
		/// Second query expression.
		/// </summary>
		public QueryExpression SecondQueryExpression
		{
			get { return _secondQueryExpression; }
			set { UpdateTokenInfo(value); _secondQueryExpression = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.FirstQueryExpression != null)
			{
				this.FirstQueryExpression.Accept(visitor);
			}

			if (this.SecondQueryExpression != null)
			{
				this.SecondQueryExpression.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// This class represents a table reference which is a variable.
	/// </summary>
	[System.Serializable]
	public partial class VariableTableReference : TableReferenceWithAlias
	{


		private VariableReference _variable;

		/// <summary>
		/// The name of the variable.
		/// </summary>
		public VariableReference Variable
		{
			get { return _variable; }
			set { UpdateTokenInfo(value); _variable = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Variable != null)
			{
				this.Variable.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a table reference that is a method call on a variable reference
	/// </summary>
	[System.Serializable]
	public partial class VariableMethodCallTableReference : TableReferenceWithAliasAndColumns
	{


		private VariableReference _variable;

		/// <summary>
		/// The name of the variable.
		/// </summary>
		public VariableReference Variable
		{
			get { return _variable; }
			set { UpdateTokenInfo(value); _variable = value; }
		}
		private Identifier _methodName;

		/// <summary>
		/// Name of the method being called.
		/// </summary>
		public Identifier MethodName
		{
			get { return _methodName; }
			set { UpdateTokenInfo(value); _methodName = value; }
		}
		private List<ScalarExpression> _parameters = new List<ScalarExpression>();

		/// <summary>
		/// The parameters to the method.
		/// </summary>
		public IList<ScalarExpression> Parameters
		{
			get { return _parameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Variable != null)
			{
				this.Variable.Accept(visitor);
			}

			if (this.MethodName != null)
			{
				this.MethodName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Parameters.Count; i < count; ++i)
			{
				this.Parameters[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP PARTITION FUNCTION statement.
	/// </summary>
	[System.Serializable]
	public partial class DropPartitionFunctionStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP PARTITION SCHEME statement.
	/// </summary>
	[System.Serializable]
	public partial class DropPartitionSchemeStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP SYNONYM statement
	/// </summary>
	[System.Serializable]
	public partial class DropSynonymStatement : DropObjectsStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP AGGREGATE statement
	/// </summary>
	[System.Serializable]
	public partial class DropAggregateStatement : DropObjectsStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP ASSEMBLY statement
	/// </summary>
	[System.Serializable]
	public partial class DropAssemblyStatement : DropObjectsStatement
	{


		private bool _withNoDependents;

		/// <summary>
		/// True if WITH NO DEPENDENTS is defined.
		/// </summary>
		public bool WithNoDependents
		{
			get { return _withNoDependents; }
			set { _withNoDependents = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP APPLICATION ROLE statement.
	/// </summary>
	[System.Serializable]
	public partial class DropApplicationRoleStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP FULLTEXT CATALOG statement.
	/// </summary>
	[System.Serializable]
	public partial class DropFullTextCatalogStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP FULLTEXT INDEX statement.
	/// </summary>
	[System.Serializable]
	public partial class DropFullTextIndexStatement : TSqlStatement
	{


		private SchemaObjectName _tableName;

		/// <summary>
		/// The name of the table with fulltext index.
		/// </summary>
		public SchemaObjectName TableName
		{
			get { return _tableName; }
			set { UpdateTokenInfo(value); _tableName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.TableName != null)
			{
				this.TableName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP LOGIN statement.
	/// </summary>
	[System.Serializable]
	public partial class DropLoginStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP ROLE statement.
	/// </summary>
	[System.Serializable]
	public partial class DropRoleStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP TYPE statement.
	/// </summary>
	[System.Serializable]
	public partial class DropTypeStatement : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The name of the type.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private bool _isIfExists;

		/// <summary>
		/// True when IF EXISTS construct is used.
		/// </summary>
		public bool IsIfExists
		{
			get { return _isIfExists; }
			set { _isIfExists = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP USER statement.
	/// </summary>
	[System.Serializable]
	public partial class DropUserStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP MASTER KEY statement.
	/// </summary>
	[System.Serializable]
	public partial class DropMasterKeyStatement : TSqlStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP SYMMETRIC KEY statement.
	/// </summary>
	[System.Serializable]
	public partial class DropSymmetricKeyStatement : DropUnownedObjectStatement
	{


		private bool _removeProviderKey;

		/// <summary>
		/// True if DROP PROVIDER KEY clause was specified.
		/// </summary>
		public bool RemoveProviderKey
		{
			get { return _removeProviderKey; }
			set { _removeProviderKey = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP ASYMMETRIC KEY statement.
	/// </summary>
	[System.Serializable]
	public partial class DropAsymmetricKeyStatement : DropUnownedObjectStatement
	{


		private bool _removeProviderKey;

		/// <summary>
		/// True if DROP PROVIDER KEY clause was specified.
		/// </summary>
		public bool RemoveProviderKey
		{
			get { return _removeProviderKey; }
			set { _removeProviderKey = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP CERTIFICATE statement.
	/// </summary>
	[System.Serializable]
	public partial class DropCertificateStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP CREDENTIAL statement.
	/// </summary>
	[System.Serializable]
	public partial class DropCredentialStatement : DropUnownedObjectStatement
	{


		private bool _isDatabaseScoped;

		/// <summary>
		/// Whether the credential is database scoped or not.
		/// </summary>
		public bool IsDatabaseScoped
		{
			get { return _isDatabaseScoped; }
			set { _isDatabaseScoped = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER PARTITION FUNCTION statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterPartitionFunctionStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the function to alter.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private bool _isSplit;

		/// <summary>
		/// True if splitting range, false if merging ranges.
		/// </summary>
		public bool IsSplit
		{
			get { return _isSplit; }
			set { _isSplit = value; }
		}
		private ScalarExpression _boundary;

		/// <summary>
		/// Optional boundary value.
		/// </summary>
		public ScalarExpression Boundary
		{
			get { return _boundary; }
			set { UpdateTokenInfo(value); _boundary = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Boundary != null)
			{
				this.Boundary.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER PARTITION SCHEME statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterPartitionSchemeStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the partition scheme to alter.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private IdentifierOrValueExpression _fileGroup;

		/// <summary>
		/// Optional filegroup name. Can be either Identifier or string Literal
		/// </summary>
		public IdentifierOrValueExpression FileGroup
		{
			get { return _fileGroup; }
			set { UpdateTokenInfo(value); _fileGroup = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.FileGroup != null)
			{
				this.FileGroup.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER FULLTEXT INDEX statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterFullTextIndexStatement : TSqlStatement
	{


		private SchemaObjectName _onName;

		/// <summary>
		/// The name of the table to alter index on.
		/// </summary>
		public SchemaObjectName OnName
		{
			get { return _onName; }
			set { UpdateTokenInfo(value); _onName = value; }
		}
		private AlterFullTextIndexAction _action;

		/// <summary>
		/// How index is altered
		/// </summary>
		public AlterFullTextIndexAction Action
		{
			get { return _action; }
			set { UpdateTokenInfo(value); _action = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OnName != null)
			{
				this.OnName.Accept(visitor);
			}

			if (this.Action != null)
			{
				this.Action.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents altering action for ALTER FULLTEXT INDEX statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class AlterFullTextIndexAction : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents flag action for ALTER FULLTEXT INDEX statement.
	/// </summary>
	[System.Serializable]
	public partial class SimpleAlterFullTextIndexAction : AlterFullTextIndexAction
	{


		private SimpleAlterFullTextIndexActionKind _actionKind;

		/// <summary>
		/// Actual action
		/// </summary>
		public SimpleAlterFullTextIndexActionKind ActionKind
		{
			get { return _actionKind; }
			set { _actionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents STOPLIST action for ALTER FULLTEXT INDEX statement.
	/// </summary>
	[System.Serializable]
	public partial class SetStopListAlterFullTextIndexAction : AlterFullTextIndexAction
	{


		private StopListFullTextIndexOption _stopListOption;

		/// <summary>
		/// STOPLIST option.
		/// </summary>
		public StopListFullTextIndexOption StopListOption
		{
			get { return _stopListOption; }
			set { UpdateTokenInfo(value); _stopListOption = value; }
		}
		private bool _withNoPopulation;

		/// <summary>
		/// True if with no population was specified, false otherwise
		/// </summary>
		public bool WithNoPopulation
		{
			get { return _withNoPopulation; }
			set { _withNoPopulation = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.StopListOption != null)
			{
				this.StopListOption.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SEARCH PROPERTY LIST action for ALTER FULLTEXT INDEX statement
	/// </summary>
	[System.Serializable]
	public partial class SetSearchPropertyListAlterFullTextIndexAction : AlterFullTextIndexAction
	{


		private SearchPropertyListFullTextIndexOption _searchPropertyListOption;

		/// <summary>
		/// SEARCH PROPERTY LIST option
		/// </summary>
		public SearchPropertyListFullTextIndexOption SearchPropertyListOption
		{
			get { return _searchPropertyListOption; }
			set { UpdateTokenInfo(value); _searchPropertyListOption = value; }
		}
		private bool _withNoPopulation;

		/// <summary>
		/// True if NO POPULATION was specified
		/// </summary>
		public bool WithNoPopulation
		{
			get { return _withNoPopulation; }
			set { _withNoPopulation = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SearchPropertyListOption != null)
			{
				this.SearchPropertyListOption.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP action for ALTER FULLTEXT INDEX statement.
	/// </summary>
	[System.Serializable]
	public partial class DropAlterFullTextIndexAction : AlterFullTextIndexAction
	{


		private List<Identifier> _columns = new List<Identifier>();

		/// <summary>
		/// Column names to drop
		/// </summary>
		public IList<Identifier> Columns
		{
			get { return _columns; }
		}

		private bool _withNoPopulation;

		/// <summary>
		/// True if with no population was specified, false otherwise
		/// </summary>
		public bool WithNoPopulation
		{
			get { return _withNoPopulation; }
			set { _withNoPopulation = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ADD action for ALTER FULLTEXT INDEX statement.
	/// </summary>
	[System.Serializable]
	public partial class AddAlterFullTextIndexAction : AlterFullTextIndexAction
	{


		private List<FullTextIndexColumn> _columns = new List<FullTextIndexColumn>();

		/// <summary>
		/// Columns to add
		/// </summary>
		public IList<FullTextIndexColumn> Columns
		{
			get { return _columns; }
		}

		private bool _withNoPopulation;

		/// <summary>
		/// True if with no population was specified, false otherwise
		/// </summary>
		public bool WithNoPopulation
		{
			get { return _withNoPopulation; }
			set { _withNoPopulation = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER COLUMN action for ALTER FULLTEXT INDEX statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterColumnAlterFullTextIndexAction : AlterFullTextIndexAction
	{


		private FullTextIndexColumn _column;

		/// <summary>
		/// The column to be altered
		/// </summary>
		public FullTextIndexColumn Column
		{
			get { return _column; }
			set { UpdateTokenInfo(value); _column = value; }
		}
		private bool _withNoPopulation;

		/// <summary>
		/// True if with no population was specified, false otherwise
		/// </summary>
		public bool WithNoPopulation
		{
			get { return _withNoPopulation; }
			set { _withNoPopulation = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Column != null)
			{
				this.Column.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE SEARCH PROPERTY LIST statement
	/// </summary>
	[System.Serializable]
	public partial class CreateSearchPropertyListStatement : TSqlStatement, IAuthorization
	{


		private Identifier _name;

		/// <summary>
		/// Search Property List Name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private MultiPartIdentifier _sourceSearchPropertyList;

		/// <summary>
		/// Optional database qualified name of the source search property list
		/// </summary>
		public MultiPartIdentifier SourceSearchPropertyList
		{
			get { return _sourceSearchPropertyList; }
			set { UpdateTokenInfo(value); _sourceSearchPropertyList = value; }
		}
		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.SourceSearchPropertyList != null)
			{
				this.SourceSearchPropertyList.Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER SEARCH PROPERTY LIST statement
	/// </summary>
	[System.Serializable]
	public partial class AlterSearchPropertyListStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Search Property List name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private SearchPropertyListAction _action;

		/// <summary>
		/// The alter search property list action
		/// </summary>
		public SearchPropertyListAction Action
		{
			get { return _action; }
			set { UpdateTokenInfo(value); _action = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Action != null)
			{
				this.Action.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for search property list actions.
	/// </summary>
	[System.Serializable]
	public abstract partial class SearchPropertyListAction : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The ADD search property list action.
	/// </summary>
	[System.Serializable]
	public partial class AddSearchPropertyListAction : SearchPropertyListAction
	{


		private StringLiteral _propertyName;

		/// <summary>
		/// Property name
		/// </summary>
		public StringLiteral PropertyName
		{
			get { return _propertyName; }
			set { UpdateTokenInfo(value); _propertyName = value; }
		}
		private StringLiteral _guid;

		/// <summary>
		/// The Property Set guid
		/// </summary>
		public StringLiteral Guid
		{
			get { return _guid; }
			set { UpdateTokenInfo(value); _guid = value; }
		}
		private IntegerLiteral _id;

		/// <summary>
		/// The Property Int id
		/// </summary>
		public IntegerLiteral Id
		{
			get { return _id; }
			set { UpdateTokenInfo(value); _id = value; }
		}
		private StringLiteral _description;

		/// <summary>
		/// Optional property description
		/// </summary>
		public StringLiteral Description
		{
			get { return _description; }
			set { UpdateTokenInfo(value); _description = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.PropertyName != null)
			{
				this.PropertyName.Accept(visitor);
			}

			if (this.Guid != null)
			{
				this.Guid.Accept(visitor);
			}

			if (this.Id != null)
			{
				this.Id.Accept(visitor);
			}

			if (this.Description != null)
			{
				this.Description.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// The DROP search property list action
	/// </summary>
	[System.Serializable]
	public partial class DropSearchPropertyListAction : SearchPropertyListAction
	{


		private StringLiteral _propertyName;

		/// <summary>
		/// Property Name
		/// </summary>
		public StringLiteral PropertyName
		{
			get { return _propertyName; }
			set { UpdateTokenInfo(value); _propertyName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.PropertyName != null)
			{
				this.PropertyName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP SEARCH PROPERTY LIST statement
	/// </summary>
	[System.Serializable]
	public partial class DropSearchPropertyListStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents CREATE LOGIN statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateLoginStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Login name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private CreateLoginSource _source;

		/// <summary>
		/// All other login creation details
		/// </summary>
		public CreateLoginSource Source
		{
			get { return _source; }
			set { UpdateTokenInfo(value); _source = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Source != null)
			{
				this.Source.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for different login sources in CREATE LOGIN statement
	/// </summary>
	[System.Serializable]
	public abstract partial class CreateLoginSource : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Password case in CREATE LOGIN statement
	/// </summary>
	[System.Serializable]
	public partial class PasswordCreateLoginSource : CreateLoginSource
	{


		private Literal _password;

		/// <summary>
		/// Can be either binary or string
		/// </summary>
		public Literal Password
		{
			get { return _password; }
			set { UpdateTokenInfo(value); _password = value; }
		}
		private bool _hashed;

		/// <summary>
		/// True if HASHED option was specified
		/// </summary>
		public bool Hashed
		{
			get { return _hashed; }
			set { _hashed = value; }
		}
		private bool _mustChange;

		/// <summary>
		/// True if MUST_CHANGE option was specified
		/// </summary>
		public bool MustChange
		{
			get { return _mustChange; }
			set { _mustChange = value; }
		}
		private List<PrincipalOption> _options = new List<PrincipalOption>();

		/// <summary>
		/// Other options (security, sid, default db and lang)
		/// </summary>
		public IList<PrincipalOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Password != null)
			{
				this.Password.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Single option in CREATE or ALTER LOGIN or USER statement
	/// </summary>
	[System.Serializable]
	public partial class PrincipalOption : TSqlFragment
	{


		private PrincipalOptionKind _optionKind;

		/// <summary>
		/// Option kind
		/// </summary>
		public PrincipalOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Security option in CREATE or ALTER LOGIN or USER statement
	/// </summary>
	[System.Serializable]
	public partial class OnOffPrincipalOption : PrincipalOption
	{


		private OptionState _optionState;

		/// <summary>
		/// Option state
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Literal option in CREATE/ALTER LOGIN/USER statement
	/// </summary>
	[System.Serializable]
	public partial class LiteralPrincipalOption : PrincipalOption
	{


		private Literal _value;

		/// <summary>
		/// Option Value
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Options with identifier value in CREATE or ALTER LOGIN or USER statement
	/// </summary>
	[System.Serializable]
	public partial class IdentifierPrincipalOption : PrincipalOption
	{


		private Identifier _identifier;

		/// <summary>
		/// Option value
		/// </summary>
		public Identifier Identifier
		{
			get { return _identifier; }
			set { UpdateTokenInfo(value); _identifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Identifier != null)
			{
				this.Identifier.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Windows case in CREATE LOGIN statement
	/// </summary>
	[System.Serializable]
	public partial class WindowsCreateLoginSource : CreateLoginSource
	{


		private List<PrincipalOption> _options = new List<PrincipalOption>();

		/// <summary>
		/// Windows create login options
		/// </summary>
		public IList<PrincipalOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// External case in CREATE LOGIN statement
	/// </summary>
	[System.Serializable]
	public partial class ExternalCreateLoginSource : CreateLoginSource
	{


		private List<PrincipalOption> _options = new List<PrincipalOption>();

		/// <summary>
		/// External create login options
		/// </summary>
		public IList<PrincipalOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Certificate case in CREATE LOGIN statement
	/// </summary>
	[System.Serializable]
	public partial class CertificateCreateLoginSource : CreateLoginSource
	{


		private Identifier _certificate;

		/// <summary>
		/// Certificate name
		/// </summary>
		public Identifier Certificate
		{
			get { return _certificate; }
			set { UpdateTokenInfo(value); _certificate = value; }
		}
		private Identifier _credential;

		/// <summary>
		/// Optional credential name
		/// </summary>
		public Identifier Credential
		{
			get { return _credential; }
			set { UpdateTokenInfo(value); _credential = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Certificate != null)
			{
				this.Certificate.Accept(visitor);
			}

			if (this.Credential != null)
			{
				this.Credential.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Certificate case in CREATE LOGIN statement
	/// </summary>
	[System.Serializable]
	public partial class AsymmetricKeyCreateLoginSource : CreateLoginSource
	{


		private Identifier _key;

		/// <summary>
		/// Key name
		/// </summary>
		public Identifier Key
		{
			get { return _key; }
			set { UpdateTokenInfo(value); _key = value; }
		}
		private Identifier _credential;

		/// <summary>
		/// Optional credential name
		/// </summary>
		public Identifier Credential
		{
			get { return _credential; }
			set { UpdateTokenInfo(value); _credential = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Key != null)
			{
				this.Key.Accept(visitor);
			}

			if (this.Credential != null)
			{
				this.Credential.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// PASSWORD option in ALTER LOGIN statement
	/// </summary>
	[System.Serializable]
	public partial class PasswordAlterPrincipalOption : PrincipalOption
	{


		private Literal _password;

		/// <summary>
		/// Password for login being changed
		/// </summary>
		public Literal Password
		{
			get { return _password; }
			set { UpdateTokenInfo(value); _password = value; }
		}
		private Literal _oldPassword;

		/// <summary>
		/// Old password to which new password would be assigned (optional)
		/// </summary>
		public Literal OldPassword
		{
			get { return _oldPassword; }
			set { UpdateTokenInfo(value); _oldPassword = value; }
		}
		private bool _mustChange;

		/// <summary>
		/// True if MUST_CHANGE was specified
		/// </summary>
		public bool MustChange
		{
			get { return _mustChange; }
			set { _mustChange = value; }
		}
		private bool _unlock;

		/// <summary>
		/// True if UNLOCK was specified
		/// </summary>
		public bool Unlock
		{
			get { return _unlock; }
			set { _unlock = value; }
		}
		private bool _hashed;

		/// <summary>
		/// True if HASHED was specified
		/// </summary>
		public bool Hashed
		{
			get { return _hashed; }
			set { _hashed = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Password != null)
			{
				this.Password.Accept(visitor);
			}

			if (this.OldPassword != null)
			{
				this.OldPassword.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ALTER LOGIN statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class AlterLoginStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Login name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER LOGIN which alters options.
	/// </summary>
	[System.Serializable]
	public partial class AlterLoginOptionsStatement : AlterLoginStatement
	{


		private List<PrincipalOption> _options = new List<PrincipalOption>();

		/// <summary>
		/// Login options
		/// </summary>
		public IList<PrincipalOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ALTER LOGIN which enables or disables login.
	/// </summary>
	[System.Serializable]
	public partial class AlterLoginEnableDisableStatement : AlterLoginStatement
	{


		private bool _isEnable;

		/// <summary>
		/// True if ENABLE was specified, false otherwise.
		/// </summary>
		public bool IsEnable
		{
			get { return _isEnable; }
			set { _isEnable = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER LOGIN which adds or drops credential name.
	/// </summary>
	[System.Serializable]
	public partial class AlterLoginAddDropCredentialStatement : AlterLoginStatement
	{


		private bool _isAdd;

		/// <summary>
		/// True if ADD CREDENTIAL was specified, false otherwise.
		/// </summary>
		public bool IsAdd
		{
			get { return _isAdd; }
			set { _isAdd = value; }
		}
		private Identifier _credentialName;

		/// <summary>
		/// EKM provider credential to add to or drop from login.
		/// </summary>
		public Identifier CredentialName
		{
			get { return _credentialName; }
			set { UpdateTokenInfo(value); _credentialName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.CredentialName != null)
			{
				this.CredentialName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents REVERT statement
	/// </summary>
	[System.Serializable]
	public partial class RevertStatement : TSqlStatement
	{


		private ScalarExpression _cookie;

		/// <summary>
		/// Optional cookie expression
		/// </summary>
		public ScalarExpression Cookie
		{
			get { return _cookie; }
			set { UpdateTokenInfo(value); _cookie = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Cookie != null)
			{
				this.Cookie.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP CONTRACT statement.
	/// </summary>
	[System.Serializable]
	public partial class DropContractStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP ENDPOINT statement.
	/// </summary>
	[System.Serializable]
	public partial class DropEndpointStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP MESSAGE TYPE statement.
	/// </summary>
	[System.Serializable]
	public partial class DropMessageTypeStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP QUEUE statement.
	/// </summary>
	[System.Serializable]
	public partial class DropQueueStatement : TSqlStatement
	{


		private SchemaObjectName _name;

		/// <summary>
		/// The name of the queue.
		/// </summary>
		public SchemaObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP REMOTE SERVICE BINDING statement.
	/// </summary>
	[System.Serializable]
	public partial class DropRemoteServiceBindingStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP ROUTE statement.
	/// </summary>
	[System.Serializable]
	public partial class DropRouteStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP SERVICE statement.
	/// </summary>
	[System.Serializable]
	public partial class DropServiceStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents common base for ADD and DROP SIGNATURE statements.
	/// </summary>
	[System.Serializable]
	public abstract partial class SignatureStatementBase : TSqlStatement
	{


		private bool _isCounter;

		/// <summary>
		/// True if adding/dropping counter signature, false otherwise
		/// </summary>
		public bool IsCounter
		{
			get { return _isCounter; }
			set { _isCounter = value; }
		}
		private SignableElementKind _elementKind;

		/// <summary>
		/// Signable element kind
		/// </summary>
		public SignableElementKind ElementKind
		{
			get { return _elementKind; }
			set { _elementKind = value; }
		}
		private SchemaObjectName _element;

		/// <summary>
		/// Signable element reference
		/// </summary>
		public SchemaObjectName Element
		{
			get { return _element; }
			set { UpdateTokenInfo(value); _element = value; }
		}
		private List<CryptoMechanism> _cryptos = new List<CryptoMechanism>();

		/// <summary>
		/// Encryption mechanisms
		/// </summary>
		public IList<CryptoMechanism> Cryptos
		{
			get { return _cryptos; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Element != null)
			{
				this.Element.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Cryptos.Count; i < count; ++i)
			{
				this.Cryptos[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ADD SIGNATURE statements.
	/// </summary>
	[System.Serializable]
	public partial class AddSignatureStatement : SignatureStatementBase
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP SIGNATURE statements.
	/// </summary>
	[System.Serializable]
	public partial class DropSignatureStatement : SignatureStatementBase
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP EVENT NOTIFICATION statement.
	/// </summary>
	[System.Serializable]
	public partial class DropEventNotificationStatement : TSqlStatement
	{


		private List<Identifier> _notifications = new List<Identifier>();

		/// <summary>
		/// Names of event notification to be dropped.
		/// </summary>
		public IList<Identifier> Notifications
		{
			get { return _notifications; }
		}

		private EventNotificationObjectScope _scope;

		/// <summary>
		/// The scope for event notification.
		/// </summary>
		public EventNotificationObjectScope Scope
		{
			get { return _scope; }
			set { UpdateTokenInfo(value); _scope = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Notifications.Count; i < count; ++i)
			{
				this.Notifications[i].Accept(visitor);
			}

			if (this.Scope != null)
			{
				this.Scope.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents EXECUTE AS statement
	/// </summary>
	[System.Serializable]
	public partial class ExecuteAsStatement : TSqlStatement
	{


		private bool _withNoRevert;

		/// <summary>
		/// True if NO REVERT option was specified, false otherwise
		/// </summary>
		public bool WithNoRevert
		{
			get { return _withNoRevert; }
			set { _withNoRevert = value; }
		}
		private VariableReference _cookie;

		/// <summary>
		/// Cookie variable (if WITH COOKIE option was used)
		/// </summary>
		public VariableReference Cookie
		{
			get { return _cookie; }
			set { UpdateTokenInfo(value); _cookie = value; }
		}
		private ExecuteContext _executeContext;

		/// <summary>
		/// Execute context
		/// </summary>
		public ExecuteContext ExecuteContext
		{
			get { return _executeContext; }
			set { UpdateTokenInfo(value); _executeContext = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Cookie != null)
			{
				this.Cookie.Accept(visitor);
			}

			if (this.ExecuteContext != null)
			{
				this.ExecuteContext.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents END CONVERSATION statement
	/// </summary>
	[System.Serializable]
	public partial class EndConversationStatement : TSqlStatement
	{


		private ScalarExpression _conversation;

		/// <summary>
		/// Conversation handle
		/// </summary>
		public ScalarExpression Conversation
		{
			get { return _conversation; }
			set { UpdateTokenInfo(value); _conversation = value; }
		}
		private bool _withCleanup;

		/// <summary>
		/// True if WITH CLEANUP option was specified, false otherwise
		/// </summary>
		public bool WithCleanup
		{
			get { return _withCleanup; }
			set { _withCleanup = value; }
		}
		private ValueExpression _errorCode;

		/// <summary>
		/// Error code (integer or variable) - if WITH ERROR clause was specified
		/// </summary>
		public ValueExpression ErrorCode
		{
			get { return _errorCode; }
			set { UpdateTokenInfo(value); _errorCode = value; }
		}
		private ValueExpression _errorDescription;

		/// <summary>
		/// Error description (string or variable) - if WITH ERROR clause was specified
		/// </summary>
		public ValueExpression ErrorDescription
		{
			get { return _errorDescription; }
			set { UpdateTokenInfo(value); _errorDescription = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Conversation != null)
			{
				this.Conversation.Accept(visitor);
			}

			if (this.ErrorCode != null)
			{
				this.ErrorCode.Accept(visitor);
			}

			if (this.ErrorDescription != null)
			{
				this.ErrorDescription.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents MOVE CONVERSATION statement
	/// </summary>
	[System.Serializable]
	public partial class MoveConversationStatement : TSqlStatement
	{


		private ScalarExpression _conversation;

		/// <summary>
		/// Conversation handle
		/// </summary>
		public ScalarExpression Conversation
		{
			get { return _conversation; }
			set { UpdateTokenInfo(value); _conversation = value; }
		}
		private ScalarExpression _group;

		/// <summary>
		/// Group to move conversation to
		/// </summary>
		public ScalarExpression Group
		{
			get { return _group; }
			set { UpdateTokenInfo(value); _group = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Conversation != null)
			{
				this.Conversation.Accept(visitor);
			}

			if (this.Group != null)
			{
				this.Group.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents GET CONVERSATION GROUP statement
	/// </summary>
	[System.Serializable]
	public partial class GetConversationGroupStatement : WaitForSupportedStatement
	{


		private VariableReference _groupId;

		/// <summary>
		/// Conversation group id (variable)
		/// </summary>
		public VariableReference GroupId
		{
			get { return _groupId; }
			set { UpdateTokenInfo(value); _groupId = value; }
		}
		private SchemaObjectName _queue;

		/// <summary>
		/// Is the name of the queue to get the conversation group from.
		/// </summary>
		public SchemaObjectName Queue
		{
			get { return _queue; }
			set { UpdateTokenInfo(value); _queue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.GroupId != null)
			{
				this.GroupId.Accept(visitor);
			}

			if (this.Queue != null)
			{
				this.Queue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents RECEIVE statement
	/// </summary>
	[System.Serializable]
	public partial class ReceiveStatement : WaitForSupportedStatement
	{


		private ScalarExpression _top;

		/// <summary>
		/// Optional number of messages to return
		/// </summary>
		public ScalarExpression Top
		{
			get { return _top; }
			set { UpdateTokenInfo(value); _top = value; }
		}
		private List<SelectElement> _selectElements = new List<SelectElement>();

		/// <summary>
		/// These are the selected columns, or set variables, the strong types of objects that can be here are SelectColumn, SelectSetVariable.
		/// </summary>
		public IList<SelectElement> SelectElements
		{
			get { return _selectElements; }
		}

		private SchemaObjectName _queue;

		/// <summary>
		/// The name of the queue to receive messages from.
		/// </summary>
		public SchemaObjectName Queue
		{
			get { return _queue; }
			set { UpdateTokenInfo(value); _queue = value; }
		}
		private VariableTableReference _into;

		/// <summary>
		/// Specifies the table to select into the columns from received messages, optional
		/// </summary>
		public VariableTableReference Into
		{
			get { return _into; }
			set { UpdateTokenInfo(value); _into = value; }
		}
		private ValueExpression _where;

		/// <summary>
		/// Specifies the conversation or conversation group for received messages, optional
		/// </summary>
		public ValueExpression Where
		{
			get { return _where; }
			set { UpdateTokenInfo(value); _where = value; }
		}
		private bool _isConversationGroupIdWhere;

		/// <summary>
		/// True if conversation group id was specified in where clause, false otherwise. Meaningless if Where is null.
		/// </summary>
		public bool IsConversationGroupIdWhere
		{
			get { return _isConversationGroupIdWhere; }
			set { _isConversationGroupIdWhere = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Top != null)
			{
				this.Top.Accept(visitor);
			}

			for (Int32 i = 0, count = this.SelectElements.Count; i < count; ++i)
			{
				this.SelectElements[i].Accept(visitor);
			}

			if (this.Queue != null)
			{
				this.Queue.Accept(visitor);
			}

			if (this.Into != null)
			{
				this.Into.Accept(visitor);
			}

			if (this.Where != null)
			{
				this.Where.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents SEND statement
	/// </summary>
	[System.Serializable]
	public partial class SendStatement : TSqlStatement
	{


		private List<ScalarExpression> _conversationHandles = new List<ScalarExpression>();

		/// <summary>
		/// Conversation handles
		/// </summary>
		public IList<ScalarExpression> ConversationHandles
		{
			get { return _conversationHandles; }
		}

		private IdentifierOrValueExpression _messageTypeName;

		/// <summary>
		/// Optional message type of the sent message. Can be either Identifier, VariableReference, or Literal
		/// </summary>
		public IdentifierOrValueExpression MessageTypeName
		{
			get { return _messageTypeName; }
			set { UpdateTokenInfo(value); _messageTypeName = value; }
		}
		private ScalarExpression _messageBody;

		/// <summary>
		/// Optional expression representing the message body
		/// </summary>
		public ScalarExpression MessageBody
		{
			get { return _messageBody; }
			set { UpdateTokenInfo(value); _messageBody = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.ConversationHandles.Count; i < count; ++i)
			{
				this.ConversationHandles[i].Accept(visitor);
			}

			if (this.MessageTypeName != null)
			{
				this.MessageTypeName.Accept(visitor);
			}

			if (this.MessageBody != null)
			{
				this.MessageBody.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for statements inside WAITFOR statement
	/// </summary>
	[System.Serializable]
	public abstract partial class WaitForSupportedStatement : TSqlStatement
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER SCHEMA statement
	/// </summary>
	[System.Serializable]
	public partial class AlterSchemaStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Is the name of a schema in the current database, into which the object will be moved.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private SchemaObjectName _objectName;

		/// <summary>
		/// Is the one-part or two-part name of a schema-contained object to be moved into the schema.
		/// </summary>
		public SchemaObjectName ObjectName
		{
			get { return _objectName; }
			set { UpdateTokenInfo(value); _objectName = value; }
		}
		private SecurityObjectKind _objectKind;

		/// <summary>
		/// Object kind
		/// </summary>
		public SecurityObjectKind ObjectKind
		{
			get { return _objectKind; }
			set { _objectKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.ObjectName != null)
			{
				this.ObjectName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER ASYMMETRIC KEY statement
	/// </summary>
	[System.Serializable]
	public partial class AlterAsymmetricKeyStatement : TSqlStatement, IPasswordChangeOption
	{


		private Identifier _name;

		/// <summary>
		/// Key name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private Literal _attestedBy;

		/// <summary>
		/// String literal in case of ATTESTED BY option
		/// </summary>
		public Literal AttestedBy
		{
			get { return _attestedBy; }
			set { UpdateTokenInfo(value); _attestedBy = value; }
		}
		private AlterCertificateStatementKind _kind;

		/// <summary>
		/// Specifies exectly how asymmetric key was altered. WithActiveForBeginDialog option is not valid.
		/// </summary>
		public AlterCertificateStatementKind Kind
		{
			get { return _kind; }
			set { _kind = value; }
		}
		private Literal _encryptionPassword;

		/// <summary>
		/// Optional private key encryption password
		/// </summary>
		public Literal EncryptionPassword
		{
			get { return _encryptionPassword; }
			set { UpdateTokenInfo(value); _encryptionPassword = value; }
		}
		private Literal _decryptionPassword;

		/// <summary>
		/// Optional private key decryption password
		/// </summary>
		public Literal DecryptionPassword
		{
			get { return _decryptionPassword; }
			set { UpdateTokenInfo(value); _decryptionPassword = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.AttestedBy != null)
			{
				this.AttestedBy.Accept(visitor);
			}

			if (this.EncryptionPassword != null)
			{
				this.EncryptionPassword.Accept(visitor);
			}

			if (this.DecryptionPassword != null)
			{
				this.DecryptionPassword.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER SERVICE MASTER KEY statement
	/// </summary>
	[System.Serializable]
	public partial class AlterServiceMasterKeyStatement : TSqlStatement
	{


		private Literal _account;

		/// <summary>
		/// Account name in case of recover option (optional string)
		/// </summary>
		public Literal Account
		{
			get { return _account; }
			set { UpdateTokenInfo(value); _account = value; }
		}
		private Literal _password;

		/// <summary>
		/// Account password (optional string)
		/// </summary>
		public Literal Password
		{
			get { return _password; }
			set { UpdateTokenInfo(value); _password = value; }
		}
		private AlterServiceMasterKeyOption _kind;

		/// <summary>
		/// How exactly service master key is altered
		/// </summary>
		public AlterServiceMasterKeyOption Kind
		{
			get { return _kind; }
			set { _kind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Account != null)
			{
				this.Account.Accept(visitor);
			}

			if (this.Password != null)
			{
				this.Password.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents BEGIN CONVERSATION TIMER statement
	/// </summary>
	[System.Serializable]
	public partial class BeginConversationTimerStatement : TSqlStatement
	{


		private ScalarExpression _handle;

		/// <summary>
		/// Conversation handle
		/// </summary>
		public ScalarExpression Handle
		{
			get { return _handle; }
			set { UpdateTokenInfo(value); _handle = value; }
		}
		private ScalarExpression _timeout;

		/// <summary>
		/// Specifies, in seconds, the amount of time to wait before putting the message on the queue
		/// </summary>
		public ScalarExpression Timeout
		{
			get { return _timeout; }
			set { UpdateTokenInfo(value); _timeout = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Handle != null)
			{
				this.Handle.Accept(visitor);
			}

			if (this.Timeout != null)
			{
				this.Timeout.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents BEGIN DIALOG statement
	/// </summary>
	[System.Serializable]
	public partial class BeginDialogStatement : TSqlStatement
	{


		private bool _isConversation;

		/// <summary>
		/// True, if CONVERSATION was specified, false otherwise
		/// </summary>
		public bool IsConversation
		{
			get { return _isConversation; }
			set { _isConversation = value; }
		}
		private VariableReference _handle;

		/// <summary>
		/// Conversation handle
		/// </summary>
		public VariableReference Handle
		{
			get { return _handle; }
			set { UpdateTokenInfo(value); _handle = value; }
		}
		private IdentifierOrValueExpression _initiatorServiceName;

		/// <summary>
		/// Specifies the service that initiates the dialog. Can be Identifier or Literal
		/// </summary>
		public IdentifierOrValueExpression InitiatorServiceName
		{
			get { return _initiatorServiceName; }
			set { UpdateTokenInfo(value); _initiatorServiceName = value; }
		}
		private ValueExpression _targetServiceName;

		/// <summary>
		/// Specifies the target service with which to initiate the dialog. Can be string Literal or Variable
		/// </summary>
		public ValueExpression TargetServiceName
		{
			get { return _targetServiceName; }
			set { UpdateTokenInfo(value); _targetServiceName = value; }
		}
		private ValueExpression _instanceSpec;

		/// <summary>
		/// (Optional) Specifies the database that hosts the target service. Can be string Literal or Variable
		/// </summary>
		public ValueExpression InstanceSpec
		{
			get { return _instanceSpec; }
			set { UpdateTokenInfo(value); _instanceSpec = value; }
		}
		private IdentifierOrValueExpression _contractName;

		/// <summary>
		/// (Optional) Specifies the contract that this conversation follows. Can be Identifier or SchemaObjectName
		/// </summary>
		public IdentifierOrValueExpression ContractName
		{
			get { return _contractName; }
			set { UpdateTokenInfo(value); _contractName = value; }
		}
		private List<DialogOption> _options = new List<DialogOption>();

		/// <summary>
		/// The collection of dialog options.
		/// </summary>
		public IList<DialogOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Handle != null)
			{
				this.Handle.Accept(visitor);
			}

			if (this.InitiatorServiceName != null)
			{
				this.InitiatorServiceName.Accept(visitor);
			}

			if (this.TargetServiceName != null)
			{
				this.TargetServiceName.Accept(visitor);
			}

			if (this.InstanceSpec != null)
			{
				this.InstanceSpec.Accept(visitor);
			}

			if (this.ContractName != null)
			{
				this.ContractName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a dialog option.
	/// </summary>
	[System.Serializable]
	public abstract partial class DialogOption : TSqlFragment
	{


		private DialogOptionKind _optionKind;

		/// <summary>
		/// The dialog option kind.
		/// </summary>
		public DialogOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents scalar expression dialog options.
	/// </summary>
	[System.Serializable]
	public partial class ScalarExpressionDialogOption : DialogOption
	{


		private ScalarExpression _value;

		/// <summary>
		/// The scalar expression value for the option.
		/// </summary>
		public ScalarExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ON/OFF dialog options.
	/// </summary>
	[System.Serializable]
	public partial class OnOffDialogOption : DialogOption
	{


		private OptionState _optionState;

		/// <summary>
		/// The option state.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents BACKUP CERTIFICATE statement
	/// </summary>
	[System.Serializable]
	public partial class BackupCertificateStatement : CertificateStatementBase
	{


		private Literal _file;

		/// <summary>
		/// File to save certificate to.
		/// </summary>
		public Literal File
		{
			get { return _file; }
			set { UpdateTokenInfo(value); _file = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.File != null)
			{
				this.File.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents common part of BACKUP and RESTORE (SERVICE) MASTER KEY statements
	/// </summary>
	[System.Serializable]
	public abstract partial class BackupRestoreMasterKeyStatementBase : TSqlStatement
	{


		private Literal _file;

		/// <summary>
		/// File to save to or load from service master key.
		/// </summary>
		public Literal File
		{
			get { return _file; }
			set { UpdateTokenInfo(value); _file = value; }
		}
		private Literal _password;

		/// <summary>
		/// Encryption or decryption password.
		/// </summary>
		public Literal Password
		{
			get { return _password; }
			set { UpdateTokenInfo(value); _password = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.File != null)
			{
				this.File.Accept(visitor);
			}

			if (this.Password != null)
			{
				this.Password.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents BACKUP SERVICE MASTER KEY statement
	/// </summary>
	[System.Serializable]
	public partial class BackupServiceMasterKeyStatement : BackupRestoreMasterKeyStatementBase
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents RESTORE SERVICE MASTER KEY statement
	/// </summary>
	[System.Serializable]
	public partial class RestoreServiceMasterKeyStatement : BackupRestoreMasterKeyStatementBase
	{


		private bool _isForce;

		/// <summary>
		/// True, if FORCE flag was specified, false otherwise.
		/// </summary>
		public bool IsForce
		{
			get { return _isForce; }
			set { _isForce = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents BACKUP MASTER KEY statement
	/// </summary>
	[System.Serializable]
	public partial class BackupMasterKeyStatement : BackupRestoreMasterKeyStatementBase
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents RESTORE MASTER KEY statement
	/// </summary>
	[System.Serializable]
	public partial class RestoreMasterKeyStatement : BackupRestoreMasterKeyStatementBase
	{


		private bool _isForce;

		/// <summary>
		/// True, if FORCE flag was specified, false otherwise.
		/// </summary>
		public bool IsForce
		{
			get { return _isForce; }
			set { _isForce = value; }
		}
		private Literal _encryptionPassword;

		/// <summary>
		/// Additional encryption password
		/// </summary>
		public Literal EncryptionPassword
		{
			get { return _encryptionPassword; }
			set { UpdateTokenInfo(value); _encryptionPassword = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.EncryptionPassword != null)
			{
				this.EncryptionPassword.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Placeholder for an arbitrary scalar expression.
	/// </summary>
	[System.Serializable]
	public partial class ScalarExpressionSnippet : ScalarExpression
	{


		private string _script;

		/// <summary>
		/// Represents an arbitrary Scalar Expression.
		/// </summary>
		public string Script
		{
			get { return _script; }
			set { _script = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Placeholder for an arbitrary boolean expression.
	/// </summary>
	[System.Serializable]
	public partial class BooleanExpressionSnippet : BooleanExpression
	{


		private string _script;

		/// <summary>
		/// Represents an arbitrary Boolean Expression.
		/// </summary>
		public string Script
		{
			get { return _script; }
			set { _script = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Placeholder for an arbitrary statement list.
	/// </summary>
	[System.Serializable]
	public partial class StatementListSnippet : StatementList
	{


		private string _script;

		/// <summary>
		/// Represents the script.
		/// </summary>
		public string Script
		{
			get { return _script; }
			set { _script = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Placeholder for an arbitrary select statement.
	/// </summary>
	[System.Serializable]
	public partial class SelectStatementSnippet : SelectStatement
	{


		private string _script;

		/// <summary>
		/// Represents the script.
		/// </summary>
		public string Script
		{
			get { return _script; }
			set { _script = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Placeholder for an arbitrary schema object name.
	/// </summary>
	[System.Serializable]
	public partial class SchemaObjectNameSnippet : SchemaObjectName
	{


		private string _script;

		/// <summary>
		/// Represents the script.
		/// </summary>
		public string Script
		{
			get { return _script; }
			set { _script = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Placeholder for an arbitrary TSqlFragment.
	/// </summary>
	[System.Serializable]
	public partial class TSqlFragmentSnippet : TSqlFragment
	{


		private string _script;

		/// <summary>
		/// Represents the script.
		/// </summary>
		public string Script
		{
			get { return _script; }
			set { _script = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Placeholder for an arbitrary statement.
	/// </summary>
	[System.Serializable]
	public partial class TSqlStatementSnippet : TSqlStatement
	{


		private string _script;

		/// <summary>
		/// Represents the script.
		/// </summary>
		public string Script
		{
			get { return _script; }
			set { _script = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Placeholder for an arbitrary identifier.
	/// </summary>
	[System.Serializable]
	public partial class IdentifierSnippet : Identifier
	{


		private string _script;

		/// <summary>
		/// Represents the script.
		/// </summary>
		public string Script
		{
			get { return _script; }
			set { _script = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a TSql sript.
	/// </summary>
	[System.Serializable]
	public partial class TSqlScript : TSqlFragment
	{


		private List<TSqlBatch> _batches = new List<TSqlBatch>();

		/// <summary>
		/// Batches in the script.
		/// </summary>
		public IList<TSqlBatch> Batches
		{
			get { return _batches; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Batches.Count; i < count; ++i)
			{
				this.Batches[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a batch in T-SQL script.
	/// </summary>
	[System.Serializable]
	public partial class TSqlBatch : TSqlFragment
	{


		private List<TSqlStatement> _statements = new List<TSqlStatement>();

		/// <summary>
		/// A list of statements, possibly empty.
		/// </summary>
		public IList<TSqlStatement> Statements
		{
			get { return _statements; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Statements.Count; i < count; ++i)
			{
				this.Statements[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single T-SQL statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class TSqlStatement : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a data modification statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class DataModificationStatement : StatementWithCtesAndXmlNamespaces
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for common options of data modification specifications.
	/// </summary>
	[System.Serializable]
	public abstract partial class DataModificationSpecification : TSqlFragment
	{


		private TableReference _target;

		/// <summary>
		/// The target table reference.
		/// </summary>
		public TableReference Target
		{
			get { return _target; }
			set { UpdateTokenInfo(value); _target = value; }
		}
		private TopRowFilter _topRowFilter;

		/// <summary>
		/// The top row filter.
		/// </summary>
		public TopRowFilter TopRowFilter
		{
			get { return _topRowFilter; }
			set { UpdateTokenInfo(value); _topRowFilter = value; }
		}
		private OutputIntoClause _outputIntoClause;

		/// <summary>
		/// The OUTPUT INTO clause.
		/// </summary>
		public OutputIntoClause OutputIntoClause
		{
			get { return _outputIntoClause; }
			set { UpdateTokenInfo(value); _outputIntoClause = value; }
		}
		private OutputClause _outputClause;

		/// <summary>
		/// The OUTPUT clause.
		/// </summary>
		public OutputClause OutputClause
		{
			get { return _outputClause; }
			set { UpdateTokenInfo(value); _outputClause = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Target != null)
			{
				this.Target.Accept(visitor);
			}

			if (this.TopRowFilter != null)
			{
				this.TopRowFilter.Accept(visitor);
			}

			if (this.OutputIntoClause != null)
			{
				this.OutputIntoClause.Accept(visitor);
			}

			if (this.OutputClause != null)
			{
				this.OutputClause.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the MERGE statement.
	/// </summary>
	[System.Serializable]
	public partial class MergeStatement : DataModificationStatement
	{


		private MergeSpecification _mergeSpecification;

		/// <summary>
		/// Properties for the merge statement
		/// </summary>
		public MergeSpecification MergeSpecification
		{
			get { return _mergeSpecification; }
			set { UpdateTokenInfo(value); _mergeSpecification = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.MergeSpecification != null)
			{
				this.MergeSpecification.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The merge specification.
	/// </summary>
	[System.Serializable]
	public partial class MergeSpecification : DataModificationSpecification
	{


		private Identifier _tableAlias;

		/// <summary>
		/// Optional target alias.
		/// </summary>
		public Identifier TableAlias
		{
			get { return _tableAlias; }
			set { UpdateTokenInfo(value); _tableAlias = value; }
		}
		private TableReference _tableReference;

		/// <summary>
		/// Table reference.
		/// </summary>
		public TableReference TableReference
		{
			get { return _tableReference; }
			set { UpdateTokenInfo(value); _tableReference = value; }
		}
		private BooleanExpression _searchCondition;

		/// <summary>
		/// Merge search condition.
		/// </summary>
		public BooleanExpression SearchCondition
		{
			get { return _searchCondition; }
			set { UpdateTokenInfo(value); _searchCondition = value; }
		}
		private List<MergeActionClause> _actionClauses = new List<MergeActionClause>();

		/// <summary>
		/// Collection of conditions and actions to take.
		/// </summary>
		public IList<MergeActionClause> ActionClauses
		{
			get { return _actionClauses; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.TableAlias != null)
			{
				this.TableAlias.Accept(visitor);
			}

			if (this.TableReference != null)
			{
				this.TableReference.Accept(visitor);
			}

			if (this.SearchCondition != null)
			{
				this.SearchCondition.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ActionClauses.Count; i < count; ++i)
			{
				this.ActionClauses[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The condition and action to take for merge.
	/// </summary>
	[System.Serializable]
	public partial class MergeActionClause : TSqlFragment
	{


		private MergeCondition _condition;

		/// <summary>
		/// Merge condition.
		/// </summary>
		public MergeCondition Condition
		{
			get { return _condition; }
			set { _condition = value; }
		}
		private BooleanExpression _searchCondition;

		/// <summary>
		/// Optional search condition
		/// </summary>
		public BooleanExpression SearchCondition
		{
			get { return _searchCondition; }
			set { UpdateTokenInfo(value); _searchCondition = value; }
		}
		private MergeAction _action;

		/// <summary>
		/// Action to take if conditions are met
		/// </summary>
		public MergeAction Action
		{
			get { return _action; }
			set { UpdateTokenInfo(value); _action = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.SearchCondition != null)
			{
				this.SearchCondition.Accept(visitor);
			}

			if (this.Action != null)
			{
				this.Action.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents action in merge statement
	/// </summary>
	[System.Serializable]
	public abstract partial class MergeAction : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents update merge action
	/// </summary>
	[System.Serializable]
	public partial class UpdateMergeAction : MergeAction
	{


		private List<SetClause> _setClauses = new List<SetClause>();

		/// <summary>
		/// The collection of set clauses.
		/// </summary>
		public IList<SetClause> SetClauses
		{
			get { return _setClauses; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.SetClauses.Count; i < count; ++i)
			{
				this.SetClauses[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents delete merge action
	/// </summary>
	[System.Serializable]
	public partial class DeleteMergeAction : MergeAction
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents insert merge action
	/// </summary>
	[System.Serializable]
	public partial class InsertMergeAction : MergeAction
	{


		private List<ColumnReferenceExpression> _columns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// List of columns of the target table in which to insert data.
		/// </summary>
		public IList<ColumnReferenceExpression> Columns
		{
			get { return _columns; }
		}

		private ValuesInsertSource _source;

		/// <summary>
		/// Insert source
		/// </summary>
		public ValuesInsertSource Source
		{
			get { return _source; }
			set { UpdateTokenInfo(value); _source = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			if (this.Source != null)
			{
				this.Source.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Creates table type
	/// </summary>
	[System.Serializable]
	public partial class CreateTypeTableStatement : CreateTypeStatement
	{


		private TableDefinition _definition;

		/// <summary>
		/// Table elements
		/// </summary>
		public TableDefinition Definition
		{
			get { return _definition; }
			set { UpdateTokenInfo(value); _definition = value; }
		}
		private List<TableOption> _options = new List<TableOption>();

		/// <summary>
		/// The collection of table options.
		/// </summary>
		public IList<TableOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Definition != null)
			{
				this.Definition.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the base sensitivity classification statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class SensitivityClassificationStatement : TSqlStatement
	{


		private List<ColumnReferenceExpression> _columns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// List of the columns to set on or drop from the sensitivity classification.
		/// </summary>
		public IList<ColumnReferenceExpression> Columns
		{
			get { return _columns; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Single option in ADD SENSITIVITY CLASSIFICATION statement.
	/// </summary>
	[System.Serializable]
	public partial class SensitivityClassificationOption : TSqlFragment
	{


		private SensitivityClassification.OptionType _type;

		/// <summary>
		/// The sensitivity classification option kind.
		/// </summary>
		public SensitivityClassification.OptionType Type
		{
			get { return _type; }
			set { _type = value; }
		}
		private Literal _value;

		/// <summary>
		/// Option value.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Adds sensitivity classification to specified columns.
	/// </summary>
	[System.Serializable]
	public partial class AddSensitivityClassificationStatement : SensitivityClassificationStatement
	{


		private List<SensitivityClassificationOption> _options = new List<SensitivityClassificationOption>();

		/// <summary>
		/// Sensitivity options (Label, Label_Id, ...).
		/// </summary>
		public IList<SensitivityClassificationOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Drops sensitivity classification from specified columns.
	/// </summary>
	[System.Serializable]
	public partial class DropSensitivityClassificationStatement : SensitivityClassificationStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents audit specification statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class AuditSpecificationStatement : TSqlStatement
	{


		private OptionState _auditState;

		/// <summary>
		/// If audit was enabled or disabled by this statement.
		/// </summary>
		public OptionState AuditState
		{
			get { return _auditState; }
			set { _auditState = value; }
		}
		private List<AuditSpecificationPart> _parts = new List<AuditSpecificationPart>();

		/// <summary>
		/// Individual parts of audit specification.
		/// </summary>
		public IList<AuditSpecificationPart> Parts
		{
			get { return _parts; }
		}

		private Identifier _specificationName;

		/// <summary>
		/// Audit specification name.
		/// </summary>
		public Identifier SpecificationName
		{
			get { return _specificationName; }
			set { UpdateTokenInfo(value); _specificationName = value; }
		}
		private Identifier _auditName;

		/// <summary>
		/// Audit name.
		/// </summary>
		public Identifier AuditName
		{
			get { return _auditName; }
			set { UpdateTokenInfo(value); _auditName = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Parts.Count; i < count; ++i)
			{
				this.Parts[i].Accept(visitor);
			}

			if (this.SpecificationName != null)
			{
				this.SpecificationName.Accept(visitor);
			}

			if (this.AuditName != null)
			{
				this.AuditName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents one ADD/DROP clause in audit specification statement.
	/// </summary>
	[System.Serializable]
	public partial class AuditSpecificationPart : TSqlFragment
	{


		private bool _isDrop;

		/// <summary>
		/// True if DROP was specified, false otherwise.
		/// </summary>
		public bool IsDrop
		{
			get { return _isDrop; }
			set { _isDrop = value; }
		}
		private AuditSpecificationDetail _details;

		/// <summary>
		/// The audit specification details.
		/// </summary>
		public AuditSpecificationDetail Details
		{
			get { return _details; }
			set { UpdateTokenInfo(value); _details = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Details != null)
			{
				this.Details.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for audit action specification and audit action group name.
	/// </summary>
	[System.Serializable]
	public abstract partial class AuditSpecificationDetail : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents audit action specification.
	/// </summary>
	[System.Serializable]
	public partial class AuditActionSpecification : AuditSpecificationDetail
	{


		private List<DatabaseAuditAction> _actions = new List<DatabaseAuditAction>();

		/// <summary>
		/// A list of audit action.
		/// </summary>
		public IList<DatabaseAuditAction> Actions
		{
			get { return _actions; }
		}

		private List<SecurityPrincipal> _principals = new List<SecurityPrincipal>();

		/// <summary>
		/// Represents the principals.
		/// </summary>
		public IList<SecurityPrincipal> Principals
		{
			get { return _principals; }
		}

		private SecurityTargetObject _targetObject;

		/// <summary>
		/// Security target object.
		/// </summary>
		public SecurityTargetObject TargetObject
		{
			get { return _targetObject; }
			set { UpdateTokenInfo(value); _targetObject = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Actions.Count; i < count; ++i)
			{
				this.Actions[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.Principals.Count; i < count; ++i)
			{
				this.Principals[i].Accept(visitor);
			}

			if (this.TargetObject != null)
			{
				this.TargetObject.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single action in audit action specification.
	/// </summary>
	[System.Serializable]
	public partial class DatabaseAuditAction : TSqlFragment
	{


		private DatabaseAuditActionKind _actionKind;

		/// <summary>
		/// Action kind.
		/// </summary>
		public DatabaseAuditActionKind ActionKind
		{
			get { return _actionKind; }
			set { _actionKind = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents audit group reference.
	/// </summary>
	[System.Serializable]
	public partial class AuditActionGroupReference : AuditSpecificationDetail
	{


		private AuditActionGroup _group;

		/// <summary>
		/// Audit group.
		/// </summary>
		public AuditActionGroup Group
		{
			get { return _group; }
			set { _group = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Creates database audit specification.
	/// </summary>
	[System.Serializable]
	public partial class CreateDatabaseAuditSpecificationStatement : AuditSpecificationStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Alters database audit specification.
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseAuditSpecificationStatement : AuditSpecificationStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP DATABASE AUDIT SPECIFICATION statement.
	/// </summary>
	[System.Serializable]
	public partial class DropDatabaseAuditSpecificationStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Creates server audit specification.
	/// </summary>
	[System.Serializable]
	public partial class CreateServerAuditSpecificationStatement : AuditSpecificationStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Alters server audit specification.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerAuditSpecificationStatement : AuditSpecificationStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents DROP SERVER AUDIT SPECIFICATION statement.
	/// </summary>
	[System.Serializable]
	public partial class DropServerAuditSpecificationStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Common base for CREATE and ALTER SERVER audit statements.
	/// </summary>
	[System.Serializable]
	public abstract partial class ServerAuditStatement : TSqlStatement
	{


		private Identifier _auditName;

		/// <summary>
		/// Audit name.
		/// </summary>
		public Identifier AuditName
		{
			get { return _auditName; }
			set { UpdateTokenInfo(value); _auditName = value; }
		}
		private AuditTarget _auditTarget;

		/// <summary>
		/// Audit target.
		/// </summary>
		public AuditTarget AuditTarget
		{
			get { return _auditTarget; }
			set { UpdateTokenInfo(value); _auditTarget = value; }
		}
		private List<AuditOption> _options = new List<AuditOption>();

		/// <summary>
		/// Audit options.
		/// </summary>
		public IList<AuditOption> Options
		{
			get { return _options; }
		}

		private BooleanExpression _predicateExpression;

		/// <summary>
		/// The WHERE clause filter.
		/// </summary>
		public BooleanExpression PredicateExpression
		{
			get { return _predicateExpression; }
			set { UpdateTokenInfo(value); _predicateExpression = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.AuditName != null)
			{
				this.AuditName.Accept(visitor);
			}

			if (this.AuditTarget != null)
			{
				this.AuditTarget.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			if (this.PredicateExpression != null)
			{
				this.PredicateExpression.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Creates server audit.
	/// </summary>
	[System.Serializable]
	public partial class CreateServerAuditStatement : ServerAuditStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Alters server audit.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerAuditStatement : ServerAuditStatement
	{


		private Identifier _newName;

		/// <summary>
		/// New audit name. If specified, AuditTarget and Options (from base class) should be empty.
		/// </summary>
		public Identifier NewName
		{
			get { return _newName; }
			set { UpdateTokenInfo(value); _newName = value; }
		}
		private bool _removeWhere;

		/// <summary>
		/// Indicates if REMOVE WHERE was specified.
		/// </summary>
		public bool RemoveWhere
		{
			get { return _removeWhere; }
			set { _removeWhere = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.NewName != null)
			{
				this.NewName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Drops server audit.
	/// </summary>
	[System.Serializable]
	public partial class DropServerAuditStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Audit target in CREATE/ALTER SERVER AUDIT statements.
	/// </summary>
	[System.Serializable]
	public partial class AuditTarget : TSqlFragment
	{


		private AuditTargetKind _targetKind;

		/// <summary>
		/// Audit target kind.
		/// </summary>
		public AuditTargetKind TargetKind
		{
			get { return _targetKind; }
			set { _targetKind = value; }
		}
		private List<AuditTargetOption> _targetOptions = new List<AuditTargetOption>();

		/// <summary>
		/// Options for the Audit Target.
		/// </summary>
		public IList<AuditTargetOption> TargetOptions
		{
			get { return _targetOptions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.TargetOptions.Count; i < count; ++i)
			{
				this.TargetOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Single option in CREATE/ALTER SERVER AUDIT statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class AuditOption : TSqlFragment
	{


		private AuditOptionKind _optionKind;

		/// <summary>
		/// The audit option kind.
		/// </summary>
		public AuditOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// QUEUE_DELAY option in CREATE/ALTER SERVER AUDIT statement.
	/// </summary>
	[System.Serializable]
	public partial class QueueDelayAuditOption : AuditOption
	{


		private Literal _delay;

		/// <summary>
		/// Option value.
		/// </summary>
		public Literal Delay
		{
			get { return _delay; }
			set { UpdateTokenInfo(value); _delay = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Delay != null)
			{
				this.Delay.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// AUDIT_GUID option in CREATE SERVER AUDIT statement.
	/// </summary>
	[System.Serializable]
	public partial class AuditGuidAuditOption : AuditOption
	{


		private Literal _guid;

		/// <summary>
		/// Option value.
		/// </summary>
		public Literal Guid
		{
			get { return _guid; }
			set { UpdateTokenInfo(value); _guid = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Guid != null)
			{
				this.Guid.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// ON_FAILURE option in CREATE/ALTER SERVER AUDIT statement.
	/// </summary>
	[System.Serializable]
	public partial class OnFailureAuditOption : AuditOption
	{


		private AuditFailureActionType _onFailureAction;

		/// <summary>
		/// The action to take on audit failure.
		/// </summary>
		public AuditFailureActionType OnFailureAction
		{
			get { return _onFailureAction; }
			set { _onFailureAction = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// OPERATOR_AUDIT option in CREATE/ALTER SERVER AUDIT statement.
	/// </summary>
	[System.Serializable]
	public partial class OperatorAuditOption : AuditOption
	{


		private OptionState _value;

		/// <summary>
		/// Option value.
		/// </summary>
		public OptionState Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// STATE option in ALTER SERVER AUDIT statement.
	/// </summary>
	[System.Serializable]
	public partial class StateAuditOption : AuditOption
	{


		private OptionState _value;

		/// <summary>
		/// Option value.
		/// </summary>
		public OptionState Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Single option for audit target.
	/// </summary>
	[System.Serializable]
	public abstract partial class AuditTargetOption : TSqlFragment
	{


		private AuditTargetOptionKind _optionKind;

		/// <summary>
		/// The audit target option kind.
		/// </summary>
		public AuditTargetOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// MaxSize option in case of FILE audit target.
	/// </summary>
	[System.Serializable]
	public partial class MaxSizeAuditTargetOption : AuditTargetOption
	{


		private bool _isUnlimited;

		/// <summary>
		/// Represents UNLIMITED size if true.
		/// </summary>
		public bool IsUnlimited
		{
			get { return _isUnlimited; }
			set { _isUnlimited = value; }
		}
		private Literal _size;

		/// <summary>
		/// Maximum size to which the audit file can grow. Null in case of UNLIMITED size.
		/// </summary>
		public Literal Size
		{
			get { return _size; }
			set { UpdateTokenInfo(value); _size = value; }
		}
		private MemoryUnit _unit;

		/// <summary>
		/// Measurement units for size in case it is specified. Only MB/GB/TB are valid.
		/// </summary>
		public MemoryUnit Unit
		{
			get { return _unit; }
			set { _unit = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Size != null)
			{
				this.Size.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// RetentionDays option in case of URL audit target.
	/// </summary>
	[System.Serializable]
	public partial class RetentionDaysAuditTargetOption : AuditTargetOption
	{


		private Literal _days;

		/// <summary>
		/// Represents number of retention days.
		/// </summary>
		public Literal Days
		{
			get { return _days; }
			set { UpdateTokenInfo(value); _days = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Days != null)
			{
				this.Days.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// MAX_ROLLOVER_FILES audit target option.
	/// </summary>
	[System.Serializable]
	public partial class MaxRolloverFilesAuditTargetOption : AuditTargetOption
	{


		private Literal _value;

		/// <summary>
		/// Option value.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}
		private bool _isUnlimited;

		/// <summary>
		/// Represents UNLIMITED size if true.
		/// </summary>
		public bool IsUnlimited
		{
			get { return _isUnlimited; }
			set { _isUnlimited = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Audit option with a literal value.
	/// </summary>
	[System.Serializable]
	public partial class LiteralAuditTargetOption : AuditTargetOption
	{


		private Literal _value;

		/// <summary>
		/// Option value.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// RESERVE_DISK_SPACE option in case of FILE audit target.
	/// </summary>
	[System.Serializable]
	public partial class OnOffAuditTargetOption : AuditTargetOption
	{


		private OptionState _value;

		/// <summary>
		/// Option value.
		/// </summary>
		public OptionState Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for statements dealing with encryption key.
	/// </summary>
	[System.Serializable]
	public abstract partial class DatabaseEncryptionKeyStatement : TSqlStatement
	{


		private CryptoMechanism _encryptor;

		/// <summary>
		/// Encryptor. Only certificate and asymmetric key are allowed here, and crypto should not have password or signature.
		/// </summary>
		public CryptoMechanism Encryptor
		{
			get { return _encryptor; }
			set { UpdateTokenInfo(value); _encryptor = value; }
		}
		private DatabaseEncryptionKeyAlgorithm _algorithm;

		/// <summary>
		/// Algorithm used for the encryption key.
		/// </summary>
		public DatabaseEncryptionKeyAlgorithm Algorithm
		{
			get { return _algorithm; }
			set { _algorithm = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Encryptor != null)
			{
				this.Encryptor.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Creates database encryption key
	/// </summary>
	[System.Serializable]
	public partial class CreateDatabaseEncryptionKeyStatement : DatabaseEncryptionKeyStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Alters database encryption key
	/// </summary>
	[System.Serializable]
	public partial class AlterDatabaseEncryptionKeyStatement : DatabaseEncryptionKeyStatement
	{


		private bool _regenerate;

		/// <summary>
		/// True if REGENERATE was specified.
		/// </summary>
		public bool Regenerate
		{
			get { return _regenerate; }
			set { _regenerate = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Drops database encryption key.
	/// </summary>
	[System.Serializable]
	public partial class DropDatabaseEncryptionKeyStatement : TSqlStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents Create and Alter Resource Pool Statement.
	/// </summary>
	[System.Serializable]
	public partial class ResourcePoolStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Represents the name. must be unique within an instance of SQL Server.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<ResourcePoolParameter> _resourcePoolParameters = new List<ResourcePoolParameter>();

		/// <summary>
		/// The list of parameters.
		/// </summary>
		public IList<ResourcePoolParameter> ResourcePoolParameters
		{
			get { return _resourcePoolParameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ResourcePoolParameters.Count; i < count; ++i)
			{
				this.ResourcePoolParameters[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the resource pool statement parameters.
	/// </summary>
	[System.Serializable]
	public partial class ResourcePoolParameter : TSqlFragment
	{


		private ResourcePoolParameterType _parameterType;

		/// <summary>
		/// The type of the parameter.
		/// </summary>
		public ResourcePoolParameterType ParameterType
		{
			get { return _parameterType; }
			set { _parameterType = value; }
		}
		private Literal _parameterValue;

		/// <summary>
		/// The value of the parameter.
		/// </summary>
		public Literal ParameterValue
		{
			get { return _parameterValue; }
			set { UpdateTokenInfo(value); _parameterValue = value; }
		}
		private ResourcePoolAffinitySpecification _affinitySpecification;

		/// <summary>
		/// The affinity specification if the parameter type is AFFINITY.
		/// </summary>
		public ResourcePoolAffinitySpecification AffinitySpecification
		{
			get { return _affinitySpecification; }
			set { UpdateTokenInfo(value); _affinitySpecification = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ParameterValue != null)
			{
				this.ParameterValue.Accept(visitor);
			}

			if (this.AffinitySpecification != null)
			{
				this.AffinitySpecification.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the resource pool statement affinity specification.
	/// </summary>
	[System.Serializable]
	public partial class ResourcePoolAffinitySpecification : TSqlFragment
	{


		private ResourcePoolAffinityType _affinityType;

		/// <summary>
		/// The type of AFFINITY: SCHEDULERS or NUMANODE.
		/// </summary>
		public ResourcePoolAffinityType AffinityType
		{
			get { return _affinityType; }
			set { _affinityType = value; }
		}
		private Literal _parameterValue;

		/// <summary>
		/// The value of the parameter.
		/// </summary>
		public Literal ParameterValue
		{
			get { return _parameterValue; }
			set { UpdateTokenInfo(value); _parameterValue = value; }
		}
		private bool _isAuto;

		/// <summary>
		/// Whether the affinity has been specified as AUTO.
		/// </summary>
		public bool IsAuto
		{
			get { return _isAuto; }
			set { _isAuto = value; }
		}
		private List<LiteralRange> _poolAffinityRanges = new List<LiteralRange>();

		/// <summary>
		/// The list of singleton values or ranges for the affinity.
		/// </summary>
		public IList<LiteralRange> PoolAffinityRanges
		{
			get { return _poolAffinityRanges; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ParameterValue != null)
			{
				this.ParameterValue.Accept(visitor);
			}

			for (Int32 i = 0, count = this.PoolAffinityRanges.Count; i < count; ++i)
			{
				this.PoolAffinityRanges[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Create Resource Pool statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateResourcePoolStatement : ResourcePoolStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Alter Resource Pool statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterResourcePoolStatement : ResourcePoolStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Drop Resource Pool statement.
	/// </summary>
	[System.Serializable]
	public partial class DropResourcePoolStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents Create and Alter External Resource Pool Statement.
	/// </summary>
	[System.Serializable]
	public partial class ExternalResourcePoolStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Represents the name. must be unique within an instance of SQL Server.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<ExternalResourcePoolParameter> _externalResourcePoolParameters = new List<ExternalResourcePoolParameter>();

		/// <summary>
		/// The list of parameters.
		/// </summary>
		public IList<ExternalResourcePoolParameter> ExternalResourcePoolParameters
		{
			get { return _externalResourcePoolParameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ExternalResourcePoolParameters.Count; i < count; ++i)
			{
				this.ExternalResourcePoolParameters[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the external resource pool statement parameters.
	/// </summary>
	[System.Serializable]
	public partial class ExternalResourcePoolParameter : TSqlFragment
	{


		private ExternalResourcePoolParameterType _parameterType;

		/// <summary>
		/// The type of the parameter.
		/// </summary>
		public ExternalResourcePoolParameterType ParameterType
		{
			get { return _parameterType; }
			set { _parameterType = value; }
		}
		private Literal _parameterValue;

		/// <summary>
		/// The value of the parameter.
		/// </summary>
		public Literal ParameterValue
		{
			get { return _parameterValue; }
			set { UpdateTokenInfo(value); _parameterValue = value; }
		}
		private ExternalResourcePoolAffinitySpecification _affinitySpecification;

		/// <summary>
		/// The affinity specification if the parameter type is AFFINITY.
		/// </summary>
		public ExternalResourcePoolAffinitySpecification AffinitySpecification
		{
			get { return _affinitySpecification; }
			set { UpdateTokenInfo(value); _affinitySpecification = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ParameterValue != null)
			{
				this.ParameterValue.Accept(visitor);
			}

			if (this.AffinitySpecification != null)
			{
				this.AffinitySpecification.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the external resource pool statement affinity specification.
	/// </summary>
	[System.Serializable]
	public partial class ExternalResourcePoolAffinitySpecification : TSqlFragment
	{


		private ExternalResourcePoolAffinityType _affinityType;

		/// <summary>
		/// The type of AFFINITY: CPU or NUMANODE.
		/// </summary>
		public ExternalResourcePoolAffinityType AffinityType
		{
			get { return _affinityType; }
			set { _affinityType = value; }
		}
		private Literal _parameterValue;

		/// <summary>
		/// The value of the parameter.
		/// </summary>
		public Literal ParameterValue
		{
			get { return _parameterValue; }
			set { UpdateTokenInfo(value); _parameterValue = value; }
		}
		private bool _isAuto;

		/// <summary>
		/// Whether the affinity has been specified as AUTO.
		/// </summary>
		public bool IsAuto
		{
			get { return _isAuto; }
			set { _isAuto = value; }
		}
		private List<LiteralRange> _poolAffinityRanges = new List<LiteralRange>();

		/// <summary>
		/// The list of singleton values or ranges for the affinity.
		/// </summary>
		public IList<LiteralRange> PoolAffinityRanges
		{
			get { return _poolAffinityRanges; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ParameterValue != null)
			{
				this.ParameterValue.Accept(visitor);
			}

			for (Int32 i = 0, count = this.PoolAffinityRanges.Count; i < count; ++i)
			{
				this.PoolAffinityRanges[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Create External Resource Pool statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateExternalResourcePoolStatement : ExternalResourcePoolStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Alter External Resource Pool statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterExternalResourcePoolStatement : ExternalResourcePoolStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Drop External Resource Pool statement.
	/// </summary>
	[System.Serializable]
	public partial class DropExternalResourcePoolStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents Create and Alter Workload Group Statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class WorkloadGroupStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Represents the name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<WorkloadGroupParameter> _workloadGroupParameters = new List<WorkloadGroupParameter>();

		/// <summary>
		/// The list of parameters.
		/// </summary>
		public IList<WorkloadGroupParameter> WorkloadGroupParameters
		{
			get { return _workloadGroupParameters; }
		}

		private Identifier _poolName;

		/// <summary>
		/// Represents the resource pool name.
		/// </summary>
		public Identifier PoolName
		{
			get { return _poolName; }
			set { UpdateTokenInfo(value); _poolName = value; }
		}
		private Identifier _externalPoolName;

		/// <summary>
		/// Represents the external resource pool name.
		/// </summary>
		public Identifier ExternalPoolName
		{
			get { return _externalPoolName; }
			set { UpdateTokenInfo(value); _externalPoolName = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.WorkloadGroupParameters.Count; i < count; ++i)
			{
				this.WorkloadGroupParameters[i].Accept(visitor);
			}

			if (this.PoolName != null)
			{
				this.PoolName.Accept(visitor);
			}

			if (this.ExternalPoolName != null)
			{
				this.ExternalPoolName.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the workload group statement parameters.
	/// </summary>
	[System.Serializable]
	public partial class WorkloadGroupResourceParameter : WorkloadGroupParameter
	{


		private Literal _parameterValue;

		/// <summary>
		/// The value of the parameter.
		/// </summary>
		public Literal ParameterValue
		{
			get { return _parameterValue; }
			set { UpdateTokenInfo(value); _parameterValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.ParameterValue != null)
			{
				this.ParameterValue.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the workload group importance parameter.
	/// </summary>
	[System.Serializable]
	public partial class WorkloadGroupImportanceParameter : WorkloadGroupParameter
	{


		private ImportanceParameterType _parameterValue;

		/// <summary>
		/// Represents the importance level.
		/// </summary>
		public ImportanceParameterType ParameterValue
		{
			get { return _parameterValue; }
			set { _parameterValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the workload group statement parameters.
	/// </summary>
	[System.Serializable]
	public abstract partial class WorkloadGroupParameter : TSqlFragment
	{


		private WorkloadGroupParameterType _parameterType;

		/// <summary>
		/// The type of the parameter.
		/// </summary>
		public WorkloadGroupParameterType ParameterType
		{
			get { return _parameterType; }
			set { _parameterType = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Create Workload Group statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateWorkloadGroupStatement : WorkloadGroupStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Alter Workload Group statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterWorkloadGroupStatement : WorkloadGroupStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Drop Workload Group statement.
	/// </summary>
	[System.Serializable]
	public partial class DropWorkloadGroupStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents Create Workload Classifier statement
	/// </summary>
	[System.Serializable]
	public abstract partial class WorkloadClassifierStatement : TSqlStatement
	{


		private Identifier _classifierName;

		/// <summary>
		/// The name of the classifier.
		/// </summary>
		public Identifier ClassifierName
		{
			get { return _classifierName; }
			set { UpdateTokenInfo(value); _classifierName = value; }
		}
		private List<WorkloadClassifierOption> _options = new List<WorkloadClassifierOption>();

		/// <summary>
		/// Workload classifier options.
		/// </summary>
		public IList<WorkloadClassifierOption> Options
		{
			get { return _options; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ClassifierName != null)
			{
				this.ClassifierName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// A single workload classifier option.
	/// </summary>
	[System.Serializable]
	public abstract partial class WorkloadClassifierOption : TSqlFragment
	{


		private WorkloadClassifierOptionType _optionType;

		/// <summary>
		/// The type of the parameter.
		/// </summary>
		public WorkloadClassifierOptionType OptionType
		{
			get { return _optionType; }
			set { _optionType = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the workload group option for workload classifier.
	/// </summary>
	[System.Serializable]
	public partial class ClassifierWorkloadGroupOption : WorkloadClassifierOption
	{


		private StringLiteral _workloadGroupName;

		/// <summary>
		/// Name of the workload group associated with this classifier.
		/// </summary>
		public StringLiteral WorkloadGroupName
		{
			get { return _workloadGroupName; }
			set { UpdateTokenInfo(value); _workloadGroupName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.WorkloadGroupName != null)
			{
				this.WorkloadGroupName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the member name option for workload classifier.
	/// </summary>
	[System.Serializable]
	public partial class ClassifierMemberNameOption : WorkloadClassifierOption
	{


		private StringLiteral _memberName;

		/// <summary>
		/// Name of the role or the user associated with this classifier.
		/// </summary>
		public StringLiteral MemberName
		{
			get { return _memberName; }
			set { UpdateTokenInfo(value); _memberName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.MemberName != null)
			{
				this.MemberName.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the query label option for workload classifier.
	/// </summary>
	[System.Serializable]
	public partial class ClassifierWlmLabelOption : WorkloadClassifierOption
	{


		private StringLiteral _wlmLabel;

		/// <summary>
		/// The query label associated with this classifier.
		/// </summary>
		public StringLiteral WlmLabel
		{
			get { return _wlmLabel; }
			set { UpdateTokenInfo(value); _wlmLabel = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.WlmLabel != null)
			{
				this.WlmLabel.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the importance option for workload classifier.
	/// </summary>
	[System.Serializable]
	public partial class ClassifierImportanceOption : WorkloadClassifierOption
	{


		private ImportanceParameterType _importance;

		/// <summary>
		/// Importance associated with this classifier.
		/// </summary>
		public ImportanceParameterType Importance
		{
			get { return _importance; }
			set { _importance = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the wlm context option for workload classifier.
	/// </summary>
	[System.Serializable]
	public partial class ClassifierWlmContextOption : WorkloadClassifierOption
	{


		private StringLiteral _wlmContext;

		/// <summary>
		/// The wlm context associated with this classifier.
		/// </summary>
		public StringLiteral WlmContext
		{
			get { return _wlmContext; }
			set { UpdateTokenInfo(value); _wlmContext = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.WlmContext != null)
			{
				this.WlmContext.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the start time option for workload classifier.
	/// </summary>
	[System.Serializable]
	public partial class ClassifierStartTimeOption : WorkloadClassifierOption
	{


		private WlmTimeLiteral _time;

		/// <summary>
		/// The start time for when this classifier applies.
		/// </summary>
		public WlmTimeLiteral Time
		{
			get { return _time; }
			set { UpdateTokenInfo(value); _time = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Time != null)
			{
				this.Time.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the start time option for workload classifier.
	/// </summary>
	[System.Serializable]
	public partial class ClassifierEndTimeOption : WorkloadClassifierOption
	{


		private WlmTimeLiteral _time;

		/// <summary>
		/// The end time for when this classifier applies.
		/// </summary>
		public WlmTimeLiteral Time
		{
			get { return _time; }
			set { UpdateTokenInfo(value); _time = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Time != null)
			{
				this.Time.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a Literal of time type used in Workload Management.
	/// </summary>
	[System.Serializable]
	public partial class WlmTimeLiteral : TSqlFragment
	{


		private StringLiteral _timeString;

		/// <summary>
		/// The time literal as a string in the HH:MM 24-hour format
		/// </summary>
		public StringLiteral TimeString
		{
			get { return _timeString; }
			set { UpdateTokenInfo(value); _timeString = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.TimeString != null)
			{
				this.TimeString.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Create Workload Classifier statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateWorkloadClassifierStatement : WorkloadClassifierStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents Drop Workload Classifier statement
	/// </summary>
	[System.Serializable]
	public partial class DropWorkloadClassifierStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents Create and Alter Broker Priority Statement.
	/// </summary>
	[System.Serializable]
	public abstract partial class BrokerPriorityStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Represents the name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<BrokerPriorityParameter> _brokerPriorityParameters = new List<BrokerPriorityParameter>();

		/// <summary>
		/// The list of parameters.
		/// </summary>
		public IList<BrokerPriorityParameter> BrokerPriorityParameters
		{
			get { return _brokerPriorityParameters; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.BrokerPriorityParameters.Count; i < count; ++i)
			{
				this.BrokerPriorityParameters[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the broker prioriry statement parameters.
	/// </summary>
	[System.Serializable]
	public partial class BrokerPriorityParameter : TSqlFragment
	{


		private BrokerPriorityParameterSpecialType _isDefaultOrAny;

		/// <summary>
		/// Specifies whether the parameter can take DEFAULT or ANY as values
		/// </summary>
		public BrokerPriorityParameterSpecialType IsDefaultOrAny
		{
			get { return _isDefaultOrAny; }
			set { _isDefaultOrAny = value; }
		}
		private BrokerPriorityParameterType _parameterType;

		/// <summary>
		/// The type of the parameter.
		/// </summary>
		public BrokerPriorityParameterType ParameterType
		{
			get { return _parameterType; }
			set { _parameterType = value; }
		}
		private IdentifierOrValueExpression _parameterValue;

		/// <summary>
		/// The value of the parameter.
		/// </summary>
		public IdentifierOrValueExpression ParameterValue
		{
			get { return _parameterValue; }
			set { UpdateTokenInfo(value); _parameterValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ParameterValue != null)
			{
				this.ParameterValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Create Broker Priority statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateBrokerPriorityStatement : BrokerPriorityStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Alter Broker Priority statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterBrokerPriorityStatement : BrokerPriorityStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Drop Broker Priority statement.
	/// </summary>
	[System.Serializable]
	public partial class DropBrokerPriorityStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Create FullText StopList statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateFullTextStopListStatement : TSqlStatement, IAuthorization
	{


		private Identifier _name;

		/// <summary>
		/// Represents the name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private bool _isSystemStopList;

		/// <summary>
		/// Specifies if the FROM clause is SYSTEM STOPLIST.
		/// </summary>
		public bool IsSystemStopList
		{
			get { return _isSystemStopList; }
			set { _isSystemStopList = value; }
		}
		private Identifier _databaseName;

		/// <summary>
		/// Database Name can be optional. This, combined with SourceStoplistName name can at most be a two part name.
		/// </summary>
		public Identifier DatabaseName
		{
			get { return _databaseName; }
			set { UpdateTokenInfo(value); _databaseName = value; }
		}
		private Identifier _sourceStopListName;

		/// <summary>
		/// Source StopList Name can be optional. This, combined with DatabaseName can at most be a two part name.
		/// </summary>
		public Identifier SourceStopListName
		{
			get { return _sourceStopListName; }
			set { UpdateTokenInfo(value); _sourceStopListName = value; }
		}
		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.DatabaseName != null)
			{
				this.DatabaseName.Accept(visitor);
			}

			if (this.SourceStopListName != null)
			{
				this.SourceStopListName.Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Alter Fulltext Stoplist statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterFullTextStopListStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Represents the name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private FullTextStopListAction _action;

		/// <summary>
		/// Represents the action in Alter Fulltext Stoplist statement.
		/// </summary>
		public FullTextStopListAction Action
		{
			get { return _action; }
			set { UpdateTokenInfo(value); _action = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Action != null)
			{
				this.Action.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the action in Alter Fulltext Stoplist Statement.
	/// </summary>
	[System.Serializable]
	public partial class FullTextStopListAction : TSqlFragment
	{


		private bool _isAdd;

		/// <summary>
		/// Represents ADD/DROP.
		/// </summary>
		public bool IsAdd
		{
			get { return _isAdd; }
			set { _isAdd = value; }
		}
		private bool _isAll;

		/// <summary>
		/// Specifies if there was an ALL or not in the DROP action.
		/// </summary>
		public bool IsAll
		{
			get { return _isAll; }
			set { _isAll = value; }
		}
		private Literal _stopWord;

		/// <summary>
		/// Represents the stopword.
		/// </summary>
		public Literal StopWord
		{
			get { return _stopWord; }
			set { UpdateTokenInfo(value); _stopWord = value; }
		}
		private IdentifierOrValueExpression _languageTerm;

		/// <summary>
		/// The language term, identifier or literal of type integer, string or hexadecimal. Optional may be null.
		/// </summary>
		public IdentifierOrValueExpression LanguageTerm
		{
			get { return _languageTerm; }
			set { UpdateTokenInfo(value); _languageTerm = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.StopWord != null)
			{
				this.StopWord.Accept(visitor);
			}

			if (this.LanguageTerm != null)
			{
				this.LanguageTerm.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Drop Fulltext Stoplist statement.
	/// </summary>
	[System.Serializable]
	public partial class DropFullTextStopListStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Create Cryptographic Provider statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateCryptographicProviderStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Represents the name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private Literal _file;

		/// <summary>
		/// Represents the cryptographic provider file.
		/// </summary>
		public Literal File
		{
			get { return _file; }
			set { UpdateTokenInfo(value); _file = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.File != null)
			{
				this.File.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Alter Cryptographic Provider statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterCryptographicProviderStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Represents the name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private EnableDisableOptionType _option;

		/// <summary>
		/// Represents the option type.
		/// </summary>
		public EnableDisableOptionType Option
		{
			get { return _option; }
			set { _option = value; }
		}
		private Literal _file;

		/// <summary>
		/// Represents the cryptographic provider file.
		/// </summary>
		public Literal File
		{
			get { return _file; }
			set { UpdateTokenInfo(value); _file = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.File != null)
			{
				this.File.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Drop Cryptographic Provider statement.
	/// </summary>
	[System.Serializable]
	public partial class DropCryptographicProviderStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents object names used in CREATE and ALTER EVENT SESSION statements.
	/// </summary>
	[System.Serializable]
	public partial class EventSessionObjectName : TSqlFragment
	{


		private MultiPartIdentifier _multiPartIdentifier;

		/// <summary>
		/// The multi-part name of the Event Session
		/// </summary>
		public MultiPartIdentifier MultiPartIdentifier
		{
			get { return _multiPartIdentifier; }
			set { UpdateTokenInfo(value); _multiPartIdentifier = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.MultiPartIdentifier != null)
			{
				this.MultiPartIdentifier.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the CREATE and ALTER EVENT SESSION statement.
	/// </summary>
	[System.Serializable]
	public partial class EventSessionStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Represents the name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private EventSessionScope _sessionScope;

		/// <summary>
		/// The scope of the session - database or server
		/// </summary>
		public EventSessionScope SessionScope
		{
			get { return _sessionScope; }
			set { _sessionScope = value; }
		}
		private List<EventDeclaration> _eventDeclarations = new List<EventDeclaration>();

		/// <summary>
		/// Represents the list of event declarations.
		/// </summary>
		public IList<EventDeclaration> EventDeclarations
		{
			get { return _eventDeclarations; }
		}

		private List<TargetDeclaration> _targetDeclarations = new List<TargetDeclaration>();

		/// <summary>
		/// Represents the list of target declarations.
		/// </summary>
		public IList<TargetDeclaration> TargetDeclarations
		{
			get { return _targetDeclarations; }
		}

		private List<SessionOption> _sessionOptions = new List<SessionOption>();

		/// <summary>
		/// Represents the list of event session options.
		/// </summary>
		public IList<SessionOption> SessionOptions
		{
			get { return _sessionOptions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.EventDeclarations.Count; i < count; ++i)
			{
				this.EventDeclarations[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.TargetDeclarations.Count; i < count; ++i)
			{
				this.TargetDeclarations[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.SessionOptions.Count; i < count; ++i)
			{
				this.SessionOptions[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Create Event Session statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateEventSessionStatement : EventSessionStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the event declaration
	/// </summary>
	[System.Serializable]
	public partial class EventDeclaration : TSqlFragment
	{


		private EventSessionObjectName _objectName;

		/// <summary>
		/// Represents the event object name.
		/// </summary>
		public EventSessionObjectName ObjectName
		{
			get { return _objectName; }
			set { UpdateTokenInfo(value); _objectName = value; }
		}
		private List<EventDeclarationSetParameter> _eventDeclarationSetParameters = new List<EventDeclarationSetParameter>();

		/// <summary>
		/// Represents event declaration parameter for SET clause.
		/// </summary>
		public IList<EventDeclarationSetParameter> EventDeclarationSetParameters
		{
			get { return _eventDeclarationSetParameters; }
		}

		private List<EventSessionObjectName> _eventDeclarationActionParameters = new List<EventSessionObjectName>();

		/// <summary>
		/// Represents event declaration parameter for ACTION clause.
		/// </summary>
		public IList<EventSessionObjectName> EventDeclarationActionParameters
		{
			get { return _eventDeclarationActionParameters; }
		}

		private BooleanExpression _eventDeclarationPredicateParameter;

		/// <summary>
		/// Represents event declaration parameter for WHERE clause.
		/// </summary>
		public BooleanExpression EventDeclarationPredicateParameter
		{
			get { return _eventDeclarationPredicateParameter; }
			set { UpdateTokenInfo(value); _eventDeclarationPredicateParameter = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ObjectName != null)
			{
				this.ObjectName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.EventDeclarationSetParameters.Count; i < count; ++i)
			{
				this.EventDeclarationSetParameters[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.EventDeclarationActionParameters.Count; i < count; ++i)
			{
				this.EventDeclarationActionParameters[i].Accept(visitor);
			}

			if (this.EventDeclarationPredicateParameter != null)
			{
				this.EventDeclarationPredicateParameter.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the event declaration set parameter
	/// </summary>
	[System.Serializable]
	public partial class EventDeclarationSetParameter : TSqlFragment
	{


		private Identifier _eventField;

		/// <summary>
		/// Represents event field in SET clause.
		/// </summary>
		public Identifier EventField
		{
			get { return _eventField; }
			set { UpdateTokenInfo(value); _eventField = value; }
		}
		private ScalarExpression _eventValue;

		/// <summary>
		/// Represents the event value in SET CLAUSE.
		/// </summary>
		public ScalarExpression EventValue
		{
			get { return _eventValue; }
			set { UpdateTokenInfo(value); _eventValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.EventField != null)
			{
				this.EventField.Accept(visitor);
			}

			if (this.EventValue != null)
			{
				this.EventValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents event source declaration name.
	/// </summary>
	[System.Serializable]
	public partial class SourceDeclaration : ScalarExpression
	{


		private EventSessionObjectName _value;

		/// <summary>
		/// Represents event source declaration name.
		/// </summary>
		public EventSessionObjectName Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the event declaration predicate parameter
	/// </summary>
	[System.Serializable]
	public partial class EventDeclarationCompareFunctionParameter : BooleanExpression
	{


		private EventSessionObjectName _name;

		/// <summary>
		/// Represents event compare function declaration name.
		/// </summary>
		public EventSessionObjectName Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private SourceDeclaration _sourceDeclaration;

		/// <summary>
		/// Represents event source declaration name.
		/// </summary>
		public SourceDeclaration SourceDeclaration
		{
			get { return _sourceDeclaration; }
			set { UpdateTokenInfo(value); _sourceDeclaration = value; }
		}
		private ScalarExpression _eventValue;

		/// <summary>
		/// Represents the event value in compare function declaration predicate.
		/// </summary>
		public ScalarExpression EventValue
		{
			get { return _eventValue; }
			set { UpdateTokenInfo(value); _eventValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.SourceDeclaration != null)
			{
				this.SourceDeclaration.Accept(visitor);
			}

			if (this.EventValue != null)
			{
				this.EventValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the target declaration
	/// </summary>
	[System.Serializable]
	public partial class TargetDeclaration : TSqlFragment
	{


		private EventSessionObjectName _objectName;

		/// <summary>
		/// Represents the target object name.
		/// </summary>
		public EventSessionObjectName ObjectName
		{
			get { return _objectName; }
			set { UpdateTokenInfo(value); _objectName = value; }
		}
		private List<EventDeclarationSetParameter> _targetDeclarationParameters = new List<EventDeclarationSetParameter>();

		/// <summary>
		/// Represents event declaration parameter (for SET clause).
		/// </summary>
		public IList<EventDeclarationSetParameter> TargetDeclarationParameters
		{
			get { return _targetDeclarationParameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ObjectName != null)
			{
				this.ObjectName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.TargetDeclarationParameters.Count; i < count; ++i)
			{
				this.TargetDeclarationParameters[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the event session option
	/// </summary>
	[System.Serializable]
	public abstract partial class SessionOption : TSqlFragment
	{


		private SessionOptionKind _optionKind;

		/// <summary>
		/// The session option kind.
		/// </summary>
		public SessionOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the EVENT_RETENTION_MODE session option
	/// </summary>
	[System.Serializable]
	public partial class EventRetentionSessionOption : SessionOption
	{


		private EventSessionEventRetentionModeType _value;

		/// <summary>
		/// Reperesents the event retention values.
		/// </summary>
		public EventSessionEventRetentionModeType Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the MEMORY_PARTITION_MODE session option
	/// </summary>
	[System.Serializable]
	public partial class MemoryPartitionSessionOption : SessionOption
	{


		private EventSessionMemoryPartitionModeType _value;

		/// <summary>
		/// Reperesents the memory partition values.
		/// </summary>
		public EventSessionMemoryPartitionModeType Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the MAX_MEMORY event session option
	/// </summary>
	[System.Serializable]
	public partial class LiteralSessionOption : SessionOption
	{


		private Literal _value;

		/// <summary>
		/// Reperesents the session option value.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}
		private MemoryUnit _unit;

		/// <summary>
		/// Represents session option unit.
		/// </summary>
		public MemoryUnit Unit
		{
			get { return _unit; }
			set { _unit = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the MAX_DISPATCH_LATENCY event session option
	/// </summary>
	[System.Serializable]
	public partial class MaxDispatchLatencySessionOption : SessionOption
	{


		private bool _isInfinite;

		/// <summary>
		/// Reperesents the session option value is INFINITE or not.
		/// </summary>
		public bool IsInfinite
		{
			get { return _isInfinite; }
			set { _isInfinite = value; }
		}
		private Literal _value;

		/// <summary>
		/// Reperesents the session option value.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the TRACK_CAUSALITY and STARTUP_STATE event session option
	/// </summary>
	[System.Serializable]
	public partial class OnOffSessionOption : SessionOption
	{


		private OptionState _optionState;

		/// <summary>
		/// Represents session option value for TRACK_CAUSALITY and STARTUP_STATE options.
		/// </summary>
		public OptionState OptionState
		{
			get { return _optionState; }
			set { _optionState = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Alter Event Session statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterEventSessionStatement : EventSessionStatement
	{


		private AlterEventSessionStatementType _statementType;

		/// <summary>
		/// Represents the type of Alter Event Session Statement.
		/// </summary>
		public AlterEventSessionStatementType StatementType
		{
			get { return _statementType; }
			set { _statementType = value; }
		}
		private List<EventSessionObjectName> _dropEventDeclarations = new List<EventSessionObjectName>();

		/// <summary>
		/// Represents the list of drop event declarations.
		/// </summary>
		public IList<EventSessionObjectName> DropEventDeclarations
		{
			get { return _dropEventDeclarations; }
		}

		private List<EventSessionObjectName> _dropTargetDeclarations = new List<EventSessionObjectName>();

		/// <summary>
		/// Represents the list of drop target declarations.
		/// </summary>
		public IList<EventSessionObjectName> DropTargetDeclarations
		{
			get { return _dropTargetDeclarations; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.DropEventDeclarations.Count; i < count; ++i)
			{
				this.DropEventDeclarations[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.DropTargetDeclarations.Count; i < count; ++i)
			{
				this.DropTargetDeclarations[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the Drop Event Session statement.
	/// </summary>
	[System.Serializable]
	public partial class DropEventSessionStatement : DropUnownedObjectStatement
	{


		private EventSessionScope _sessionScope;

		/// <summary>
		/// The scope of the session - database or server
		/// </summary>
		public EventSessionScope SessionScope
		{
			get { return _sessionScope; }
			set { _sessionScope = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Alter Resource Governor Statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterResourceGovernorStatement : TSqlStatement
	{


		private AlterResourceGovernorCommandType _command;

		/// <summary>
		/// Represents the command.
		/// </summary>
		public AlterResourceGovernorCommandType Command
		{
			get { return _command; }
			set { _command = value; }
		}
		private SchemaObjectName _classifierFunction;

		/// <summary>
		/// Represents the classification function specified by schema_name.function_name.
		/// </summary>
		public SchemaObjectName ClassifierFunction
		{
			get { return _classifierFunction; }
			set { UpdateTokenInfo(value); _classifierFunction = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ClassifierFunction != null)
			{
				this.ClassifierFunction.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the Create Spatial Index statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateSpatialIndexStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// Represents the name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private SchemaObjectName _object;

		/// <summary>
		/// Represents the object.
		/// </summary>
		public SchemaObjectName Object
		{
			get { return _object; }
			set { UpdateTokenInfo(value); _object = value; }
		}
		private Identifier _spatialColumnName;

		/// <summary>
		/// Represents the spatial column name.
		/// </summary>
		public Identifier SpatialColumnName
		{
			get { return _spatialColumnName; }
			set { UpdateTokenInfo(value); _spatialColumnName = value; }
		}
		private SpatialIndexingSchemeType _spatialIndexingScheme;

		/// <summary>
		/// Represents the spatial index scheme.
		/// </summary>
		public SpatialIndexingSchemeType SpatialIndexingScheme
		{
			get { return _spatialIndexingScheme; }
			set { _spatialIndexingScheme = value; }
		}
		private List<SpatialIndexOption> _spatialIndexOptions = new List<SpatialIndexOption>();

		/// <summary>
		/// Represents the list of spatial index parameters.
		/// </summary>
		public IList<SpatialIndexOption> SpatialIndexOptions
		{
			get { return _spatialIndexOptions; }
		}

		private IdentifierOrValueExpression _onFileGroup;

		/// <summary>
		/// The name of the filegroup, can be a Literal of type string or an Identifier. Optional may be null.
		/// </summary>
		public IdentifierOrValueExpression OnFileGroup
		{
			get { return _onFileGroup; }
			set { UpdateTokenInfo(value); _onFileGroup = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Object != null)
			{
				this.Object.Accept(visitor);
			}

			if (this.SpatialColumnName != null)
			{
				this.SpatialColumnName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.SpatialIndexOptions.Count; i < count; ++i)
			{
				this.SpatialIndexOptions[i].Accept(visitor);
			}

			if (this.OnFileGroup != null)
			{
				this.OnFileGroup.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the spatial index option.
	/// </summary>
	[System.Serializable]
	public abstract partial class SpatialIndexOption : TSqlFragment
	{




		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Specifies the spatial index regular options.
	/// </summary>
	[System.Serializable]
	public partial class SpatialIndexRegularOption : SpatialIndexOption
	{


		private IndexOption _option;

		/// <summary>
		/// The type of the option.
		/// </summary>
		public IndexOption Option
		{
			get { return _option; }
			set { UpdateTokenInfo(value); _option = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Option != null)
			{
				this.Option.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the BOUNDING_BOX spatial index option.
	/// </summary>
	[System.Serializable]
	public partial class BoundingBoxSpatialIndexOption : SpatialIndexOption
	{


		private List<BoundingBoxParameter> _boundingBoxParameters = new List<BoundingBoxParameter>();

		/// <summary>
		/// Represents the parameters for BOUNDING_BOX spatial index option.
		/// </summary>
		public IList<BoundingBoxParameter> BoundingBoxParameters
		{
			get { return _boundingBoxParameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.BoundingBoxParameters.Count; i < count; ++i)
			{
				this.BoundingBoxParameters[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the spatial index structured parameter by name.
	/// </summary>
	[System.Serializable]
	public partial class BoundingBoxParameter : TSqlFragment
	{


		private BoundingBoxParameterType _parameter;

		/// <summary>
		/// Represents the spatial index structured parameter by name spatial index option BOUNDING_BOX.
		/// </summary>
		public BoundingBoxParameterType Parameter
		{
			get { return _parameter; }
			set { _parameter = value; }
		}
		private ScalarExpression _value;

		/// <summary>
		/// Specifies a numeric four-tuple that defines the four coordinates of the bounding box: the x-min and y-min coordinates of the lower, left corner, and the x-max and y-max coordinates of the upper right corner.
		/// </summary>
		public ScalarExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the GRIDS spatial index option.
	/// </summary>
	[System.Serializable]
	public partial class GridsSpatialIndexOption : SpatialIndexOption
	{


		private List<GridParameter> _gridParameters = new List<GridParameter>();

		/// <summary>
		/// Represents the parameters for GRIDS spatial index option.
		/// </summary>
		public IList<GridParameter> GridParameters
		{
			get { return _gridParameters; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.GridParameters.Count; i < count; ++i)
			{
				this.GridParameters[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the spatial index structured parameter for GRIDS option.
	/// </summary>
	[System.Serializable]
	public partial class GridParameter : TSqlFragment
	{


		private GridParameterType _parameter;

		/// <summary>
		/// Represents the spatial index structured parameter by name spatial index option GRIDS.
		/// </summary>
		public GridParameterType Parameter
		{
			get { return _parameter; }
			set { _parameter = value; }
		}
		private ImportanceParameterType _value;

		/// <summary>
		/// Represents the spatial index structured parameter by ordinates value for spatial index option GRIDS.
		/// </summary>
		public ImportanceParameterType Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the CELLS_PER_OBJECT spatial index option.
	/// </summary>
	[System.Serializable]
	public partial class CellsPerObjectSpatialIndexOption : SpatialIndexOption
	{


		private Literal _value;

		/// <summary>
		/// Specifies the number of tessellation cells per object that can be used for a single spatial object in the index by the tessellation process.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER SERVER CONFIGURATION statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationStatement : TSqlStatement
	{


		private ProcessAffinityType _processAffinity;

		/// <summary>
		/// Affinity type.
		/// </summary>
		public ProcessAffinityType ProcessAffinity
		{
			get { return _processAffinity; }
			set { _processAffinity = value; }
		}
		private List<ProcessAffinityRange> _processAffinityRanges = new List<ProcessAffinityRange>();

		/// <summary>
		/// Process affinity ranges in case of NUMA node or non-auto CPU affinity. Empty in case of auto CPU affinity.
		/// </summary>
		public IList<ProcessAffinityRange> ProcessAffinityRanges
		{
			get { return _processAffinityRanges; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.ProcessAffinityRanges.Count; i < count; ++i)
			{
				this.ProcessAffinityRanges[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single process affinity range in ALTER SERVER CONFIGURATION statement.
	/// </summary>
	[System.Serializable]
	public partial class ProcessAffinityRange : LiteralRange
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER SERVER CONFIGURATION SET EXTERNAL AUTHENTICATION statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationSetExternalAuthenticationStatement : TSqlStatement
	{


		private List<AlterServerConfigurationExternalAuthenticationOption> _options = new List<AlterServerConfigurationExternalAuthenticationOption>();

		/// <summary>
		/// Options specified in this statement
		/// </summary>
		public IList<AlterServerConfigurationExternalAuthenticationOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single ALTER SERVER CONFIGURATION SET EXTERNAL AUTHENTICATION option.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationExternalAuthenticationOption : TSqlFragment
	{


		private AlterServerConfigurationExternalAuthenticationOptionKind _optionKind;

		/// <summary>
		/// The kind of option specified.
		/// </summary>
		public AlterServerConfigurationExternalAuthenticationOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private OptionValue _optionValue;

		/// <summary>
		/// Represents the value specified for this option.
		/// </summary>
		public OptionValue OptionValue
		{
			get { return _optionValue; }
			set { UpdateTokenInfo(value); _optionValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OptionValue != null)
			{
				this.OptionValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single ALTER SERVER CONFIGURATION SET EXTERNAL AUTHENTICATION top level setting that can have a list of suboptions.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationExternalAuthenticationContainerOption : AlterServerConfigurationExternalAuthenticationOption
	{


		private List<AlterServerConfigurationExternalAuthenticationOption> _suboptions = new List<AlterServerConfigurationExternalAuthenticationOption>();

		/// <summary>
		/// The suboption specified.
		/// </summary>
		public IList<AlterServerConfigurationExternalAuthenticationOption> Suboptions
		{
			get { return _suboptions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Suboptions.Count; i < count; ++i)
			{
				this.Suboptions[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents ALTER SERVER CONFIGURATION SET BUFFER POOL EXTENSION statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationSetBufferPoolExtensionStatement : TSqlStatement
	{


		private List<AlterServerConfigurationBufferPoolExtensionOption> _options = new List<AlterServerConfigurationBufferPoolExtensionOption>();

		/// <summary>
		/// Options specified in this statement
		/// </summary>
		public IList<AlterServerConfigurationBufferPoolExtensionOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single ALTER SERVER CONFIGURATION SET BUFFER POOL EXTENSION option.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationBufferPoolExtensionOption : TSqlFragment
	{


		private AlterServerConfigurationBufferPoolExtensionOptionKind _optionKind;

		/// <summary>
		/// The kind of option specified.
		/// </summary>
		public AlterServerConfigurationBufferPoolExtensionOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private OptionValue _optionValue;

		/// <summary>
		/// Represents the value specified for this option.
		/// </summary>
		public OptionValue OptionValue
		{
			get { return _optionValue; }
			set { UpdateTokenInfo(value); _optionValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OptionValue != null)
			{
				this.OptionValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single ALTER SERVER CONFIGURATION SET BUFFER POOL EXTENSION top level setting that can have a list of suboptions.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationBufferPoolExtensionContainerOption : AlterServerConfigurationBufferPoolExtensionOption
	{


		private List<AlterServerConfigurationBufferPoolExtensionOption> _suboptions = new List<AlterServerConfigurationBufferPoolExtensionOption>();

		/// <summary>
		/// The list of suboptions specified.
		/// </summary>
		public IList<AlterServerConfigurationBufferPoolExtensionOption> Suboptions
		{
			get { return _suboptions; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Suboptions.Count; i < count; ++i)
			{
				this.Suboptions[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the SIZE option for the BUFFER POOL EXTENSION.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationBufferPoolExtensionSizeOption : AlterServerConfigurationBufferPoolExtensionOption
	{


		private MemoryUnit _sizeUnit;

		/// <summary>
		/// The units for the paging file size, either KB, MB, GB.
		/// </summary>
		public MemoryUnit SizeUnit
		{
			get { return _sizeUnit; }
			set { _sizeUnit = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER SERVER CONFIGURATION SET DIAGNOSTICS LOG statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationSetDiagnosticsLogStatement : TSqlStatement
	{


		private List<AlterServerConfigurationDiagnosticsLogOption> _options = new List<AlterServerConfigurationDiagnosticsLogOption>();

		/// <summary>
		/// Options specified in this statement
		/// </summary>
		public IList<AlterServerConfigurationDiagnosticsLogOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single ALTER SERVER CONFIGURATION SET DIAGNOSTICS LOG option.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationDiagnosticsLogOption : TSqlFragment
	{


		private AlterServerConfigurationDiagnosticsLogOptionKind _optionKind;

		/// <summary>
		/// The kind of option specified.
		/// </summary>
		public AlterServerConfigurationDiagnosticsLogOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private OptionValue _optionValue;

		/// <summary>
		/// Represents the value specified for this option.
		/// </summary>
		public OptionValue OptionValue
		{
			get { return _optionValue; }
			set { UpdateTokenInfo(value); _optionValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OptionValue != null)
			{
				this.OptionValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single ALTER SERVER CONFIGURATION SET DIAGNOSTICS LOG MAX_SIZE option.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationDiagnosticsLogMaxSizeOption : AlterServerConfigurationDiagnosticsLogOption
	{


		private MemoryUnit _sizeUnit;

		/// <summary>
		/// The units for the paging file size, in MB.
		/// </summary>
		public MemoryUnit SizeUnit
		{
			get { return _sizeUnit; }
			set { _sizeUnit = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER SERVER CONFIGURATION SET FAILOVER CLUSTER PROPERTY statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationSetFailoverClusterPropertyStatement : TSqlStatement
	{


		private List<AlterServerConfigurationFailoverClusterPropertyOption> _options = new List<AlterServerConfigurationFailoverClusterPropertyOption>();

		/// <summary>
		/// Options specified in this statement
		/// </summary>
		public IList<AlterServerConfigurationFailoverClusterPropertyOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single ALTER SERVER CONFIGURATION SET FAILOVER CLUSTER PROPERTY option.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationFailoverClusterPropertyOption : TSqlFragment
	{


		private AlterServerConfigurationFailoverClusterPropertyOptionKind _optionKind;

		/// <summary>
		/// The kind of option specified.
		/// </summary>
		public AlterServerConfigurationFailoverClusterPropertyOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private OptionValue _optionValue;

		/// <summary>
		/// Represents the value specified for this option.
		/// </summary>
		public OptionValue OptionValue
		{
			get { return _optionValue; }
			set { UpdateTokenInfo(value); _optionValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OptionValue != null)
			{
				this.OptionValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER SERVER CONFIGURATION SET HADR CLUSTER statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationSetHadrClusterStatement : TSqlStatement
	{


		private List<AlterServerConfigurationHadrClusterOption> _options = new List<AlterServerConfigurationHadrClusterOption>();

		/// <summary>
		/// Options specified in this statement
		/// </summary>
		public IList<AlterServerConfigurationHadrClusterOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single ALTER SERVER CONFIGURATION SET HADR CLUSTER option.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationHadrClusterOption : TSqlFragment
	{


		private AlterServerConfigurationHadrClusterOptionKind _optionKind;

		/// <summary>
		/// The kind of option specified.
		/// </summary>
		public AlterServerConfigurationHadrClusterOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private OptionValue _optionValue;

		/// <summary>
		/// Represents the value specified for this option.
		/// </summary>
		public OptionValue OptionValue
		{
			get { return _optionValue; }
			set { UpdateTokenInfo(value); _optionValue = value; }
		}
		private bool _isLocal;

		/// <summary>
		/// Represents whether the option value is LOCAL or not.
		/// </summary>
		public bool IsLocal
		{
			get { return _isLocal; }
			set { _isLocal = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OptionValue != null)
			{
				this.OptionValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents ALTER SERVER CONFIGURATION SET SOFTNUMA statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationSetSoftNumaStatement : TSqlStatement
	{


		private List<AlterServerConfigurationSoftNumaOption> _options = new List<AlterServerConfigurationSoftNumaOption>();

		/// <summary>
		/// Options specified in this statement
		/// </summary>
		public IList<AlterServerConfigurationSoftNumaOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a single ALTER SERVER CONFIGURATION SET SOFTNUMA option.
	/// </summary>
	[System.Serializable]
	public partial class AlterServerConfigurationSoftNumaOption : TSqlFragment
	{


		private AlterServerConfigurationSoftNumaOptionKind _optionKind;

		/// <summary>
		/// The kind of option specified.
		/// </summary>
		public AlterServerConfigurationSoftNumaOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private OptionValue _optionValue;

		/// <summary>
		/// Represents the value specified for this option.
		/// </summary>
		public OptionValue OptionValue
		{
			get { return _optionValue; }
			set { UpdateTokenInfo(value); _optionValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OptionValue != null)
			{
				this.OptionValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base for availability group statements
	/// </summary>
	[System.Serializable]
	public abstract partial class AvailabilityGroupStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The availability group name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<AvailabilityGroupOption> _options = new List<AvailabilityGroupOption>();

		/// <summary>
		/// The collection of availability group options.
		/// </summary>
		public IList<AvailabilityGroupOption> Options
		{
			get { return _options; }
		}

		private List<Identifier> _databases = new List<Identifier>();

		/// <summary>
		/// The collection of databases.
		/// </summary>
		public IList<Identifier> Databases
		{
			get { return _databases; }
		}

		private List<AvailabilityReplica> _replicas = new List<AvailabilityReplica>();

		/// <summary>
		/// The collection of replicas.
		/// </summary>
		public IList<AvailabilityReplica> Replicas
		{
			get { return _replicas; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.Databases.Count; i < count; ++i)
			{
				this.Databases[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.Replicas.Count; i < count; ++i)
			{
				this.Replicas[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the CREATE AVAILABILITY GROUP statement
	/// </summary>
	[System.Serializable]
	public partial class CreateAvailabilityGroupStatement : AvailabilityGroupStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the ALTER AVAILABILITY GROUP statement
	/// </summary>
	[System.Serializable]
	public partial class AlterAvailabilityGroupStatement : AvailabilityGroupStatement
	{


		private AlterAvailabilityGroupStatementType _alterAvailabilityGroupStatementType;

		/// <summary>
		/// The type of the ALTER AVAILABILITY GROUP statement.
		/// </summary>
		public AlterAvailabilityGroupStatementType AlterAvailabilityGroupStatementType
		{
			get { return _alterAvailabilityGroupStatementType; }
			set { _alterAvailabilityGroupStatementType = value; }
		}
		private AlterAvailabilityGroupAction _action;

		/// <summary>
		/// The action to take.
		/// </summary>
		public AlterAvailabilityGroupAction Action
		{
			get { return _action; }
			set { UpdateTokenInfo(value); _action = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Action != null)
			{
				this.Action.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// The declaration of an availability replica.
	/// </summary>
	[System.Serializable]
	public partial class AvailabilityReplica : TSqlFragment
	{


		private StringLiteral _serverName;

		/// <summary>
		/// The server name.
		/// </summary>
		public StringLiteral ServerName
		{
			get { return _serverName; }
			set { UpdateTokenInfo(value); _serverName = value; }
		}
		private List<AvailabilityReplicaOption> _options = new List<AvailabilityReplicaOption>();

		/// <summary>
		/// The collection of replica options.
		/// </summary>
		public IList<AvailabilityReplicaOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.ServerName != null)
			{
				this.ServerName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents an availability replica option.
	/// </summary>
	[System.Serializable]
	public abstract partial class AvailabilityReplicaOption : TSqlFragment
	{


		private AvailabilityReplicaOptionKind _optionKind;

		/// <summary>
		/// The type of availability replica option
		/// </summary>
		public AvailabilityReplicaOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents a replica option with a literal value.
	/// </summary>
	[System.Serializable]
	public partial class LiteralReplicaOption : AvailabilityReplicaOption
	{


		private Literal _value;

		/// <summary>
		/// The literal value.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the replica option for availability mode.
	/// </summary>
	[System.Serializable]
	public partial class AvailabilityModeReplicaOption : AvailabilityReplicaOption
	{


		private AvailabilityModeOptionKind _value;

		/// <summary>
		/// The availability mode value.
		/// </summary>
		public AvailabilityModeOptionKind Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the replica option for failover mode.
	/// </summary>
	[System.Serializable]
	public partial class FailoverModeReplicaOption : AvailabilityReplicaOption
	{


		private FailoverModeOptionKind _value;

		/// <summary>
		/// The failover mode value.
		/// </summary>
		public FailoverModeOptionKind Value
		{
			get { return _value; }
			set { _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the replica option for primary role.
	/// </summary>
	[System.Serializable]
	public partial class PrimaryRoleReplicaOption : AvailabilityReplicaOption
	{


		private AllowConnectionsOptionKind _allowConnections;

		/// <summary>
		/// The allow read value.
		/// </summary>
		public AllowConnectionsOptionKind AllowConnections
		{
			get { return _allowConnections; }
			set { _allowConnections = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the replica option for secondary role.
	/// </summary>
	[System.Serializable]
	public partial class SecondaryRoleReplicaOption : AvailabilityReplicaOption
	{


		private AllowConnectionsOptionKind _allowConnections;

		/// <summary>
		/// The allow read value.
		/// </summary>
		public AllowConnectionsOptionKind AllowConnections
		{
			get { return _allowConnections; }
			set { _allowConnections = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base for availability group options.
	/// </summary>
	[System.Serializable]
	public abstract partial class AvailabilityGroupOption : TSqlFragment
	{


		private AvailabilityGroupOptionKind _optionKind;

		/// <summary>
		/// The type of the availability group option.
		/// </summary>
		public AvailabilityGroupOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}


		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Availability group option with a literal value.
	/// </summary>
	[System.Serializable]
	public partial class LiteralAvailabilityGroupOption : AvailabilityGroupOption
	{


		private Literal _value;

		/// <summary>
		/// The option value.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Action to take for alter availability group.
	/// </summary>
	[System.Serializable]
	public partial class AlterAvailabilityGroupAction : TSqlFragment
	{


		private AlterAvailabilityGroupActionType _actionType;

		/// <summary>
		/// The action type.
		/// </summary>
		public AlterAvailabilityGroupActionType ActionType
		{
			get { return _actionType; }
			set { _actionType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the failover action to take for alter availability group.
	/// </summary>
	[System.Serializable]
	public partial class AlterAvailabilityGroupFailoverAction : AlterAvailabilityGroupAction
	{


		private List<AlterAvailabilityGroupFailoverOption> _options = new List<AlterAvailabilityGroupFailoverOption>();

		/// <summary>
		/// The collection of failover options
		/// </summary>
		public IList<AlterAvailabilityGroupFailoverOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a failover option.
	/// </summary>
	[System.Serializable]
	public partial class AlterAvailabilityGroupFailoverOption : TSqlFragment
	{


		private FailoverActionOptionKind _optionKind;

		/// <summary>
		/// The failover action option kind.
		/// </summary>
		public FailoverActionOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private Literal _value;

		/// <summary>
		/// The value.
		/// </summary>
		public Literal Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the DROP AVAILABILITY GROUP statement.
	/// </summary>
	[System.Serializable]
	public partial class DropAvailabilityGroupStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the CREATE FEDERATION statement
	/// </summary>
	[System.Serializable]
	public partial class CreateFederationStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The federation name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private Identifier _distributionName;

		/// <summary>
		/// The distribution name.
		/// </summary>
		public Identifier DistributionName
		{
			get { return _distributionName; }
			set { UpdateTokenInfo(value); _distributionName = value; }
		}
		private DataTypeReference _dataType;

		/// <summary>
		/// The data type of the distribution.
		/// </summary>
		public DataTypeReference DataType
		{
			get { return _dataType; }
			set { UpdateTokenInfo(value); _dataType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.DistributionName != null)
			{
				this.DistributionName.Accept(visitor);
			}

			if (this.DataType != null)
			{
				this.DataType.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the ALTER FEDERATION statement
	/// </summary>
	[System.Serializable]
	public partial class AlterFederationStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The federation name.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private AlterFederationKind _kind;

		/// <summary>
		/// The kind of alter to do.
		/// </summary>
		public AlterFederationKind Kind
		{
			get { return _kind; }
			set { _kind = value; }
		}
		private Identifier _distributionName;

		/// <summary>
		/// The distribution name.
		/// </summary>
		public Identifier DistributionName
		{
			get { return _distributionName; }
			set { UpdateTokenInfo(value); _distributionName = value; }
		}
		private ScalarExpression _boundary;

		/// <summary>
		/// The boundary value.
		/// </summary>
		public ScalarExpression Boundary
		{
			get { return _boundary; }
			set { UpdateTokenInfo(value); _boundary = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.DistributionName != null)
			{
				this.DistributionName.Accept(visitor);
			}

			if (this.Boundary != null)
			{
				this.Boundary.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the DROP FEDERATION statement.
	/// </summary>
	[System.Serializable]
	public partial class DropFederationStatement : DropUnownedObjectStatement
	{



		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the USE FEDERATION statement
	/// </summary>
	[System.Serializable]
	public partial class UseFederationStatement : TSqlStatement
	{


		private Identifier _federationName;

		/// <summary>
		/// The federation name to use. Can be null.
		/// </summary>
		public Identifier FederationName
		{
			get { return _federationName; }
			set { UpdateTokenInfo(value); _federationName = value; }
		}
		private Identifier _distributionName;

		/// <summary>
		/// The distribution name in the federation. Can be null.
		/// </summary>
		public Identifier DistributionName
		{
			get { return _distributionName; }
			set { UpdateTokenInfo(value); _distributionName = value; }
		}
		private ScalarExpression _value;

		/// <summary>
		/// The value in the distribution to use. Can be null.
		/// </summary>
		public ScalarExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}
		private bool _filtering;

		/// <summary>
		/// Whether the connection should be filtered.
		/// </summary>
		public bool Filtering
		{
			get { return _filtering; }
			set { _filtering = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.FederationName != null)
			{
				this.FederationName.Accept(visitor);
			}

			if (this.DistributionName != null)
			{
				this.DistributionName.Accept(visitor);
			}

			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the DISK statement.
	/// </summary>
	[System.Serializable]
	public partial class DiskStatement : TSqlStatement
	{


		private DiskStatementType _diskStatementType;

		/// <summary>
		/// The disk statement type.
		/// </summary>
		public DiskStatementType DiskStatementType
		{
			get { return _diskStatementType; }
			set { _diskStatementType = value; }
		}
		private List<DiskStatementOption> _options = new List<DiskStatementOption>();

		/// <summary>
		/// The disk statement options.
		/// </summary>
		public IList<DiskStatementOption> Options
		{
			get { return _options; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			for (Int32 i = 0, count = this.Options.Count; i < count; ++i)
			{
				this.Options[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents disk statement option.
	/// </summary>
	[System.Serializable]
	public partial class DiskStatementOption : TSqlFragment
	{


		private DiskStatementOptionKind _optionKind;

		/// <summary>
		/// The disk statement option kind.
		/// </summary>
		public DiskStatementOptionKind OptionKind
		{
			get { return _optionKind; }
			set { _optionKind = value; }
		}
		private IdentifierOrValueExpression _value;

		/// <summary>
		/// The option value.
		/// </summary>
		public IdentifierOrValueExpression Value
		{
			get { return _value; }
			set { UpdateTokenInfo(value); _value = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Value != null)
			{
				this.Value.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the create column store index statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateColumnStoreIndexStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the index.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private bool? _clustered;

		/// <summary>
		/// Shows if Clustered keyword is used.
		/// </summary>
		public bool? Clustered
		{
			get { return _clustered; }
			set { _clustered = value; }
		}
		private SchemaObjectName _onName;

		/// <summary>
		/// The table or view name that comes after the ON keyword.
		/// </summary>
		public SchemaObjectName OnName
		{
			get { return _onName; }
			set { UpdateTokenInfo(value); _onName = value; }
		}
		private List<ColumnReferenceExpression> _columns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// The defined index columns.
		/// </summary>
		public IList<ColumnReferenceExpression> Columns
		{
			get { return _columns; }
		}

		private BooleanExpression _filterPredicate;

		/// <summary>
		/// Optional filter predicate for index.
		/// </summary>
		public BooleanExpression FilterPredicate
		{
			get { return _filterPredicate; }
			set { UpdateTokenInfo(value); _filterPredicate = value; }
		}
		private List<IndexOption> _indexOptions = new List<IndexOption>();

		/// <summary>
		/// The index options. Optional may have zero elements.
		/// </summary>
		public IList<IndexOption> IndexOptions
		{
			get { return _indexOptions; }
		}

		private FileGroupOrPartitionScheme _onFileGroupOrPartitionScheme;

		/// <summary>
		/// The filegroup or partition scheme. Might be null.
		/// </summary>
		public FileGroupOrPartitionScheme OnFileGroupOrPartitionScheme
		{
			get { return _onFileGroupOrPartitionScheme; }
			set { UpdateTokenInfo(value); _onFileGroupOrPartitionScheme = value; }
		}
		private List<ColumnReferenceExpression> _orderedColumns = new List<ColumnReferenceExpression>();

		/// <summary>
		/// The columns which ordered columnstore indexes should be ordered on.
		/// </summary>
		public IList<ColumnReferenceExpression> OrderedColumns
		{
			get { return _orderedColumns; }
		}


		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.OnName != null)
			{
				this.OnName.Accept(visitor);
			}

			for (Int32 i = 0, count = this.Columns.Count; i < count; ++i)
			{
				this.Columns[i].Accept(visitor);
			}

			if (this.FilterPredicate != null)
			{
				this.FilterPredicate.Accept(visitor);
			}

			for (Int32 i = 0, count = this.IndexOptions.Count; i < count; ++i)
			{
				this.IndexOptions[i].Accept(visitor);
			}

			if (this.OnFileGroupOrPartitionScheme != null)
			{
				this.OnFileGroupOrPartitionScheme.Accept(visitor);
			}

			for (Int32 i = 0, count = this.OrderedColumns.Count; i < count; ++i)
			{
				this.OrderedColumns[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the create JSON index statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateJsonIndexStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the index.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private SchemaObjectName _onName;

		/// <summary>
		/// The table or view name that comes after the ON keyword.
		/// </summary>
		public SchemaObjectName OnName
		{
			get { return _onName; }
			set { UpdateTokenInfo(value); _onName = value; }
		}
		private ColumnReferenceExpression _jsonColumn;

		/// <summary>
		/// The JSON column for the index.
		/// </summary>
		public ColumnReferenceExpression JsonColumn
		{
			get { return _jsonColumn; }
			set { UpdateTokenInfo(value); _jsonColumn = value; }
		}
		private List<StringLiteral> _jsonPaths = new List<StringLiteral>();

		/// <summary>
		/// The JSON paths specified in the FOR clause. Optional may have zero elements.
		/// </summary>
		public IList<StringLiteral> JsonPaths
		{
			get { return _jsonPaths; }
		}

		private List<IndexOption> _indexOptions = new List<IndexOption>();

		/// <summary>
		/// The index options. Optional may have zero elements.
		/// </summary>
		public IList<IndexOption> IndexOptions
		{
			get { return _indexOptions; }
		}

		private FileGroupOrPartitionScheme _onFileGroupOrPartitionScheme;

		/// <summary>
		/// The filegroup or partition scheme. Might be null.
		/// </summary>
		public FileGroupOrPartitionScheme OnFileGroupOrPartitionScheme
		{
			get { return _onFileGroupOrPartitionScheme; }
			set { UpdateTokenInfo(value); _onFileGroupOrPartitionScheme = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.OnName != null)
			{
				this.OnName.Accept(visitor);
			}

			if (this.JsonColumn != null)
			{
				this.JsonColumn.Accept(visitor);
			}

			for (Int32 i = 0, count = this.JsonPaths.Count; i < count; ++i)
			{
				this.JsonPaths[i].Accept(visitor);
			}

			for (Int32 i = 0, count = this.IndexOptions.Count; i < count; ++i)
			{
				this.IndexOptions[i].Accept(visitor);
			}

			if (this.OnFileGroupOrPartitionScheme != null)
			{
				this.OnFileGroupOrPartitionScheme.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the specification of window bounds for windowing aggregates.
	/// </summary>
	[System.Serializable]
	public partial class WindowFrameClause : TSqlFragment
	{


		private WindowDelimiter _top;

		/// <summary>
		/// Top boundary of the window.
		/// </summary>
		public WindowDelimiter Top
		{
			get { return _top; }
			set { UpdateTokenInfo(value); _top = value; }
		}
		private WindowDelimiter _bottom;

		/// <summary>
		/// Bottom boundary of the window. Optional may be null.
		/// </summary>
		public WindowDelimiter Bottom
		{
			get { return _bottom; }
			set { UpdateTokenInfo(value); _bottom = value; }
		}
		private WindowFrameType _windowFrameType;

		/// <summary>
		/// Type of the window frame. Specifies whether ROWS or RANGE units are used.
		/// </summary>
		public WindowFrameType WindowFrameType
		{
			get { return _windowFrameType; }
			set { _windowFrameType = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Top != null)
			{
				this.Top.Accept(visitor);
			}

			if (this.Bottom != null)
			{
				this.Bottom.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents specification of a window boundary.
	/// </summary>
	[System.Serializable]
	public partial class WindowDelimiter : TSqlFragment
	{


		private WindowDelimiterType _windowDelimiterType;

		/// <summary>
		/// type of a window boundary
		/// </summary>
		public WindowDelimiterType WindowDelimiterType
		{
			get { return _windowDelimiterType; }
			set { _windowDelimiterType = value; }
		}
		private ScalarExpression _offsetValue;

		/// <summary>
		/// Offset of a window frame from the current row. Can be NULL if Unbounded Preceding/Following or Current Row delimiter is used.
		/// </summary>
		public ScalarExpression OffsetValue
		{
			get { return _offsetValue; }
			set { UpdateTokenInfo(value); _offsetValue = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OffsetValue != null)
			{
				this.OffsetValue.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the within group clause.
	/// </summary>
	[System.Serializable]
	public partial class WithinGroupClause : TSqlFragment
	{


		private OrderByClause _orderByClause;

		/// <summary>
		/// The order by clause. Optional may be null.
		/// </summary>
		public OrderByClause OrderByClause
		{
			get { return _orderByClause; }
			set { UpdateTokenInfo(value); _orderByClause = value; }
		}
		private bool _hasGraphPath;

		/// <summary>
		/// Indicates where the Group clause has GraphPath
		/// </summary>
		public bool HasGraphPath
		{
			get { return _hasGraphPath; }
			set { _hasGraphPath = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.OrderByClause != null)
			{
				this.OrderByClause.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents xml path specified in CreateSelectiveXmlIndex statement
	/// </summary>
	[System.Serializable]
	public partial class SelectiveXmlIndexPromotedPath : TSqlFragment
	{


		private Identifier _name;

		/// <summary>
		/// Promoted path name
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private Literal _path;

		/// <summary>
		/// Represents specified xml path
		/// </summary>
		public Literal Path
		{
			get { return _path; }
			set { UpdateTokenInfo(value); _path = value; }
		}
		private DataTypeReference _sQLDataType;

		/// <summary>
		/// Datatype if path is declared as SQL Type
		/// </summary>
		public DataTypeReference SQLDataType
		{
			get { return _sQLDataType; }
			set { UpdateTokenInfo(value); _sQLDataType = value; }
		}
		private Literal _xQueryDataType;

		/// <summary>
		/// XSD Datatype if path is declared as Xquery path
		/// </summary>
		public Literal XQueryDataType
		{
			get { return _xQueryDataType; }
			set { UpdateTokenInfo(value); _xQueryDataType = value; }
		}
		private IntegerLiteral _maxLength;

		/// <summary>
		/// The value of MAXLENGTH option
		/// </summary>
		public IntegerLiteral MaxLength
		{
			get { return _maxLength; }
			set { UpdateTokenInfo(value); _maxLength = value; }
		}
		private bool _isSingleton;

		/// <summary>
		/// Specifies if SINGLETON option is set
		/// </summary>
		public bool IsSingleton
		{
			get { return _isSingleton; }
			set { _isSingleton = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Path != null)
			{
				this.Path.Accept(visitor);
			}

			if (this.SQLDataType != null)
			{
				this.SQLDataType.Accept(visitor);
			}

			if (this.XQueryDataType != null)
			{
				this.XQueryDataType.Accept(visitor);
			}

			if (this.MaxLength != null)
			{
				this.MaxLength.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Base class for all temporal clauses.
	/// </summary>
	[System.Serializable]
	public partial class TemporalClause : TSqlFragment
	{


		private TemporalClauseType _temporalClauseType;

		/// <summary>
		/// The type of temporal clause.
		/// </summary>
		public TemporalClauseType TemporalClauseType
		{
			get { return _temporalClauseType; }
			set { _temporalClauseType = value; }
		}
		private ScalarExpression _startTime;

		/// <summary>
		/// Temporal clause start time.
		/// </summary>
		public ScalarExpression StartTime
		{
			get { return _startTime; }
			set { UpdateTokenInfo(value); _startTime = value; }
		}
		private ScalarExpression _endTime;

		/// <summary>
		/// Temporal clause end time.
		/// </summary>
		public ScalarExpression EndTime
		{
			get { return _endTime; }
			set { UpdateTokenInfo(value); _endTime = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.StartTime != null)
			{
				this.StartTime.Accept(visitor);
			}

			if (this.EndTime != null)
			{
				this.EndTime.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the compression delay index option that can be an expression with an optional minute/minutes time unit.
	/// </summary>
	[System.Serializable]
	public partial class CompressionDelayIndexOption : IndexOption
	{


		private ScalarExpression _expression;

		/// <summary>
		/// Can be an integer in the range 0 - 10080.
		/// </summary>
		public ScalarExpression Expression
		{
			get { return _expression; }
			set { UpdateTokenInfo(value); _expression = value; }
		}
		private CompressionDelayTimeUnit _timeUnit;

		/// <summary>
		/// The optional unit of measure for the compression delay (it can be MINUTE or MINUTES).
		/// </summary>
		public CompressionDelayTimeUnit TimeUnit
		{
			get { return _timeUnit; }
			set { _timeUnit = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.Expression != null)
			{
				this.Expression.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents common parts in create and alter external library statements.
	/// </summary>
	[System.Serializable]
	public abstract partial class ExternalLibraryStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the external library.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private StringLiteral _language;

		/// <summary>
		/// The language of this external library.
		/// </summary>
		public StringLiteral Language
		{
			get { return _language; }
			set { UpdateTokenInfo(value); _language = value; }
		}
		private List<ExternalLibraryFileOption> _externalLibraryFiles = new List<ExternalLibraryFileOption>();

		/// <summary>
		/// The content of this external library.
		/// </summary>
		public IList<ExternalLibraryFileOption> ExternalLibraryFiles
		{
			get { return _externalLibraryFiles; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Language != null)
			{
				this.Language.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ExternalLibraryFiles.Count; i < count; ++i)
			{
				this.ExternalLibraryFiles[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the CREATE EXTERNAL LIBRARY statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateExternalLibraryStatement : ExternalLibraryStatement, IAuthorization
	{


		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((ExternalLibraryStatement)this).Name != null)
			{
				 ((ExternalLibraryStatement)this).Name.Accept(visitor);
			}

			if (((ExternalLibraryStatement)this).Language != null)
			{
				 ((ExternalLibraryStatement)this).Language.Accept(visitor);
			}

			for (Int32 i = 0, count = ((ExternalLibraryStatement)this).ExternalLibraryFiles.Count; i < count; ++i)
			{
				 ((ExternalLibraryStatement)this).ExternalLibraryFiles[i].Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the ALTER EXTERNAL LIBRARY statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterExternalLibraryStatement : ExternalLibraryStatement, IAuthorization
	{


		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((ExternalLibraryStatement)this).Name != null)
			{
				 ((ExternalLibraryStatement)this).Name.Accept(visitor);
			}

			if (((ExternalLibraryStatement)this).Language != null)
			{
				 ((ExternalLibraryStatement)this).Language.Accept(visitor);
			}

			for (Int32 i = 0, count = ((ExternalLibraryStatement)this).ExternalLibraryFiles.Count; i < count; ++i)
			{
				 ((ExternalLibraryStatement)this).ExternalLibraryFiles[i].Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a single file in CREATE EXTERNAL LIBRARY statement
	/// </summary>
	[System.Serializable]
	public partial class ExternalLibraryFileOption : TSqlFragment
	{


		private ScalarExpression _content;

		/// <summary>
		/// Library bits
		/// </summary>
		public ScalarExpression Content
		{
			get { return _content; }
			set { UpdateTokenInfo(value); _content = value; }
		}
		private StringLiteral _path;

		/// <summary>
		/// The library path as string
		/// </summary>
		public StringLiteral Path
		{
			get { return _path; }
			set { UpdateTokenInfo(value); _path = value; }
		}
		private Identifier _platform;

		/// <summary>
		/// The OS platform of the content
		/// </summary>
		public Identifier Platform
		{
			get { return _platform; }
			set { UpdateTokenInfo(value); _platform = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Content != null)
			{
				this.Content.Accept(visitor);
			}

			if (this.Path != null)
			{
				this.Path.Accept(visitor);
			}

			if (this.Platform != null)
			{
				this.Platform.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the DROP EXTERNAL LIBRARY statement.
	/// </summary>
	[System.Serializable]
	public partial class DropExternalLibraryStatement : TSqlStatement, IAuthorization
	{


		private Identifier _name;

		/// <summary>
		/// The unique name of the external library.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents common parts in create and alter external language statements.
	/// </summary>
	[System.Serializable]
	public abstract partial class ExternalLanguageStatement : TSqlStatement
	{


		private Identifier _name;

		/// <summary>
		/// The name of the external language.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private List<ExternalLanguageFileOption> _externalLanguageFiles = new List<ExternalLanguageFileOption>();

		/// <summary>
		/// The content of this external language.
		/// </summary>
		public IList<ExternalLanguageFileOption> ExternalLanguageFiles
		{
			get { return _externalLanguageFiles; }
		}



		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			for (Int32 i = 0, count = this.ExternalLanguageFiles.Count; i < count; ++i)
			{
				this.ExternalLanguageFiles[i].Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the CREATE EXTERNAL LANGUAGE statement.
	/// </summary>
	[System.Serializable]
	public partial class CreateExternalLanguageStatement : ExternalLanguageStatement, IAuthorization
	{


		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((ExternalLanguageStatement)this).Name != null)
			{
				 ((ExternalLanguageStatement)this).Name.Accept(visitor);
			}

			for (Int32 i = 0, count = ((ExternalLanguageStatement)this).ExternalLanguageFiles.Count; i < count; ++i)
			{
				 ((ExternalLanguageStatement)this).ExternalLanguageFiles[i].Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents the ALTER EXTERNAL LANGUAGE statement.
	/// </summary>
	[System.Serializable]
	public partial class AlterExternalLanguageStatement : ExternalLanguageStatement, IAuthorization
	{


		private Identifier _platform;

		/// <summary>
		/// The OS platform of the content
		/// </summary>
		public Identifier Platform
		{
			get { return _platform; }
			set { UpdateTokenInfo(value); _platform = value; }
		}
		private Identifier _operation;

		/// <summary>
		/// Which Alter operation (Set, Add, Remove)
		/// </summary>
		public Identifier Operation
		{
			get { return _operation; }
			set { UpdateTokenInfo(value); _operation = value; }
		}
		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (((ExternalLanguageStatement)this).Name != null)
			{
				 ((ExternalLanguageStatement)this).Name.Accept(visitor);
			}

			for (Int32 i = 0, count = ((ExternalLanguageStatement)this).ExternalLanguageFiles.Count; i < count; ++i)
			{
				 ((ExternalLanguageStatement)this).ExternalLanguageFiles[i].Accept(visitor);
			}

			if (this.Platform != null)
			{
				this.Platform.Accept(visitor);
			}

			if (this.Operation != null)
			{
				this.Operation.Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

		}
	}

	/// <summary>
	/// Represents a single file in CREATE EXTERNAL LANGUAGE statement
	/// </summary>
	[System.Serializable]
	public partial class ExternalLanguageFileOption : TSqlFragment
	{


		private ScalarExpression _content;

		/// <summary>
		/// Language bits
		/// </summary>
		public ScalarExpression Content
		{
			get { return _content; }
			set { UpdateTokenInfo(value); _content = value; }
		}
		private StringLiteral _fileName;

		/// <summary>
		/// The file name as string
		/// </summary>
		public StringLiteral FileName
		{
			get { return _fileName; }
			set { UpdateTokenInfo(value); _fileName = value; }
		}
		private StringLiteral _path;

		/// <summary>
		/// The language path as string
		/// </summary>
		public StringLiteral Path
		{
			get { return _path; }
			set { UpdateTokenInfo(value); _path = value; }
		}
		private Identifier _platform;

		/// <summary>
		/// The OS platform of the content
		/// </summary>
		public Identifier Platform
		{
			get { return _platform; }
			set { UpdateTokenInfo(value); _platform = value; }
		}
		private StringLiteral _parameters;

		/// <summary>
		/// The parameters as string
		/// </summary>
		public StringLiteral Parameters
		{
			get { return _parameters; }
			set { UpdateTokenInfo(value); _parameters = value; }
		}
		private StringLiteral _environmentVariables;

		/// <summary>
		/// The environment variables as string
		/// </summary>
		public StringLiteral EnvironmentVariables
		{
			get { return _environmentVariables; }
			set { UpdateTokenInfo(value); _environmentVariables = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Content != null)
			{
				this.Content.Accept(visitor);
			}

			if (this.FileName != null)
			{
				this.FileName.Accept(visitor);
			}

			if (this.Path != null)
			{
				this.Path.Accept(visitor);
			}

			if (this.Platform != null)
			{
				this.Platform.Accept(visitor);
			}

			if (this.Parameters != null)
			{
				this.Parameters.Accept(visitor);
			}

			if (this.EnvironmentVariables != null)
			{
				this.EnvironmentVariables.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the DROP EXTERNAL LANGUAGE statement.
	/// </summary>
	[System.Serializable]
	public partial class DropExternalLanguageStatement : TSqlStatement, IAuthorization
	{


		private Identifier _name;

		/// <summary>
		/// The unique name of the external language.
		/// </summary>
		public Identifier Name
		{
			get { return _name; }
			set { UpdateTokenInfo(value); _name = value; }
		}
		private Identifier _owner;

		/// <summary>
		/// Owner of the object (optional, can be null)
		/// </summary>
		public Identifier Owner
		{
			get { return _owner; }
			set { UpdateTokenInfo(value); _owner = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			if (this.Name != null)
			{
				this.Name.Accept(visitor);
			}

			if (this.Owner != null)
			{
				this.Owner.Accept(visitor);
			}

			base.AcceptChildren(visitor);
		}
	}

	/// <summary>
	/// Represents the ELASTIC_POOL service objective specification.
	/// </summary>
	[System.Serializable]
	public partial class ElasticPoolSpecification : DatabaseOption
	{


		private Identifier _elasticPoolName;

		/// <summary>
		/// The name of the elastic pool.
		/// </summary>
		public Identifier ElasticPoolName
		{
			get { return _elasticPoolName; }
			set { UpdateTokenInfo(value); _elasticPoolName = value; }
		}

		/// <summary>
		/// Accepts visitor
		/// </summary>
		public override void Accept(TSqlFragmentVisitor visitor)
		{
			if (visitor != null)
			{
				visitor.ExplicitVisit(this);
			}
		}

		/// <summary>
		/// Accepts visitor for Children
		/// </summary>
		public override void AcceptChildren(TSqlFragmentVisitor visitor)
		{
			base.AcceptChildren(visitor);
			if (this.ElasticPoolName != null)
			{
				this.ElasticPoolName.Accept(visitor);
			}

		}
	}


}
