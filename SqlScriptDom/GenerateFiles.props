<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <GSqlTokenTypesCompile Include="$(SQLSCRIPTDOM)\Parser\TSql\TSqlTokenTypes.g" />
    <GLexerParserCompile Include="$(SQLSCRIPTDOM)\Parser\TSql\TSql80.g" />
    <GLexerParserCompile Include="$(SQLSCRIPTDOM)\Parser\TSql\TSql90.g" />
    <GLexerParserCompile Include="$(SQLSCRIPTDOM)\Parser\TSql\TSql100.g" />
    <GLexerParserCompile Include="$(SQLSCRIPTDOM)\Parser\TSql\TSql110.g" />
    <GLexerParserCompile Include="$(SQLSCRIPTDOM)\Parser\TSql\TSql120.g" />
    <GLexerParserCompile Include="$(SQLSCRIPTDOM)\Parser\TSql\TSql130.g" />
    <GLexerParserCompile Include="$(SQLSCRIPTDOM)\Parser\TSql\TSql140.g" />
    <GLexerParserCompile Include="$(SQLSCRIPTDOM)\Parser\TSql\TSql150.g" />
    <GLexerParserCompile Include="$(SQLSCRIPTDOM)\Parser\TSql\TSql160.g" />
  </ItemGroup>
  <Target Name="CreateCsGenIntermediateOutputPath" AfterTargets="BuildGenerateSources" BeforeTargets="CoreCompile">
    <MakeDir Directories="$(CsGenIntermediateOutputPath)" Condition="!Exists('$(CsGenIntermediateOutputPath)')" />
  </Target>
  <!-- These target makes sure to download Antlr once instead of 
       downloading it for each of the frameworks.
   -->
  <Target Name="InstallAntlr" Condition="!Exists($(AntlrLocation))" BeforeTargets="DispatchToInnerBuilds">
    <DownloadFile
        SourceUrl= "$(AntlrSourceUrl)"
        DestinationFolder="$([System.IO.Path]::GetDirectoryName($(AntlrLocation)))">
      <Output TaskParameter="DownloadedFile" ItemName="Content" />
    </DownloadFile>
  </Target>
  <Target Name="GSqlTokenTypesCompile" Condition="'@(GSqlTokenTypesCompile)'!=''" DependsOnTargets="CreateCsGenIntermediateOutputPath;InstallAntlr" BeforeTargets="CoreCompile" Inputs="@(GSqlTokenTypesCompile)" Outputs="@(GSqlTokenTypesCompile->'$(CsGenIntermediateOutputPath)%(filename)_final.cs')">
    <Exec Command="java -cp &quot;$(AntlrLocation)&quot; antlr.Tool -o &quot;$(CsGenIntermediateOutputPath.TrimEnd('\'))&quot; &quot;%(GSqlTokenTypesCompile.Identity)&quot;" Condition="'$(OS)' != 'Windows_NT'" />
    <Exec Command="pwsh TSqlTokenTypes.ps1 &quot;$(CsGenIntermediateOutputPath)%(GSqlTokenTypesCompile.Filename).cs&quot; &quot;$(CsGenIntermediateOutputPath)%(GSqlTokenTypesCompile.Filename)_final.cs&quot;" Condition="'$(OS)' != 'Windows_NT'" />

    <Exec Command="&quot;$(AntlrLocation)&quot; -o &quot;$(CsGenIntermediateOutputPath.TrimEnd('\'))&quot; &quot;%(GSqlTokenTypesCompile.Identity)&quot;" Condition="'$(OS)' == 'Windows_NT'" />
    <Exec Command="powershell -NonInteractive -Executionpolicy Unrestricted .\TSqlTokenTypes.ps1 &quot;$(CsGenIntermediateOutputPath)%(GSqlTokenTypesCompile.Filename).cs&quot; &quot;$(CsGenIntermediateOutputPath)%(GSqlTokenTypesCompile.Filename)_final.cs&quot;" Condition="'$(OS)' == 'Windows_NT'" />

    <ItemGroup>
      <Compile Condition="'$(SqlDomNuget)'!='true'" Include="$(CsGenIntermediateOutputPath)%(GSqlTokenTypesCompile.Filename)_final.cs" />
    </ItemGroup>
  </Target>
  <Target Name="GLexerParserCompile" Condition="'@(GLexerParserCompile)'!=''" DependsOnTargets="CreateCsGenIntermediateOutputPath;InstallAntlr" BeforeTargets="CoreCompile" Inputs="@(GLexerParserCompile)" Outputs="@(GLexerParserCompile->'$(CsGenIntermediateOutputPath)%(filename)ParserInternal_final.cs');@(GLexerParserCompile->'$(CsGenIntermediateOutputPath)%(filename)LexerInternal_final.cs')">
    <!--Based on property we either run antlr with all warnings and errors supressed or not-->
    <Exec Command="java -cp &quot;$(AntlrLocation)&quot; antlr.Tool -o &quot;$(CsGenIntermediateOutputPath.TrimEnd('\'))&quot; &quot;%(GLexerParserCompile.Identity)&quot; &gt; NUL 2&gt;&amp;1" Condition="'$(OutputErrorInLexerParserCompile)' == 'false' And '$(OS)' != 'Windows_NT'" />
    <Exec Command="java -cp &quot;$(AntlrLocation)&quot; antlr.Tool -o &quot;$(CsGenIntermediateOutputPath.TrimEnd('\'))&quot; &quot;%(GLexerParserCompile.Identity)&quot; " Condition="'$(OutputErrorInLexerParserCompile)' == 'true' And '$(OS)' != 'Windows_NT'" />

    <Exec Command="pwsh LexerPostProcessing.ps1 &quot;$(CsGenIntermediateOutputPath)%(GLexerParserCompile.Filename)LexerInternal.cs&quot; &quot;$(CsGenIntermediateOutputPath)%(GLexerParserCompile.Filename)LexerInternal_final.cs&quot;" Condition="'$(OS)' != 'Windows_NT'" />
    <Exec Command="pwsh ParserPostProcessing.ps1 &quot;$(CsGenIntermediateOutputPath)%(GLexerParserCompile.Filename)ParserInternal.cs&quot; &quot;$(CsGenIntermediateOutputPath)%(GLexerParserCompile.Filename)ParserInternal_final.cs&quot;" Condition="'$(OS)' != 'Windows_NT'" />


    <Exec Command="&quot;$(AntlrLocation)&quot; -o &quot;$(CsGenIntermediateOutputPath.TrimEnd('\'))&quot; &quot;%(GLexerParserCompile.Identity)&quot; &gt; NUL 2&gt;&amp;1" Condition="'$(OutputErrorInLexerParserCompile)' == 'false' And '$(OS)' == 'Windows_NT'" />
    <Exec Command="&quot;$(AntlrLocation)&quot; -o &quot;$(CsGenIntermediateOutputPath.TrimEnd('\'))&quot; &quot;%(GLexerParserCompile.Identity)&quot; " Condition="'$(OutputErrorInLexerParserCompile)' == 'true' And '$(OS)' == 'Windows_NT'" />

    <Exec Command="powershell -NonInteractive -Executionpolicy Unrestricted .\LexerPostProcessing.ps1 &quot;$(CsGenIntermediateOutputPath)%(GLexerParserCompile.Filename)LexerInternal.cs&quot; &quot;$(CsGenIntermediateOutputPath)%(GLexerParserCompile.Filename)LexerInternal_final.cs&quot;" Condition="'$(OS)' == 'Windows_NT'" />
    <Exec Command="powershell -NonInteractive -Executionpolicy Unrestricted .\ParserPostProcessing.ps1 &quot;$(CsGenIntermediateOutputPath)%(GLexerParserCompile.Filename)ParserInternal.cs&quot; &quot;$(CsGenIntermediateOutputPath)%(GLexerParserCompile.Filename)ParserInternal_final.cs&quot;" Condition="'$(OS)' == 'Windows_NT'" />

    <ItemGroup>
      <Compile Condition="'$(SqlDomNuget)'!='true'" Include="$(CsGenIntermediateOutputPath)%(GLexerParserCompile.Filename)LexerInternal_final.cs" />
      <Compile Condition="'$(SqlDomNuget)'!='true'" Include="$(CsGenIntermediateOutputPath)%(GLexerParserCompile.Filename)ParserInternal_final.cs" />
    </ItemGroup>
  </Target>
  <Target Name="CreateAST" DependsOnTargets="AfterResolveReferences;GSqlTokenTypesCompile" BeforeTargets="CoreCompile" Inputs="$(SQLSCRIPTDOM)\Parser\TSql\Ast.xml;" Outputs="$(CsGenIntermediateOutputPath)Ast.cs;$(CsGenIntermediateOutputPath)TSqlConcreteFragmentVisitor.codegen.cs">
    <Exec Condition="'$(SqlDomNuget)'!='true' And '$(OS)' != 'Windows_NT'" Command="&quot;$(BuildToolsPath)/astgen&quot; &quot;$(SQLSCRIPTDOM)/Parser/TSql/Ast.xml&quot; &quot;$(CsGenIntermediateOutputPath)TSqlFragmentVisitor.codegen.cs&quot; &quot;$(CsGenIntermediateOutputPath)TSqlConcreteFragmentVisitor.codegen.cs&quot; &quot;$(CsGenIntermediateOutputPath)Ast.cs&quot; " />
    <Exec Condition="'$(SqlDomNuget)'=='true' And '$(OS)' != 'Windows_NT'" Command="&quot;$(BuildToolsPath)/astgen&quot; &quot;$(SQLSCRIPTDOM)/Parser/TSql/Ast.xml&quot; &quot;$(CsGenIntermediateOutputPath)TSqlFragmentVisitor.codegen.cs&quot; &quot;$(CsGenIntermediateOutputPath)TSqlConcreteFragmentVisitor.codegen.cs&quot; &quot;$(CsGenIntermediateOutputPath)Ast.cs&quot; -test &quot;$(CsGenIntermediateOutputPath)\OverrideSqlScriptGeneratorVisitor.codegen.cs&quot; &quot;" />
    <Exec Condition="'$(SqlDomNuget)'!='true' And '$(OS)' == 'Windows_NT'" Command="&quot;$(BuildToolsPath)\AstGen.exe&quot; &quot;$(SQLSCRIPTDOM)\Parser\TSql\Ast.xml&quot; &quot;$(CsGenIntermediateOutputPath)TSqlFragmentVisitor.codegen.cs&quot; &quot;$(CsGenIntermediateOutputPath)TSqlConcreteFragmentVisitor.codegen.cs&quot; &quot;$(CsGenIntermediateOutputPath)Ast.cs&quot; " />
    <Exec Condition="'$(SqlDomNuget)'=='true' And '$(OS)' == 'Windows_NT'" Command="&quot;$(BuildToolsPath)\AstGen.exe&quot; &quot;$(SQLSCRIPTDOM)\Parser\TSql\Ast.xml&quot; &quot;$(CsGenIntermediateOutputPath)TSqlFragmentVisitor.codegen.cs&quot; &quot;$(CsGenIntermediateOutputPath)TSqlConcreteFragmentVisitor.codegen.cs&quot; &quot;$(CsGenIntermediateOutputPath)Ast.cs&quot; -test &quot;$(CsGenIntermediateOutputPath)\OverrideSqlScriptGeneratorVisitor.codegen.cs&quot; &quot;" />
    <ItemGroup>
      <Compile Condition="'$(SqlDomNuget)'!='true'" Include="$(CsGenIntermediateOutputPath)Ast.cs" />
      <Compile Condition="'$(SqlDomNuget)'!='true'" Include="$(CsGenIntermediateOutputPath)TSqlConcreteFragmentVisitor.codegen.cs" />
    </ItemGroup>
  </Target>
  <Target Name="GenerateEverything" DependsOnTargets="AfterResolveReferences;GSqlTokenTypesCompile" BeforeTargets="CoreCompile" Inputs="$(SQLSCRIPTDOM)\ScriptDom\SqlServer\Settings\SqlScriptGeneratorOptions.xml" Outputs="$(CsGenIntermediateOutputPath)TSqlTokenTypes.txt;$(CsGenIntermediateOutputPath)TSqlFragmentVisitor.codegen.cs;$(CsGenIntermediateOutputPath)SqlScriptGeneratorOptions.cs;$(CsGenIntermediateOutputPath)ScriptGeneratorSupporter.Generated.cs">
    <Exec Condition="'$(OS)' != 'Windows_NT'" Command="&quot;$(BuildToolsPath)/ScriptGenSettingsGenerator&quot; &quot;$(SQLSCRIPTDOM)/ScriptDom/SqlServer/Settings/SqlScriptGeneratorOptions.xml&quot; &quot;$(CsGenIntermediateOutputPath)SqlScriptGeneratorOptions.cs&quot; &quot;$(CsGenIntermediateOutputPath)SqlScriptGeneratorOptionsAdapter.Generated.cs&quot;" />
    <Exec Condition="'$(OS)' != 'Windows_NT'" Command="&quot;$(BuildToolsPath)/TokenListGenerator&quot; &quot;$(CsGenIntermediateOutputPath)TSqlTokenTypes.txt&quot; &gt; &quot;$(CsGenIntermediateOutputPath)ScriptGeneratorSupporter.Generated.cs&quot;" />
    <Exec Condition="'$(OS)' == 'Windows_NT'" Command="&quot;$(BuildToolsPath)\ScriptGenSettingsGenerator.exe&quot; &quot;$(SQLSCRIPTDOM)\ScriptDom\SqlServer\Settings\SqlScriptGeneratorOptions.xml&quot; &quot;$(CsGenIntermediateOutputPath)SqlScriptGeneratorOptions.cs&quot; &quot;$(CsGenIntermediateOutputPath)SqlScriptGeneratorOptionsAdapter.Generated.cs&quot;" />
    <Exec Condition="'$(OS)' == 'Windows_NT'" Command="&quot;$(BuildToolsPath)\TokenListGenerator.exe&quot; &quot;$(CsGenIntermediateOutputPath)TSqlTokenTypes.txt&quot; &gt; &quot;$(CsGenIntermediateOutputPath)ScriptGeneratorSupporter.Generated.cs&quot;" />
    <ItemGroup>
      <Compile Condition="'$(SqlDomNuget)'!='true'" Include="$(CsGenIntermediateOutputPath)ScriptGeneratorSupporter.Generated.cs" />
      <Compile Condition="'$(SqlDomNuget)'!='true'" Include="$(CsGenIntermediateOutputPath)SqlScriptGeneratorOptions.cs" />
      <Compile Condition="'$(SqlDomNuget)'!='true'" Include="$(CsGenIntermediateOutputPath)TSqlFragmentVisitor.codegen.cs" />
    </ItemGroup>
  </Target>
</Project>